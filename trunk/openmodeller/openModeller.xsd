<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://openmodeller.cria.org.br/xml/1.0"
 xmlns="http://openmodeller.cria.org.br/xml/1.0"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 elementFormDefault="qualified"
 attributeFormDefault="unqualified"
 version="1.0" xml:lang="EN">
  <xs:annotation>
    <xs:documentation xml:lang="en">
        XML Schema with all basic element and type definitions used by openModeller.
    </xs:documentation>		
  </xs:annotation>

<!--

TODO:

* See how ModelOutputType could use Algorithm Metadata with parameter values 
  (define groups?)
  (define SerializedAlgorithmType?)

* Change Model serialization!

* Define ProjectionInputType

* Include Abundance in Point

* Merge Presence with Absence (?)

 -->

  <!-- GLOBAL ELEMENTS -->

  <xs:element name="AvailableAlgorithms" type="AvailableAlgorithmsType"/>

  <xs:element name="Algorithms" type="AlgorithmsMetadataType"/>

  <xs:element name="AvailableLayers" type="AvailableLayersType"/>

  <xs:element name="ModelParameters" type="ModelParametersType"/>

  <xs:element name="ModelEnvelope" type="ModelEnvelopeType"/>

  <xs:element name="ModelResult" type="ModelResultType"/>

  <xs:element name="ProjectModel" type="ProjectionInputType"/>

  <!-- TYPE DEFINITIIONS -->

  <xs:complexType name="AvailableAlgorithmsType">
    <xs:sequence>
      <xs:element ref="Algorithms"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="AlgorithmsMetadataType">
    <xs:sequence>
      <xs:element name="AlgorithmMetadata" type="AlgorithmMetadataType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="AlgorithmMetadataType">
    <xs:sequence>
      <xs:element name="Name" type="xs:string"/>
      <xs:element name="Overview" type="xs:string"/>
      <xs:element name="Description" type="xs:string"/>
      <xs:element name="Designers">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Designer" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="Name" type="xs:string"/>
                <xs:attribute name="Contact" type="xs:string" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Bibliography" type="xs:string" minOccurs="0"/>
      <xs:element name="Developers">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Developer" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="Name" type="xs:string"/>
                <xs:attribute name="Contact" type="xs:string" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="AcceptsCategoricalMaps" type="xs:boolean"/>
      <xs:element name="RequiresAbsencePoints" type="xs:boolean"/>
      <xs:element name="Parameters">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Parameter" minOccurs="0" maxOccurs="unbounded">
              <xs:complexType>
                <xs:sequence>
                  <xs:element name="Name" type="xs:string"/>
                  <xs:element name="Type" type="xs:string"/>
                  <xs:element name="Overview" type="xs:string"/>
                  <xs:element name="Description" type="xs:string"/>
                  <xs:element name="AcceptedRange" minOccurs="0">
                    <xs:complexType>
                      <xs:attribute name="Min" type="xs:double" use="optional"/>
                      <xs:attribute name="Max" type="xs:double" use="optional"/>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="AcceptedValues" minOccurs="0">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element name="Value" type="xs:string" maxOccurs="unbounded"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                  <xs:element name="Default" type="xs:string" minOccurs="0"/>
                </xs:sequence>
                <xs:attribute name="Id" type="xs:string" use="required"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:string" use="required"/>
    <xs:attribute name="Version" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="BasicAlgorithmDefinitionType">
    <xs:sequence>
      <xs:element name="Parameters">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Parameter" minOccurs="0" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="Id" type="xs:string" use="required"/>
                <xs:attribute name="Value" type="xs:string" use="required"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:string" use="required"/>
    <xs:attribute name="Version" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="SerializedAlgorithmType">
    <xs:sequence>
      <xs:element name="Name" type="xs:string"/>
      <xs:element name="Overview" type="xs:string"/>
      <xs:element name="Designers">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Designer" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="Name" type="xs:string"/>
                <xs:attribute name="Contact" type="xs:string" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Bibliography" type="xs:string" minOccurs="0"/>
      <xs:element name="Developers">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Developer" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="Name" type="xs:string"/>
                <xs:attribute name="Contact" type="xs:string" use="optional"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Parameters">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Parameter" minOccurs="0" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="Id" type="xs:string" use="required"/>
                <xs:attribute name="Value" type="xs:string" use="required"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Normalization" type="NormalizationType" minOccurs="0"/>
      <xs:element name="Model">
        <xs:complexType>
          <xs:sequence>
            <xs:any processContents="lax"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:string" use="required"/>
    <xs:attribute name="Version" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="AvailableLayersType">
    <xs:sequence>
      <xs:element name="LayersGroup" type="LayersGroupType"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="LayersGroupType">
    <xs:sequence>
      <xs:element name="Label" type="xs:string"/>
      <xs:element name="LayersGroup" type="LayersGroupType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Layer" type="LayerType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="LayerType">
    <xs:sequence>
      <xs:element name="Label" type="xs:string" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="Id" type="xs:string" use="required"/>
    <xs:attribute name="IsCategorical" type="xs:boolean" use="optional"/>
    <xs:attribute name="HasProjection" type="xs:boolean" use="optional"/>
    <xs:attribute name="Min" type="xs:double" use="optional"/>
    <xs:attribute name="Max" type="xs:double" use="optional"/>
  </xs:complexType>

  <xs:complexType name="EnvironmentType">
    <xs:sequence>
      <xs:element name="Map" maxOccurs="unbounded" type="LayerType"/>
      <xs:element name="Mask" type="LayerType"/>
    </xs:sequence>
    <xs:attribute name="NumLayers" type="xs:int" use="optional"/>
  </xs:complexType>

  <xs:complexType name="OccurrencesType">
   <xs:sequence>
    <xs:element name="CoordinateSystem" type="xs:string" minOccurs="0"/>
    <xs:element name="Point" maxOccurs="unbounded">
     <xs:complexType>
      <xs:attribute name="X" type="xs:string" use="required"/>
      <xs:attribute name="Y" type="xs:string" use="required"/>
      <xs:attribute name="Sample" type="xs:string" use="optional"/>
     </xs:complexType>
    </xs:element>
   </xs:sequence>
   <xs:attribute name="Count" type="xs:int" use="optional"/>
   <xs:attribute name="Label" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="SamplerType">
    <xs:sequence>
      <xs:element name="Environment" type="EnvironmentType"/>
      <xs:element name="Presence" type="OccurrencesType"/>
      <xs:element name="Absence" type="OccurrencesType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="NormalizationType">
    <xs:attribute name="Offsets" type="xs:string" use="required"/>
    <xs:attribute name="Scales" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="ModelParametersType">
    <xs:sequence>
      <xs:element name="Sampler" type="SamplerType"/>
      <xs:element name="Algorithm" type="BasicAlgorithmDefinitionType"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ModelEnvelopeType">
    <xs:sequence>
      <xs:element ref="ModelResult"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ModelResultType">
    <xs:sequence>
      <xs:element name="Sampler" type="SamplerType"/>
      <xs:element name="Algorithm" type="SerializedAlgorithmType"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ProjectionInputType">
  </xs:complexType>

</xs:schema>
