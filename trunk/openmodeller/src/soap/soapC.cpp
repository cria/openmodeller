/* soapC.cpp
   Generated by gSOAP 2.5.2 from om_soap.hh
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#include "soapH.h"

SOAP_BEGIN_NAMESPACE(soap)

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.5.2 2004-09-28 20:13:56 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version != 1 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_om__ping:
		return soap_in_om__ping(soap, NULL, NULL, "om:ping");
	case SOAP_TYPE_om__pingResponse:
		return soap_in_om__pingResponse(soap, NULL, NULL, "om:pingResponse");
	case SOAP_TYPE_om__getDistributionMap:
		return soap_in_om__getDistributionMap(soap, NULL, NULL, "om:getDistributionMap");
	case SOAP_TYPE_om__getDistributionMapResponse:
		return soap_in_om__getDistributionMapResponse(soap, NULL, NULL, "om:getDistributionMapResponse");
	case SOAP_TYPE_om__createModel:
		return soap_in_om__createModel(soap, NULL, NULL, "om:createModel");
	case SOAP_TYPE_om__createModelResponse:
		return soap_in_om__createModelResponse(soap, NULL, NULL, "om:createModelResponse");
	case SOAP_TYPE_om__Output:
		return soap_in_om__Output(soap, NULL, NULL, "om:Output");
	case SOAP_TYPE_soap_Output:
		return soap_in_soap_Output(soap, NULL, NULL, "soap-Output");
	case SOAP_TYPE_om__Algorithm:
		return soap_in_om__Algorithm(soap, NULL, NULL, "om:Algorithm");
	case SOAP_TYPE_soap_Algorithm:
		return soap_in_soap_Algorithm(soap, NULL, NULL, "soap-Algorithm");
	case SOAP_TYPE_om__Parameter:
		return soap_in_om__Parameter(soap, NULL, NULL, "om:Parameter");
	case SOAP_TYPE_soap_Parameter:
		return soap_in_soap_Parameter(soap, NULL, NULL, "soap-Parameter");
	case SOAP_TYPE_om__Mask:
		return soap_in_om__Mask(soap, NULL, NULL, "om:Mask");
	case SOAP_TYPE_soap_Mask:
		return soap_in_soap_Mask(soap, NULL, NULL, "soap-Mask");
	case SOAP_TYPE_om__Maps:
		return soap_in_om__Maps(soap, NULL, NULL, "om:Maps");
	case SOAP_TYPE_soap_Maps:
		return soap_in_soap_Maps(soap, NULL, NULL, "soap-Maps");
	case SOAP_TYPE_om__Map:
		return soap_in_om__Map(soap, NULL, NULL, "om:Map");
	case SOAP_TYPE_soap_Map:
		return soap_in_soap_Map(soap, NULL, NULL, "soap-Map");
	case SOAP_TYPE_om__Points:
		return soap_in_om__Points(soap, NULL, NULL, "om:Points");
	case SOAP_TYPE_soap_Points:
		return soap_in_soap_Points(soap, NULL, NULL, "soap-Points");
	case SOAP_TYPE_om__AbsencePoints:
		return soap_in_om__AbsencePoints(soap, NULL, NULL, "om:AbsencePoints");
	case SOAP_TYPE_soap_AbsencePoints:
		return soap_in_soap_AbsencePoints(soap, NULL, NULL, "soap-AbsencePoints");
	case SOAP_TYPE_om__PresencePoints:
		return soap_in_om__PresencePoints(soap, NULL, NULL, "om:PresencePoints");
	case SOAP_TYPE_soap_PresencePoints:
		return soap_in_soap_PresencePoints(soap, NULL, NULL, "soap-PresencePoints");
	case SOAP_TYPE_om__Point:
		return soap_in_om__Point(soap, NULL, NULL, "om:Point");
	case SOAP_TYPE_soap_Point:
		return soap_in_soap_Point(soap, NULL, NULL, "soap-Point");
	case SOAP_TYPE_om__getAlgorithms:
		return soap_in_om__getAlgorithms(soap, NULL, NULL, "om:getAlgorithms");
	case SOAP_TYPE_om__getAlgorithmsResponse:
		return soap_in_om__getAlgorithmsResponse(soap, NULL, NULL, "om:getAlgorithmsResponse");
	case SOAP_TYPE_om__Algorithms:
		return soap_in_om__Algorithms(soap, NULL, NULL, "om:Algorithms");
	case SOAP_TYPE_soap_Algorithms:
		return soap_in_soap_Algorithms(soap, NULL, NULL, "soap-Algorithms");
	case SOAP_TYPE_om__AlgorithmMetadata:
		return soap_in_om__AlgorithmMetadata(soap, NULL, NULL, "om:AlgorithmMetadata");
	case SOAP_TYPE_soap_AlgorithmMetadata:
		return soap_in_soap_AlgorithmMetadata(soap, NULL, NULL, "soap-AlgorithmMetadata");
	case SOAP_TYPE_om__AlgorithmParameter:
		return soap_in_om__AlgorithmParameter(soap, NULL, NULL, "om:AlgorithmParameter");
	case SOAP_TYPE_soap_AlgorithmParameter:
		return soap_in_soap_AlgorithmParameter(soap, NULL, NULL, "soap-AlgorithmParameter");
	case SOAP_TYPE_PointerToxsd__int:
		return soap_in_PointerToxsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToxsd__string:
		return soap_in_PointerToxsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToom__Output:
		return soap_in_PointerToom__Output(soap, NULL, NULL, "om:Output");
	case SOAP_TYPE_PointerToom__Algorithm:
		return soap_in_PointerToom__Algorithm(soap, NULL, NULL, "om:Algorithm");
	case SOAP_TYPE_PointerToom__Mask:
		return soap_in_PointerToom__Mask(soap, NULL, NULL, "om:Mask");
	case SOAP_TYPE_PointerToom__Maps:
		return soap_in_PointerToom__Maps(soap, NULL, NULL, "om:Maps");
	case SOAP_TYPE_PointerToom__Points:
		return soap_in_PointerToom__Points(soap, NULL, NULL, "om:Points");
	case SOAP_TYPE_PointerToom__Parameter:
		return soap_in_PointerToom__Parameter(soap, NULL, NULL, "om:Parameter");
	case SOAP_TYPE_PointerToom__Map:
		return soap_in_PointerToom__Map(soap, NULL, NULL, "om:Map");
	case SOAP_TYPE_PointerToom__AbsencePoints:
		return soap_in_PointerToom__AbsencePoints(soap, NULL, NULL, "om:AbsencePoints");
	case SOAP_TYPE_PointerToom__PresencePoints:
		return soap_in_PointerToom__PresencePoints(soap, NULL, NULL, "om:PresencePoints");
	case SOAP_TYPE_PointerToom__Point:
		return soap_in_PointerToom__Point(soap, NULL, NULL, "om:Point");
	case SOAP_TYPE_PointerToom__AlgorithmMetadata:
		return soap_in_PointerToom__AlgorithmMetadata(soap, NULL, NULL, "om:AlgorithmMetadata");
	case SOAP_TYPE_PointerToom__AlgorithmParameter:
		return soap_in_PointerToom__AlgorithmParameter(soap, NULL, NULL, "om:AlgorithmParameter");
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:ping"))
		{	*type = SOAP_TYPE_om__ping;
			return soap_in_om__ping(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:pingResponse"))
		{	*type = SOAP_TYPE_om__pingResponse;
			return soap_in_om__pingResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:getDistributionMap"))
		{	*type = SOAP_TYPE_om__getDistributionMap;
			return soap_in_om__getDistributionMap(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:getDistributionMapResponse"))
		{	*type = SOAP_TYPE_om__getDistributionMapResponse;
			return soap_in_om__getDistributionMapResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:createModel"))
		{	*type = SOAP_TYPE_om__createModel;
			return soap_in_om__createModel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:createModelResponse"))
		{	*type = SOAP_TYPE_om__createModelResponse;
			return soap_in_om__createModelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Output"))
		{	*type = SOAP_TYPE_om__Output;
			return soap_in_om__Output(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Output"))
		{	*type = SOAP_TYPE_soap_Output;
			return soap_in_soap_Output(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Algorithm"))
		{	*type = SOAP_TYPE_om__Algorithm;
			return soap_in_om__Algorithm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Algorithm"))
		{	*type = SOAP_TYPE_soap_Algorithm;
			return soap_in_soap_Algorithm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Parameter"))
		{	*type = SOAP_TYPE_om__Parameter;
			return soap_in_om__Parameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Parameter"))
		{	*type = SOAP_TYPE_soap_Parameter;
			return soap_in_soap_Parameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Mask"))
		{	*type = SOAP_TYPE_om__Mask;
			return soap_in_om__Mask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Mask"))
		{	*type = SOAP_TYPE_soap_Mask;
			return soap_in_soap_Mask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Maps"))
		{	*type = SOAP_TYPE_om__Maps;
			return soap_in_om__Maps(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Maps"))
		{	*type = SOAP_TYPE_soap_Maps;
			return soap_in_soap_Maps(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Map"))
		{	*type = SOAP_TYPE_om__Map;
			return soap_in_om__Map(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Map"))
		{	*type = SOAP_TYPE_soap_Map;
			return soap_in_soap_Map(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Points"))
		{	*type = SOAP_TYPE_om__Points;
			return soap_in_om__Points(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Points"))
		{	*type = SOAP_TYPE_soap_Points;
			return soap_in_soap_Points(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AbsencePoints"))
		{	*type = SOAP_TYPE_om__AbsencePoints;
			return soap_in_om__AbsencePoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AbsencePoints"))
		{	*type = SOAP_TYPE_soap_AbsencePoints;
			return soap_in_soap_AbsencePoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:PresencePoints"))
		{	*type = SOAP_TYPE_om__PresencePoints;
			return soap_in_om__PresencePoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-PresencePoints"))
		{	*type = SOAP_TYPE_soap_PresencePoints;
			return soap_in_soap_PresencePoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Point"))
		{	*type = SOAP_TYPE_om__Point;
			return soap_in_om__Point(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Point"))
		{	*type = SOAP_TYPE_soap_Point;
			return soap_in_soap_Point(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:getAlgorithms"))
		{	*type = SOAP_TYPE_om__getAlgorithms;
			return soap_in_om__getAlgorithms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:getAlgorithmsResponse"))
		{	*type = SOAP_TYPE_om__getAlgorithmsResponse;
			return soap_in_om__getAlgorithmsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Algorithms"))
		{	*type = SOAP_TYPE_om__Algorithms;
			return soap_in_om__Algorithms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Algorithms"))
		{	*type = SOAP_TYPE_soap_Algorithms;
			return soap_in_soap_Algorithms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AlgorithmMetadata"))
		{	*type = SOAP_TYPE_om__AlgorithmMetadata;
			return soap_in_om__AlgorithmMetadata(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AlgorithmMetadata"))
		{	*type = SOAP_TYPE_soap_AlgorithmMetadata;
			return soap_in_soap_AlgorithmMetadata(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AlgorithmParameter"))
		{	*type = SOAP_TYPE_om__AlgorithmParameter;
			return soap_in_om__AlgorithmParameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AlgorithmParameter"))
		{	*type = SOAP_TYPE_soap_AlgorithmParameter;
			return soap_in_soap_AlgorithmParameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{	if (soap->mode & SOAP_XML_STRICT)
		return SOAP_TAG_MISMATCH;
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if ((soap->mode & SOAP_IO_LENGTH) ? pp->mark1 == 2 : pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__double:
		return soap_out_xsd__double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_om__ping:
		return soap_out_om__ping(soap, tag, id, (const struct om__ping *)ptr, "om:ping");
	case SOAP_TYPE_om__pingResponse:
		return soap_out_om__pingResponse(soap, tag, id, (const struct om__pingResponse *)ptr, "om:pingResponse");
	case SOAP_TYPE_om__getDistributionMap:
		return soap_out_om__getDistributionMap(soap, tag, id, (const struct om__getDistributionMap *)ptr, "om:getDistributionMap");
	case SOAP_TYPE_om__getDistributionMapResponse:
		return soap_out_om__getDistributionMapResponse(soap, tag, id, (const struct om__getDistributionMapResponse *)ptr, "om:getDistributionMapResponse");
	case SOAP_TYPE_om__createModel:
		return soap_out_om__createModel(soap, tag, id, (const struct om__createModel *)ptr, "om:createModel");
	case SOAP_TYPE_om__createModelResponse:
		return soap_out_om__createModelResponse(soap, tag, id, (const struct om__createModelResponse *)ptr, "om:createModelResponse");
	case SOAP_TYPE_om__Output:
		return soap_out_om__Output(soap, tag, id, (const struct soap_Output *)ptr, "om:Output");
	case SOAP_TYPE_soap_Output:
		return soap_out_soap_Output(soap, tag, id, (const struct soap_Output *)ptr, "soap-Output");
	case SOAP_TYPE_om__Algorithm:
		return soap_out_om__Algorithm(soap, tag, id, (const struct soap_Algorithm *)ptr, "om:Algorithm");
	case SOAP_TYPE_soap_Algorithm:
		return soap_out_soap_Algorithm(soap, tag, id, (const struct soap_Algorithm *)ptr, "soap-Algorithm");
	case SOAP_TYPE_om__Parameter:
		return soap_out_om__Parameter(soap, tag, id, (const struct soap_Parameter *)ptr, "om:Parameter");
	case SOAP_TYPE_soap_Parameter:
		return soap_out_soap_Parameter(soap, tag, id, (const struct soap_Parameter *)ptr, "soap-Parameter");
	case SOAP_TYPE_om__Mask:
		return soap_out_om__Mask(soap, tag, id, (const struct soap_Mask *)ptr, "om:Mask");
	case SOAP_TYPE_soap_Mask:
		return soap_out_soap_Mask(soap, tag, id, (const struct soap_Mask *)ptr, "soap-Mask");
	case SOAP_TYPE_om__Maps:
		return soap_out_om__Maps(soap, tag, id, (const struct soap_Maps *)ptr, "om:Maps");
	case SOAP_TYPE_soap_Maps:
		return soap_out_soap_Maps(soap, tag, id, (const struct soap_Maps *)ptr, "soap-Maps");
	case SOAP_TYPE_om__Map:
		return soap_out_om__Map(soap, tag, id, (const struct soap_Map *)ptr, "om:Map");
	case SOAP_TYPE_soap_Map:
		return soap_out_soap_Map(soap, tag, id, (const struct soap_Map *)ptr, "soap-Map");
	case SOAP_TYPE_om__Points:
		return soap_out_om__Points(soap, tag, id, (const struct soap_Points *)ptr, "om:Points");
	case SOAP_TYPE_soap_Points:
		return soap_out_soap_Points(soap, tag, id, (const struct soap_Points *)ptr, "soap-Points");
	case SOAP_TYPE_om__AbsencePoints:
		return soap_out_om__AbsencePoints(soap, tag, id, (const struct soap_AbsencePoints *)ptr, "om:AbsencePoints");
	case SOAP_TYPE_soap_AbsencePoints:
		return soap_out_soap_AbsencePoints(soap, tag, id, (const struct soap_AbsencePoints *)ptr, "soap-AbsencePoints");
	case SOAP_TYPE_om__PresencePoints:
		return soap_out_om__PresencePoints(soap, tag, id, (const struct soap_PresencePoints *)ptr, "om:PresencePoints");
	case SOAP_TYPE_soap_PresencePoints:
		return soap_out_soap_PresencePoints(soap, tag, id, (const struct soap_PresencePoints *)ptr, "soap-PresencePoints");
	case SOAP_TYPE_om__Point:
		return soap_out_om__Point(soap, tag, id, (const struct soap_Point *)ptr, "om:Point");
	case SOAP_TYPE_soap_Point:
		return soap_out_soap_Point(soap, tag, id, (const struct soap_Point *)ptr, "soap-Point");
	case SOAP_TYPE_om__getAlgorithms:
		return soap_out_om__getAlgorithms(soap, tag, id, (const struct om__getAlgorithms *)ptr, "om:getAlgorithms");
	case SOAP_TYPE_om__getAlgorithmsResponse:
		return soap_out_om__getAlgorithmsResponse(soap, tag, id, (const struct om__getAlgorithmsResponse *)ptr, "om:getAlgorithmsResponse");
	case SOAP_TYPE_om__Algorithms:
		return soap_out_om__Algorithms(soap, tag, id, (const struct soap_Algorithms *)ptr, "om:Algorithms");
	case SOAP_TYPE_soap_Algorithms:
		return soap_out_soap_Algorithms(soap, tag, id, (const struct soap_Algorithms *)ptr, "soap-Algorithms");
	case SOAP_TYPE_om__AlgorithmMetadata:
		return soap_out_om__AlgorithmMetadata(soap, tag, id, (const struct soap_AlgorithmMetadata *)ptr, "om:AlgorithmMetadata");
	case SOAP_TYPE_soap_AlgorithmMetadata:
		return soap_out_soap_AlgorithmMetadata(soap, tag, id, (const struct soap_AlgorithmMetadata *)ptr, "soap-AlgorithmMetadata");
	case SOAP_TYPE_om__AlgorithmParameter:
		return soap_out_om__AlgorithmParameter(soap, tag, id, (const struct soap_AlgorithmParameter *)ptr, "om:AlgorithmParameter");
	case SOAP_TYPE_soap_AlgorithmParameter:
		return soap_out_soap_AlgorithmParameter(soap, tag, id, (const struct soap_AlgorithmParameter *)ptr, "soap-AlgorithmParameter");
	case SOAP_TYPE_PointerToxsd__int:
		return soap_out_PointerToxsd__int(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToxsd__string:
		return soap_out_PointerToxsd__string(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToom__Output:
		return soap_out_PointerToom__Output(soap, tag, id, (struct soap_Output *const*)ptr, "om:Output");
	case SOAP_TYPE_PointerToom__Algorithm:
		return soap_out_PointerToom__Algorithm(soap, tag, id, (struct soap_Algorithm *const*)ptr, "om:Algorithm");
	case SOAP_TYPE_PointerToom__Mask:
		return soap_out_PointerToom__Mask(soap, tag, id, (struct soap_Mask *const*)ptr, "om:Mask");
	case SOAP_TYPE_PointerToom__Maps:
		return soap_out_PointerToom__Maps(soap, tag, id, (struct soap_Maps *const*)ptr, "om:Maps");
	case SOAP_TYPE_PointerToom__Points:
		return soap_out_PointerToom__Points(soap, tag, id, (struct soap_Points *const*)ptr, "om:Points");
	case SOAP_TYPE_PointerToom__Parameter:
		return soap_out_PointerToom__Parameter(soap, tag, id, (struct soap_Parameter *const*)ptr, "om:Parameter");
	case SOAP_TYPE_PointerToom__Map:
		return soap_out_PointerToom__Map(soap, tag, id, (struct soap_Map *const*)ptr, "om:Map");
	case SOAP_TYPE_PointerToom__AbsencePoints:
		return soap_out_PointerToom__AbsencePoints(soap, tag, id, (struct soap_AbsencePoints *const*)ptr, "om:AbsencePoints");
	case SOAP_TYPE_PointerToom__PresencePoints:
		return soap_out_PointerToom__PresencePoints(soap, tag, id, (struct soap_PresencePoints *const*)ptr, "om:PresencePoints");
	case SOAP_TYPE_PointerToom__Point:
		return soap_out_PointerToom__Point(soap, tag, id, (struct soap_Point *const*)ptr, "om:Point");
	case SOAP_TYPE_PointerToom__AlgorithmMetadata:
		return soap_out_PointerToom__AlgorithmMetadata(soap, tag, id, (struct soap_AlgorithmMetadata *const*)ptr, "om:AlgorithmMetadata");
	case SOAP_TYPE_PointerToom__AlgorithmParameter:
		return soap_out_PointerToom__AlgorithmParameter(soap, tag, id, (struct soap_AlgorithmParameter *const*)ptr, "om:AlgorithmParameter");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	switch (type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_mark(soap);
		break;
	case SOAP_TYPE_om__ping:
		soap_mark_om__ping(soap, (const struct om__ping *)ptr);
		break;
	case SOAP_TYPE_om__pingResponse:
		soap_mark_om__pingResponse(soap, (const struct om__pingResponse *)ptr);
		break;
	case SOAP_TYPE_om__getDistributionMap:
		soap_mark_om__getDistributionMap(soap, (const struct om__getDistributionMap *)ptr);
		break;
	case SOAP_TYPE_om__getDistributionMapResponse:
		soap_mark_om__getDistributionMapResponse(soap, (const struct om__getDistributionMapResponse *)ptr);
		break;
	case SOAP_TYPE_om__createModel:
		soap_mark_om__createModel(soap, (const struct om__createModel *)ptr);
		break;
	case SOAP_TYPE_om__createModelResponse:
		soap_mark_om__createModelResponse(soap, (const struct om__createModelResponse *)ptr);
		break;
	case SOAP_TYPE_om__Output:
		soap_mark_om__Output(soap, (const struct soap_Output *)ptr);
		break;
	case SOAP_TYPE_soap_Output:
		soap_mark_soap_Output(soap, (const struct soap_Output *)ptr);
		break;
	case SOAP_TYPE_om__Algorithm:
		soap_mark_om__Algorithm(soap, (const struct soap_Algorithm *)ptr);
		break;
	case SOAP_TYPE_soap_Algorithm:
		soap_mark_soap_Algorithm(soap, (const struct soap_Algorithm *)ptr);
		break;
	case SOAP_TYPE_om__Parameter:
		soap_mark_om__Parameter(soap, (const struct soap_Parameter *)ptr);
		break;
	case SOAP_TYPE_soap_Parameter:
		soap_mark_soap_Parameter(soap, (const struct soap_Parameter *)ptr);
		break;
	case SOAP_TYPE_om__Mask:
		soap_mark_om__Mask(soap, (const struct soap_Mask *)ptr);
		break;
	case SOAP_TYPE_soap_Mask:
		soap_mark_soap_Mask(soap, (const struct soap_Mask *)ptr);
		break;
	case SOAP_TYPE_om__Maps:
		soap_mark_om__Maps(soap, (const struct soap_Maps *)ptr);
		break;
	case SOAP_TYPE_soap_Maps:
		soap_mark_soap_Maps(soap, (const struct soap_Maps *)ptr);
		break;
	case SOAP_TYPE_om__Map:
		soap_mark_om__Map(soap, (const struct soap_Map *)ptr);
		break;
	case SOAP_TYPE_soap_Map:
		soap_mark_soap_Map(soap, (const struct soap_Map *)ptr);
		break;
	case SOAP_TYPE_om__Points:
		soap_mark_om__Points(soap, (const struct soap_Points *)ptr);
		break;
	case SOAP_TYPE_soap_Points:
		soap_mark_soap_Points(soap, (const struct soap_Points *)ptr);
		break;
	case SOAP_TYPE_om__AbsencePoints:
		soap_mark_om__AbsencePoints(soap, (const struct soap_AbsencePoints *)ptr);
		break;
	case SOAP_TYPE_soap_AbsencePoints:
		soap_mark_soap_AbsencePoints(soap, (const struct soap_AbsencePoints *)ptr);
		break;
	case SOAP_TYPE_om__PresencePoints:
		soap_mark_om__PresencePoints(soap, (const struct soap_PresencePoints *)ptr);
		break;
	case SOAP_TYPE_soap_PresencePoints:
		soap_mark_soap_PresencePoints(soap, (const struct soap_PresencePoints *)ptr);
		break;
	case SOAP_TYPE_om__Point:
		soap_mark_om__Point(soap, (const struct soap_Point *)ptr);
		break;
	case SOAP_TYPE_soap_Point:
		soap_mark_soap_Point(soap, (const struct soap_Point *)ptr);
		break;
	case SOAP_TYPE_om__getAlgorithms:
		soap_mark_om__getAlgorithms(soap, (const struct om__getAlgorithms *)ptr);
		break;
	case SOAP_TYPE_om__getAlgorithmsResponse:
		soap_mark_om__getAlgorithmsResponse(soap, (const struct om__getAlgorithmsResponse *)ptr);
		break;
	case SOAP_TYPE_om__Algorithms:
		soap_mark_om__Algorithms(soap, (const struct soap_Algorithms *)ptr);
		break;
	case SOAP_TYPE_soap_Algorithms:
		soap_mark_soap_Algorithms(soap, (const struct soap_Algorithms *)ptr);
		break;
	case SOAP_TYPE_om__AlgorithmMetadata:
		soap_mark_om__AlgorithmMetadata(soap, (const struct soap_AlgorithmMetadata *)ptr);
		break;
	case SOAP_TYPE_soap_AlgorithmMetadata:
		soap_mark_soap_AlgorithmMetadata(soap, (const struct soap_AlgorithmMetadata *)ptr);
		break;
	case SOAP_TYPE_om__AlgorithmParameter:
		soap_mark_om__AlgorithmParameter(soap, (const struct soap_AlgorithmParameter *)ptr);
		break;
	case SOAP_TYPE_soap_AlgorithmParameter:
		soap_mark_soap_AlgorithmParameter(soap, (const struct soap_AlgorithmParameter *)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__int:
		soap_mark_PointerToxsd__int(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_mark_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__string:
		soap_mark_PointerToxsd__string(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Output:
		soap_mark_PointerToom__Output(soap, (struct soap_Output *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Algorithm:
		soap_mark_PointerToom__Algorithm(soap, (struct soap_Algorithm *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Mask:
		soap_mark_PointerToom__Mask(soap, (struct soap_Mask *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Maps:
		soap_mark_PointerToom__Maps(soap, (struct soap_Maps *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Points:
		soap_mark_PointerToom__Points(soap, (struct soap_Points *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Parameter:
		soap_mark_PointerToom__Parameter(soap, (struct soap_Parameter *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Map:
		soap_mark_PointerToom__Map(soap, (struct soap_Map *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__AbsencePoints:
		soap_mark_PointerToom__AbsencePoints(soap, (struct soap_AbsencePoints *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__PresencePoints:
		soap_mark_PointerToom__PresencePoints(soap, (struct soap_PresencePoints *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Point:
		soap_mark_PointerToom__Point(soap, (struct soap_Point *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__AlgorithmMetadata:
		soap_mark_PointerToom__AlgorithmMetadata(soap, (struct soap_AlgorithmMetadata *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__AlgorithmParameter:
		soap_mark_PointerToom__AlgorithmParameter(soap, (struct soap_AlgorithmParameter *const*)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_mark_string(soap, (char**)&ptr);
		break;
	}
}

#ifndef WITH_LEANER
SOAP_FMAC3 int SOAP_FMAC4 soap_getattachments(struct soap *soap)
{
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	while (soap->dime_flags & SOAP_DIME_CF)
	{	if (soap_getdimehdr(soap))
			return soap->error;
		if (soap_move(soap, soap->dime_size))
			return soap->error = SOAP_EOF;
	}
	if (soap_move(soap, ((soap->dime_size+3)&(~3))-soap_tell(soap)))
		return soap->error = SOAP_EOF;
	for (;;)
	{	if (soap_getdime(soap) || !soap->dime_id)
			break;
		switch (soap_lookup_type(soap, soap->dime_id))
		{
		case SOAP_TYPE_xsd__base64Binary:
		{	xsd__base64Binary * a;
			a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), NULL, NULL);
			if (a)
			{	a->__ptr = (unsigned char*)soap->dime_ptr;
				a->__size = soap->dime_size;
				a->id = soap->dime_id;
				a->type = soap->dime_type;
				a->options = soap->dime_options;
			}
			break;
		}
		case SOAP_TYPE_xsd__string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_xsd__string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE__QName:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE__QName, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		case SOAP_TYPE_string:
		{	char ** a;
			a = (char **)soap_id_enter(soap, soap->dime_id, NULL, SOAP_TYPE_string, sizeof(char *), 0);
			if (a)
				*a = soap->dime_ptr;
			break;
		}
		default:
			soap->error = SOAP_DIME_ERROR;
		}
		if (soap->error)
			break;
	}
	if (soap->error == SOAP_EOD)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putattachments(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	for (i = 0; i < SOAP_PTRHASH; i++)
		for (pp = soap->pht[i]; pp; pp = pp->next)
			if (pp->mark2 == 3)
				switch (pp->type)
				{
				case SOAP_TYPE_xsd__base64Binary:
					soap_putdime(soap, pp->id, ((xsd__base64Binary *)pp->ptr)->id, ((xsd__base64Binary *)pp->ptr)->type, ((xsd__base64Binary *)pp->ptr)->options, ((xsd__base64Binary *)pp->ptr)->__ptr, ((xsd__base64Binary *)pp->ptr)->__size);
					break;
				}
		
	return SOAP_OK;
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_om__getDistributionMapResponse:
		return (void*)soap_instantiate_om__getDistributionMapResponse(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_om__getDistributionMapResponse:
		if (p->size < 0)
			delete (struct om__getDistributionMapResponse*)p->ptr;
		else
			delete[] (struct om__getDistributionMapResponse*)p->ptr;
		break;
	}
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	struct soap_ilist *ip;
	DBGLOG(TEST,SOAP_MESSAGE(fdebug, "Class id enter id='%s' t=%d loc=%p type='%s' arrayType='%s'\n", id, t, p, type?type:"", arrayType?arrayType:""));
	soap->alloced = 0;
	if (!*id)
	{	if (!p)
			return soap_instantiate(soap, t, type, arrayType, NULL);
		else
			return p;
	}
	ip = soap_lookup(soap, id);
	if (!ip)
	{	ip = soap_enter(soap, id);
		ip->type = t;
		ip->link = NULL;
		ip->copy = NULL;
		ip->clist = NULL;
		if (!p)
			p = soap_instantiate(soap, t, type, arrayType, &n);
		ip->ptr = p;
		ip->size = n;
		ip->level = 0;
	}
	else if (ip->ptr)
	{	if (p)
		{	soap->error = SOAP_MULTI_ID;
			return NULL;
		}
	}
	else
	{	if (!p)
			p = soap_instantiate(soap, t, type, arrayType, &n);
		ip->ptr = p;
		ip->size = n;
		ip->level = 0;
		if (!soap->blist)
			soap_resolve_ptr(ip);
	}
	return ip->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_byte(struct soap *soap, char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_byte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_byte);
	soap_out_byte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_xsd__int
	*a = SOAP_DEFAULT_xsd__int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__int);
	soap_out_xsd__int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_int(struct soap *soap, int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_int);
	soap_out_int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__double(struct soap *soap, double *a)
{
#ifdef SOAP_DEFAULT_xsd__double
	*a = SOAP_DEFAULT_xsd__double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__double(struct soap *soap, double const*a)
{
	soap_reference(soap, a, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap *soap, double *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__double);
	soap_out_xsd__double(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_double(struct soap *soap, double const*a)
{
	soap_reference(soap, a, SOAP_TYPE_double);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, double *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_double);
	soap_out_double(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedByte(struct soap *soap, unsigned char const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, unsigned char *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedByte);
	soap_out_unsignedByte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedInt(struct soap *soap, unsigned int const*a)
{
	soap_reference(soap, a, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, unsigned int *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_unsignedInt);
	soap_out_unsignedInt(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	this->soap_mark(soap);
}

void xsd__base64Binary::soap_mark(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, this->__size, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	int i = soap_embed_array(soap, (void*)this, (struct soap_array*)&this->__ptr, this->__size, tag, SOAP_TYPE_xsd__base64Binary);
	this->soap_out(soap, tag, i, type);
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
	int i;
	struct soap_plist *pp;
	int n = a->__size;
	i = soap_array_pointer_lookup(soap, a, (struct soap_array*)&a->__ptr, n, SOAP_TYPE_xsd__base64Binary, &pp);
	if (!a->__ptr)
	{	soap_element_null(soap, tag, i, type);
		return SOAP_OK;
	}
	if (a->id || a->type)
	{	if (i && !a->id)
		{	sprintf(soap->tmpbuf, soap->dime_id_format, i);
			soap_element_href(soap, tag, id, soap->tmpbuf);
			soap_set_attached(soap, pp, soap->tmpbuf, a->type, a->options, n);
		}
		else
		{	soap_element_href(soap, tag, id, a->id);
			if (i)
				soap_set_attached(soap, pp, a->id, a->type, a->options, n);
		}
		return SOAP_OK;
	}
	if (id <= 0 && i)
	{	if (soap_is_embedded(soap, pp))
		{	soap_element_ref(soap, tag, 0, i);
			return SOAP_OK;
		}
		if (soap_is_single(soap, pp))
			i = 0;
	}
	else if (id > 0)
		i = id;
	soap_element_begin_out(soap, tag, i, "xsd:base64Binary");
	if (i)
		soap_set_embedded(soap, pp);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, "SOAP-ENC:base64") && soap_match_tag(soap, soap->type, "SOAP-ENC:base64Binary"))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if ((a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType)))
			a->soap_default(soap);
			if (soap->body && soap_element_end_in(soap, tag))
				return NULL;
	}
	else if (!*soap->href)
	{	if (!(a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType)))
			return NULL;
		if (soap->alloced)
			a->soap_default(soap);
		if (soap->body)
		{
		a->__ptr = soap_getbase64(soap, (size_t*)&a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void**)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType), SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary));
		if (soap->alloced)
			a->soap_default(soap);
		if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	soap->alloced = 1;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	return (xsd__base64Binary*)cp->ptr;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Fault))
		soap_mark_SOAP_ENV__Fault(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	soap_embedded(soap, &a->faultcode, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->faultcode);
	soap_embedded(soap, &a->faultstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultstring);
	soap_embedded(soap, &a->faultactor, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultactor);
	soap_embedded(soap, &a->detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_mark_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_embedded(soap, &a->SOAP_ENV__Code, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_mark_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_embedded(soap, &a->SOAP_ENV__Reason, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Reason);
	soap_embedded(soap, &a->SOAP_ENV__Detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_mark_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	soap_default_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_default_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_default_string(soap, &a->SOAP_ENV__Reason);
	soap_default_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Fault);
	soap_out_SOAP_ENV__Fault(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_string(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode = 0;
					continue;
				}
			if (soap_flag_faultstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultstring", &a->faultstring, ""))
				{	soap_flag_faultstring = 0;
					continue;
				}
			if (soap_flag_faultactor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultactor", &a->faultactor, ""))
				{	soap_flag_faultactor = 0;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0), SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault));
		if (soap->alloced)
			soap_default_SOAP_ENV__Fault(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_mark_SOAP_ENV__Detail(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	soap_markelement(soap, a->value, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	a->__type = 0;
	a->value = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Detail);
	soap_out_SOAP_ENV__Detail(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->value, "value", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_value = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Detail(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_value && soap->error == SOAP_TAG_MISMATCH)
				if ((a->value = soap_getelement(soap, &a->__type)))
				{	soap_flag_value = 0;
					continue;
				}
			if (soap_flag___any && soap->error == SOAP_TAG_MISMATCH)
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0), SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail));
		if (soap->alloced)
			soap_default_SOAP_ENV__Detail(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	soap_embedded(soap, &a->SOAP_ENV__Value, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->SOAP_ENV__Value);
	soap_embedded(soap, &a->SOAP_ENV__Node, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Node);
	soap_embedded(soap, &a->SOAP_ENV__Role, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Code);
	soap_out_SOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, ""))
				{	soap_flag_SOAP_ENV__Node = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, ""))
				{	soap_flag_SOAP_ENV__Role = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code));
		if (soap->alloced)
			soap_default_SOAP_ENV__Code(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__ping(struct soap *soap, struct om__ping const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__ping))
		soap_mark_om__ping(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__ping(struct soap *soap, const struct om__ping *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__ping(struct soap *soap, struct om__ping *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__ping(struct soap *soap, struct om__ping *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__ping);
	soap_out_om__ping(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ping(struct soap *soap, const char *tag, int id, const struct om__ping *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__ping), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__ping * SOAP_FMAC4 soap_get_om__ping(struct soap *soap, struct om__ping *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__ping(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__ping * SOAP_FMAC4 soap_in_om__ping(struct soap *soap, const char *tag, struct om__ping *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct om__ping *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__ping, sizeof(struct om__ping), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__ping(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct om__ping *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__ping, sizeof(struct om__ping), 0), SOAP_TYPE_om__ping, sizeof(struct om__ping));
		if (soap->alloced)
			soap_default_om__ping(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__pingResponse(struct soap *soap, struct om__pingResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__pingResponse))
		soap_mark_om__pingResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__pingResponse(struct soap *soap, const struct om__pingResponse *a)
{
	soap_embedded(soap, &a->status, SOAP_TYPE_PointerToxsd__int);
	soap_mark_PointerToxsd__int(soap, &a->status);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__pingResponse(struct soap *soap, struct om__pingResponse *a)
{
	soap_default_PointerToxsd__int(soap, &a->status);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__pingResponse(struct soap *soap, struct om__pingResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__pingResponse);
	soap_out_om__pingResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__pingResponse(struct soap *soap, const char *tag, int id, const struct om__pingResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__pingResponse), type);
	if (a->status)
		soap_element_result(soap, "status");
	soap_out_PointerToxsd__int(soap, "status", -1, &a->status, "xsd:int");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__pingResponse * SOAP_FMAC4 soap_get_om__pingResponse(struct soap *soap, struct om__pingResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__pingResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__pingResponse * SOAP_FMAC4 soap_in_om__pingResponse(struct soap *soap, const char *tag, struct om__pingResponse *a, const char *type)
{
	short soap_flag_status = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct om__pingResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__pingResponse, sizeof(struct om__pingResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__pingResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__int(soap, "status", &a->status, "xsd:int"))
				{	soap_flag_status = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct om__pingResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__pingResponse, sizeof(struct om__pingResponse), 0), SOAP_TYPE_om__pingResponse, sizeof(struct om__pingResponse));
		if (soap->alloced)
			soap_default_om__pingResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__getDistributionMap(struct soap *soap, struct om__getDistributionMap const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__getDistributionMap))
		soap_mark_om__getDistributionMap(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__getDistributionMap(struct soap *soap, const struct om__getDistributionMap *a)
{
	soap_embedded(soap, &a->ticket, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__getDistributionMap(struct soap *soap, struct om__getDistributionMap *a)
{
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__getDistributionMap(struct soap *soap, struct om__getDistributionMap *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__getDistributionMap);
	soap_out_om__getDistributionMap(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__getDistributionMap(struct soap *soap, const char *tag, int id, const struct om__getDistributionMap *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__getDistributionMap), type);
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__getDistributionMap * SOAP_FMAC4 soap_get_om__getDistributionMap(struct soap *soap, struct om__getDistributionMap *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__getDistributionMap(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__getDistributionMap * SOAP_FMAC4 soap_in_om__getDistributionMap(struct soap *soap, const char *tag, struct om__getDistributionMap *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct om__getDistributionMap *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getDistributionMap, sizeof(struct om__getDistributionMap), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__getDistributionMap(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ticket))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct om__getDistributionMap *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getDistributionMap, sizeof(struct om__getDistributionMap), 0), SOAP_TYPE_om__getDistributionMap, sizeof(struct om__getDistributionMap));
		if (soap->alloced)
			soap_default_om__getDistributionMap(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__getDistributionMapResponse(struct soap *soap, struct om__getDistributionMapResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__getDistributionMapResponse))
		soap_mark_om__getDistributionMapResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__getDistributionMapResponse(struct soap *soap, const struct om__getDistributionMapResponse *a)
{
	soap_embedded(soap, &a->file, SOAP_TYPE_xsd__base64Binary);
	a->file.soap_mark(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__getDistributionMapResponse(struct soap *soap, struct om__getDistributionMapResponse *a)
{
	a->file.xsd__base64Binary::soap_default(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__getDistributionMapResponse(struct soap *soap, struct om__getDistributionMapResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__getDistributionMapResponse);
	soap_out_om__getDistributionMapResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__getDistributionMapResponse(struct soap *soap, const char *tag, int id, const struct om__getDistributionMapResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__getDistributionMapResponse), type);
	soap_element_result(soap, "file");
	a->file.soap_out(soap, "file", -1, "xsd:base64Binary");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__getDistributionMapResponse * SOAP_FMAC4 soap_get_om__getDistributionMapResponse(struct soap *soap, struct om__getDistributionMapResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__getDistributionMapResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__getDistributionMapResponse * SOAP_FMAC4 soap_in_om__getDistributionMapResponse(struct soap *soap, const char *tag, struct om__getDistributionMapResponse *a, const char *type)
{
	short soap_flag_file = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct om__getDistributionMapResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_om__getDistributionMapResponse, sizeof(struct om__getDistributionMapResponse), soap->type, soap->arrayType);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__getDistributionMapResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_file && soap->error == SOAP_TAG_MISMATCH)
				if (a->file.soap_in(soap, "file", "xsd:base64Binary"))
				{	soap_flag_file = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_file))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct om__getDistributionMapResponse *)soap_id_forward(soap, soap->href, (void**)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_om__getDistributionMapResponse, sizeof(struct om__getDistributionMapResponse), soap->type, soap->arrayType), SOAP_TYPE_om__getDistributionMapResponse, sizeof(struct om__getDistributionMapResponse));
		if (soap->alloced)
			soap_default_om__getDistributionMapResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct om__getDistributionMapResponse * SOAP_FMAC6 soap_new_om__getDistributionMapResponse(struct soap *soap, int n)
{	return soap_instantiate_om__getDistributionMapResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_om__getDistributionMapResponse(struct soap *soap, struct om__getDistributionMapResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 struct om__getDistributionMapResponse * SOAP_FMAC6 soap_instantiate_om__getDistributionMapResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_om__getDistributionMapResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_om__getDistributionMapResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	soap->alloced = 1;
	if (n < 0)
	{	cp->ptr = (void*)new struct om__getDistributionMapResponse;
		if (size)
			*size = sizeof(struct om__getDistributionMapResponse);
	}
	else
	{	cp->ptr = (void*)new struct om__getDistributionMapResponse[n];
		if (size)
			*size = n * sizeof(struct om__getDistributionMapResponse);
	}
	return (struct om__getDistributionMapResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__createModel(struct soap *soap, struct om__createModel const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__createModel))
		soap_mark_om__createModel(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__createModel(struct soap *soap, const struct om__createModel *a)
{
	soap_embedded(soap, &a->points, SOAP_TYPE_PointerToom__Points);
	soap_mark_PointerToom__Points(soap, &a->points);
	soap_embedded(soap, &a->maps, SOAP_TYPE_PointerToom__Maps);
	soap_mark_PointerToom__Maps(soap, &a->maps);
	soap_embedded(soap, &a->mask, SOAP_TYPE_PointerToom__Mask);
	soap_mark_PointerToom__Mask(soap, &a->mask);
	soap_embedded(soap, &a->algorithm, SOAP_TYPE_PointerToom__Algorithm);
	soap_mark_PointerToom__Algorithm(soap, &a->algorithm);
	soap_embedded(soap, &a->output, SOAP_TYPE_PointerToom__Output);
	soap_mark_PointerToom__Output(soap, &a->output);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__createModel(struct soap *soap, struct om__createModel *a)
{
	soap_default_PointerToom__Points(soap, &a->points);
	soap_default_PointerToom__Maps(soap, &a->maps);
	soap_default_PointerToom__Mask(soap, &a->mask);
	soap_default_PointerToom__Algorithm(soap, &a->algorithm);
	soap_default_PointerToom__Output(soap, &a->output);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__createModel(struct soap *soap, struct om__createModel *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__createModel);
	soap_out_om__createModel(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__createModel(struct soap *soap, const char *tag, int id, const struct om__createModel *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__createModel), type);
	soap_out_PointerToom__Points(soap, "points", -1, &a->points, "om:Points");
	soap_out_PointerToom__Maps(soap, "maps", -1, &a->maps, "om:Maps");
	soap_out_PointerToom__Mask(soap, "mask", -1, &a->mask, "om:Mask");
	soap_out_PointerToom__Algorithm(soap, "algorithm", -1, &a->algorithm, "om:Algorithm");
	soap_out_PointerToom__Output(soap, "output", -1, &a->output, "om:Output");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__createModel * SOAP_FMAC4 soap_get_om__createModel(struct soap *soap, struct om__createModel *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__createModel(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__createModel * SOAP_FMAC4 soap_in_om__createModel(struct soap *soap, const char *tag, struct om__createModel *a, const char *type)
{
	short soap_flag_points = 1, soap_flag_maps = 1, soap_flag_mask = 1, soap_flag_algorithm = 1, soap_flag_output = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct om__createModel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__createModel, sizeof(struct om__createModel), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__createModel(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_points && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Points(soap, "points", &a->points, "om:Points"))
				{	soap_flag_points = 0;
					continue;
				}
			if (soap_flag_maps && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Maps(soap, "maps", &a->maps, "om:Maps"))
				{	soap_flag_maps = 0;
					continue;
				}
			if (soap_flag_mask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Mask(soap, "mask", &a->mask, "om:Mask"))
				{	soap_flag_mask = 0;
					continue;
				}
			if (soap_flag_algorithm && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Algorithm(soap, "algorithm", &a->algorithm, "om:Algorithm"))
				{	soap_flag_algorithm = 0;
					continue;
				}
			if (soap_flag_output && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Output(soap, "output", &a->output, "om:Output"))
				{	soap_flag_output = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_points || soap_flag_maps || soap_flag_mask || soap_flag_algorithm || soap_flag_output))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct om__createModel *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__createModel, sizeof(struct om__createModel), 0), SOAP_TYPE_om__createModel, sizeof(struct om__createModel));
		if (soap->alloced)
			soap_default_om__createModel(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__createModelResponse(struct soap *soap, struct om__createModelResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__createModelResponse))
		soap_mark_om__createModelResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__createModelResponse(struct soap *soap, const struct om__createModelResponse *a)
{
	soap_embedded(soap, &a->ticket, SOAP_TYPE_PointerToxsd__string);
	soap_mark_PointerToxsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__createModelResponse(struct soap *soap, struct om__createModelResponse *a)
{
	soap_default_PointerToxsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__createModelResponse(struct soap *soap, struct om__createModelResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__createModelResponse);
	soap_out_om__createModelResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__createModelResponse(struct soap *soap, const char *tag, int id, const struct om__createModelResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__createModelResponse), type);
	if (a->ticket)
		soap_element_result(soap, "ticket");
	soap_out_PointerToxsd__string(soap, "ticket", -1, &a->ticket, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__createModelResponse * SOAP_FMAC4 soap_get_om__createModelResponse(struct soap *soap, struct om__createModelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__createModelResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__createModelResponse * SOAP_FMAC4 soap_in_om__createModelResponse(struct soap *soap, const char *tag, struct om__createModelResponse *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct om__createModelResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__createModelResponse, sizeof(struct om__createModelResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__createModelResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ticket))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct om__createModelResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__createModelResponse, sizeof(struct om__createModelResponse), 0), SOAP_TYPE_om__createModelResponse, sizeof(struct om__createModelResponse));
		if (soap->alloced)
			soap_default_om__createModelResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Output(struct soap *soap, struct soap_Output const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Output))
		soap_mark_om__Output(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Output(struct soap *soap, const struct soap_Output *a)
{
	soap_embedded(soap, &a->header, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->header);
	soap_embedded(soap, &a->scale, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->format, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->format);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Output(struct soap *soap, struct soap_Output *a)
{
	soap_default_xsd__string(soap, &a->header);
	soap_default_xsd__int(soap, &a->scale);
	soap_default_xsd__string(soap, &a->format);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Output(struct soap *soap, struct soap_Output *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Output);
	soap_out_om__Output(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Output(struct soap *soap, const char *tag, int id, const struct soap_Output *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Output), type);
	soap_out_xsd__string(soap, "header", -1, &a->header, "xsd:string");
	soap_out_xsd__int(soap, "scale", -1, &a->scale, "xsd:int");
	soap_out_xsd__string(soap, "format", -1, &a->format, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Output * SOAP_FMAC4 soap_get_om__Output(struct soap *soap, struct soap_Output *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Output(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Output * SOAP_FMAC4 soap_in_om__Output(struct soap *soap, const char *tag, struct soap_Output *a, const char *type)
{
	short soap_flag_header = 1, soap_flag_scale = 1, soap_flag_format = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Output *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Output, sizeof(struct soap_Output), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Output(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_header && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "header", &a->header, "xsd:string"))
				{	soap_flag_header = 0;
					continue;
				}
			if (soap_flag_scale && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "scale", &a->scale, "xsd:int"))
				{	soap_flag_scale = 0;
					continue;
				}
			if (soap_flag_format && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "format", &a->format, "xsd:string"))
				{	soap_flag_format = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_scale))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct soap_Output *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Output, sizeof(struct soap_Output), 0), SOAP_TYPE_om__Output, sizeof(struct soap_Output));
		if (soap->alloced)
			soap_default_om__Output(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Output(struct soap *soap, struct soap_Output const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Output))
		soap_mark_soap_Output(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Output(struct soap *soap, const struct soap_Output *a)
{
	soap_embedded(soap, &a->header, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->header);
	soap_embedded(soap, &a->scale, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->format, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->format);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Output(struct soap *soap, struct soap_Output *a)
{
	soap_default_xsd__string(soap, &a->header);
	soap_default_xsd__int(soap, &a->scale);
	soap_default_xsd__string(soap, &a->format);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Output(struct soap *soap, struct soap_Output *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Output);
	soap_out_soap_Output(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Output(struct soap *soap, const char *tag, int id, const struct soap_Output *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Output), type);
	soap_out_xsd__string(soap, "header", -1, &a->header, "xsd:string");
	soap_out_xsd__int(soap, "scale", -1, &a->scale, "xsd:int");
	soap_out_xsd__string(soap, "format", -1, &a->format, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Output * SOAP_FMAC4 soap_get_soap_Output(struct soap *soap, struct soap_Output *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Output(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Output * SOAP_FMAC4 soap_in_soap_Output(struct soap *soap, const char *tag, struct soap_Output *a, const char *type)
{
	short soap_flag_header = 1, soap_flag_scale = 1, soap_flag_format = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Output *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Output, sizeof(struct soap_Output), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Output(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_header && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "header", &a->header, "xsd:string"))
				{	soap_flag_header = 0;
					continue;
				}
			if (soap_flag_scale && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "scale", &a->scale, "xsd:int"))
				{	soap_flag_scale = 0;
					continue;
				}
			if (soap_flag_format && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "format", &a->format, "xsd:string"))
				{	soap_flag_format = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_scale))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct soap_Output *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Output, sizeof(struct soap_Output), 0), SOAP_TYPE_soap_Output, sizeof(struct soap_Output));
		if (soap->alloced)
			soap_default_soap_Output(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Algorithm(struct soap *soap, struct soap_Algorithm const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Algorithm))
		soap_mark_om__Algorithm(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Algorithm(struct soap *soap, const struct soap_Algorithm *a)
{
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrparameter + i, SOAP_TYPE_om__Parameter);
			soap_mark_om__Parameter(soap, a->__ptrparameter + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Algorithm(struct soap *soap, struct soap_Algorithm *a)
{
	soap_default_xsd__string(soap, &a->om_id);
	a->__size = 0;
	a->__ptrparameter = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Algorithm(struct soap *soap, struct soap_Algorithm *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Algorithm);
	soap_out_om__Algorithm(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Algorithm(struct soap *soap, const char *tag, int id, const struct soap_Algorithm *a, const char *type)
{
	if (a->om_id)
		soap_set_attr(soap, "om-id", a->om_id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Algorithm), type);
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Parameter(soap, "parameter", -1, a->__ptrparameter + i, "om:Parameter");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Algorithm * SOAP_FMAC4 soap_get_om__Algorithm(struct soap *soap, struct soap_Algorithm *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Algorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Algorithm * SOAP_FMAC4 soap_in_om__Algorithm(struct soap *soap, const char *tag, struct soap_Algorithm *a, const char *type)
{
	short soap_flag___ptrparameter = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Algorithm *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Algorithm, sizeof(struct soap_Algorithm), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Algorithm(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "om-id"), &a->om_id))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrparameter && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Parameter *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_Parameter *)soap_push_block(soap, sizeof(struct soap_Parameter));
					soap_default_om__Parameter(soap, p);
					if (!soap_in_om__Parameter(soap, "parameter", p, "om:Parameter"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrparameter = (struct soap_Parameter *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrparameter);
				soap_flag___ptrparameter = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Algorithm *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Algorithm, sizeof(struct soap_Algorithm), 0), SOAP_TYPE_om__Algorithm, sizeof(struct soap_Algorithm));
		if (soap->alloced)
			soap_default_om__Algorithm(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Algorithm(struct soap *soap, struct soap_Algorithm const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Algorithm))
		soap_mark_soap_Algorithm(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Algorithm(struct soap *soap, const struct soap_Algorithm *a)
{
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrparameter + i, SOAP_TYPE_om__Parameter);
			soap_mark_om__Parameter(soap, a->__ptrparameter + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Algorithm(struct soap *soap, struct soap_Algorithm *a)
{
	soap_default_xsd__string(soap, &a->om_id);
	a->__size = 0;
	a->__ptrparameter = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Algorithm(struct soap *soap, struct soap_Algorithm *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Algorithm);
	soap_out_soap_Algorithm(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Algorithm(struct soap *soap, const char *tag, int id, const struct soap_Algorithm *a, const char *type)
{
	if (a->om_id)
		soap_set_attr(soap, "om-id", a->om_id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Algorithm), type);
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Parameter(soap, "parameter", -1, a->__ptrparameter + i, "om:Parameter");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Algorithm * SOAP_FMAC4 soap_get_soap_Algorithm(struct soap *soap, struct soap_Algorithm *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Algorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Algorithm * SOAP_FMAC4 soap_in_soap_Algorithm(struct soap *soap, const char *tag, struct soap_Algorithm *a, const char *type)
{
	short soap_flag___ptrparameter = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Algorithm *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Algorithm, sizeof(struct soap_Algorithm), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Algorithm(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "om-id"), &a->om_id))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrparameter && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Parameter *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_Parameter *)soap_push_block(soap, sizeof(struct soap_Parameter));
					soap_default_om__Parameter(soap, p);
					if (!soap_in_om__Parameter(soap, "parameter", p, "om:Parameter"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrparameter = (struct soap_Parameter *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrparameter);
				soap_flag___ptrparameter = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Algorithm *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Algorithm, sizeof(struct soap_Algorithm), 0), SOAP_TYPE_soap_Algorithm, sizeof(struct soap_Algorithm));
		if (soap->alloced)
			soap_default_soap_Algorithm(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Parameter(struct soap *soap, struct soap_Parameter const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Parameter))
		soap_mark_om__Parameter(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Parameter(struct soap *soap, const struct soap_Parameter *a)
{
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Parameter(struct soap *soap, struct soap_Parameter *a)
{
	soap_default_xsd__string(soap, &a->om_id);
	soap_default_xsd__string(soap, &a->value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Parameter(struct soap *soap, struct soap_Parameter *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Parameter);
	soap_out_om__Parameter(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Parameter(struct soap *soap, const char *tag, int id, const struct soap_Parameter *a, const char *type)
{
	if (a->om_id)
		soap_set_attr(soap, "om-id", a->om_id);
	if (a->value)
		soap_set_attr(soap, "value", a->value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Parameter), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Parameter * SOAP_FMAC4 soap_get_om__Parameter(struct soap *soap, struct soap_Parameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Parameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Parameter * SOAP_FMAC4 soap_in_om__Parameter(struct soap *soap, const char *tag, struct soap_Parameter *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Parameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Parameter, sizeof(struct soap_Parameter), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Parameter(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "om-id"), &a->om_id))
			return NULL;
		if (soap_s2string(soap, soap_attr_value(soap, "value"), &a->value))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Parameter *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Parameter, sizeof(struct soap_Parameter), 0), SOAP_TYPE_om__Parameter, sizeof(struct soap_Parameter));
		if (soap->alloced)
			soap_default_om__Parameter(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Parameter(struct soap *soap, struct soap_Parameter const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Parameter))
		soap_mark_soap_Parameter(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Parameter(struct soap *soap, const struct soap_Parameter *a)
{
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Parameter(struct soap *soap, struct soap_Parameter *a)
{
	soap_default_xsd__string(soap, &a->om_id);
	soap_default_xsd__string(soap, &a->value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Parameter(struct soap *soap, struct soap_Parameter *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Parameter);
	soap_out_soap_Parameter(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Parameter(struct soap *soap, const char *tag, int id, const struct soap_Parameter *a, const char *type)
{
	if (a->om_id)
		soap_set_attr(soap, "om-id", a->om_id);
	if (a->value)
		soap_set_attr(soap, "value", a->value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Parameter), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Parameter * SOAP_FMAC4 soap_get_soap_Parameter(struct soap *soap, struct soap_Parameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Parameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Parameter * SOAP_FMAC4 soap_in_soap_Parameter(struct soap *soap, const char *tag, struct soap_Parameter *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Parameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Parameter, sizeof(struct soap_Parameter), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Parameter(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "om-id"), &a->om_id))
			return NULL;
		if (soap_s2string(soap, soap_attr_value(soap, "value"), &a->value))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Parameter *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Parameter, sizeof(struct soap_Parameter), 0), SOAP_TYPE_soap_Parameter, sizeof(struct soap_Parameter));
		if (soap->alloced)
			soap_default_soap_Parameter(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Mask(struct soap *soap, struct soap_Mask const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Mask))
		soap_mark_om__Mask(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Mask(struct soap *soap, const struct soap_Mask *a)
{
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Mask(struct soap *soap, struct soap_Mask *a)
{
	soap_default_xsd__string(soap, &a->location);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Mask(struct soap *soap, struct soap_Mask *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Mask);
	soap_out_om__Mask(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Mask(struct soap *soap, const char *tag, int id, const struct soap_Mask *a, const char *type)
{
	if (a->location)
		soap_set_attr(soap, "location", a->location);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Mask), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Mask * SOAP_FMAC4 soap_get_om__Mask(struct soap *soap, struct soap_Mask *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Mask(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Mask * SOAP_FMAC4 soap_in_om__Mask(struct soap *soap, const char *tag, struct soap_Mask *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Mask *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Mask, sizeof(struct soap_Mask), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Mask(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "location"), &a->location))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Mask *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Mask, sizeof(struct soap_Mask), 0), SOAP_TYPE_om__Mask, sizeof(struct soap_Mask));
		if (soap->alloced)
			soap_default_om__Mask(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Mask(struct soap *soap, struct soap_Mask const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Mask))
		soap_mark_soap_Mask(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Mask(struct soap *soap, const struct soap_Mask *a)
{
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Mask(struct soap *soap, struct soap_Mask *a)
{
	soap_default_xsd__string(soap, &a->location);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Mask(struct soap *soap, struct soap_Mask *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Mask);
	soap_out_soap_Mask(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Mask(struct soap *soap, const char *tag, int id, const struct soap_Mask *a, const char *type)
{
	if (a->location)
		soap_set_attr(soap, "location", a->location);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Mask), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Mask * SOAP_FMAC4 soap_get_soap_Mask(struct soap *soap, struct soap_Mask *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Mask(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Mask * SOAP_FMAC4 soap_in_soap_Mask(struct soap *soap, const char *tag, struct soap_Mask *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Mask *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Mask, sizeof(struct soap_Mask), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Mask(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "location"), &a->location))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Mask *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Mask, sizeof(struct soap_Mask), 0), SOAP_TYPE_soap_Mask, sizeof(struct soap_Mask));
		if (soap->alloced)
			soap_default_soap_Mask(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Maps(struct soap *soap, struct soap_Maps const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Maps))
		soap_mark_om__Maps(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Maps(struct soap *soap, const struct soap_Maps *a)
{
	if (a->__ptrmap)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrmap + i, SOAP_TYPE_om__Map);
			soap_mark_om__Map(soap, a->__ptrmap + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Maps(struct soap *soap, struct soap_Maps *a)
{
	a->__size = 0;
	a->__ptrmap = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Maps(struct soap *soap, struct soap_Maps *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Maps);
	soap_out_om__Maps(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Maps(struct soap *soap, const char *tag, int id, const struct soap_Maps *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Maps), type);
	if (a->__ptrmap)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Map(soap, "map", -1, a->__ptrmap + i, "om:Map");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Maps * SOAP_FMAC4 soap_get_om__Maps(struct soap *soap, struct soap_Maps *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Maps(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Maps * SOAP_FMAC4 soap_in_om__Maps(struct soap *soap, const char *tag, struct soap_Maps *a, const char *type)
{
	short soap_flag___ptrmap = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Maps *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Maps, sizeof(struct soap_Maps), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Maps(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrmap && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Map *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_Map *)soap_push_block(soap, sizeof(struct soap_Map));
					soap_default_om__Map(soap, p);
					if (!soap_in_om__Map(soap, "map", p, "om:Map"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrmap = (struct soap_Map *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrmap);
				soap_flag___ptrmap = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Maps *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Maps, sizeof(struct soap_Maps), 0), SOAP_TYPE_om__Maps, sizeof(struct soap_Maps));
		if (soap->alloced)
			soap_default_om__Maps(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Maps(struct soap *soap, struct soap_Maps const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Maps))
		soap_mark_soap_Maps(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Maps(struct soap *soap, const struct soap_Maps *a)
{
	if (a->__ptrmap)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrmap + i, SOAP_TYPE_om__Map);
			soap_mark_om__Map(soap, a->__ptrmap + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Maps(struct soap *soap, struct soap_Maps *a)
{
	a->__size = 0;
	a->__ptrmap = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Maps(struct soap *soap, struct soap_Maps *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Maps);
	soap_out_soap_Maps(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Maps(struct soap *soap, const char *tag, int id, const struct soap_Maps *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Maps), type);
	if (a->__ptrmap)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Map(soap, "map", -1, a->__ptrmap + i, "om:Map");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Maps * SOAP_FMAC4 soap_get_soap_Maps(struct soap *soap, struct soap_Maps *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Maps(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Maps * SOAP_FMAC4 soap_in_soap_Maps(struct soap *soap, const char *tag, struct soap_Maps *a, const char *type)
{
	short soap_flag___ptrmap = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Maps *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Maps, sizeof(struct soap_Maps), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Maps(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrmap && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Map *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_Map *)soap_push_block(soap, sizeof(struct soap_Map));
					soap_default_om__Map(soap, p);
					if (!soap_in_om__Map(soap, "map", p, "om:Map"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrmap = (struct soap_Map *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrmap);
				soap_flag___ptrmap = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Maps *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Maps, sizeof(struct soap_Maps), 0), SOAP_TYPE_soap_Maps, sizeof(struct soap_Maps));
		if (soap->alloced)
			soap_default_soap_Maps(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Map(struct soap *soap, struct soap_Map const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Map))
		soap_mark_om__Map(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Map(struct soap *soap, const struct soap_Map *a)
{
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Map(struct soap *soap, struct soap_Map *a)
{
	soap_default_xsd__string(soap, &a->location);
	soap_default_xsd__int(soap, &a->categorical);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Map(struct soap *soap, struct soap_Map *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Map);
	soap_out_om__Map(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Map(struct soap *soap, const char *tag, int id, const struct soap_Map *a, const char *type)
{
	if (a->location)
		soap_set_attr(soap, "location", a->location);
	soap_set_attr(soap, "categorical", soap_int2s(soap, a->categorical));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Map), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Map * SOAP_FMAC4 soap_get_om__Map(struct soap *soap, struct soap_Map *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Map(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Map * SOAP_FMAC4 soap_in_om__Map(struct soap *soap, const char *tag, struct soap_Map *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Map *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Map, sizeof(struct soap_Map), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Map(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "location"), &a->location))
			return NULL;
		if (soap_s2int(soap, soap_attr_value(soap, "categorical"), &a->categorical))
			return NULL;
		else if (soap->mode & SOAP_XML_STRICT)
		{	soap->error = SOAP_REQUIRED;
			return NULL;
		}
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Map *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Map, sizeof(struct soap_Map), 0), SOAP_TYPE_om__Map, sizeof(struct soap_Map));
		if (soap->alloced)
			soap_default_om__Map(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Map(struct soap *soap, struct soap_Map const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Map))
		soap_mark_soap_Map(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Map(struct soap *soap, const struct soap_Map *a)
{
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Map(struct soap *soap, struct soap_Map *a)
{
	soap_default_xsd__string(soap, &a->location);
	soap_default_xsd__int(soap, &a->categorical);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Map(struct soap *soap, struct soap_Map *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Map);
	soap_out_soap_Map(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Map(struct soap *soap, const char *tag, int id, const struct soap_Map *a, const char *type)
{
	if (a->location)
		soap_set_attr(soap, "location", a->location);
	soap_set_attr(soap, "categorical", soap_int2s(soap, a->categorical));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Map), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Map * SOAP_FMAC4 soap_get_soap_Map(struct soap *soap, struct soap_Map *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Map(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Map * SOAP_FMAC4 soap_in_soap_Map(struct soap *soap, const char *tag, struct soap_Map *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Map *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Map, sizeof(struct soap_Map), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Map(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "location"), &a->location))
			return NULL;
		if (soap_s2int(soap, soap_attr_value(soap, "categorical"), &a->categorical))
			return NULL;
		else if (soap->mode & SOAP_XML_STRICT)
		{	soap->error = SOAP_REQUIRED;
			return NULL;
		}
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Map *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Map, sizeof(struct soap_Map), 0), SOAP_TYPE_soap_Map, sizeof(struct soap_Map));
		if (soap->alloced)
			soap_default_soap_Map(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Points(struct soap *soap, struct soap_Points const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Points))
		soap_mark_om__Points(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Points(struct soap *soap, const struct soap_Points *a)
{
	soap_embedded(soap, &a->coordsystem, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->coordsystem);
	soap_embedded(soap, &a->__ptrpresences, SOAP_TYPE_PointerToom__PresencePoints);
	soap_mark_PointerToom__PresencePoints(soap, &a->__ptrpresences);
	soap_embedded(soap, &a->__ptrabsences, SOAP_TYPE_PointerToom__AbsencePoints);
	soap_mark_PointerToom__AbsencePoints(soap, &a->__ptrabsences);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Points(struct soap *soap, struct soap_Points *a)
{
	soap_default_xsd__string(soap, &a->coordsystem);
	soap_default_PointerToom__PresencePoints(soap, &a->__ptrpresences);
	soap_default_PointerToom__AbsencePoints(soap, &a->__ptrabsences);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Points(struct soap *soap, struct soap_Points *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Points);
	soap_out_om__Points(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Points(struct soap *soap, const char *tag, int id, const struct soap_Points *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Points), type);
	soap_out_xsd__string(soap, "coordsystem", -1, &a->coordsystem, "xsd:string");
	soap_out_PointerToom__PresencePoints(soap, "presences", -1, &a->__ptrpresences, "om:PresencePoints");
	soap_out_PointerToom__AbsencePoints(soap, "absences", -1, &a->__ptrabsences, "om:AbsencePoints");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Points * SOAP_FMAC4 soap_get_om__Points(struct soap *soap, struct soap_Points *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Points(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Points * SOAP_FMAC4 soap_in_om__Points(struct soap *soap, const char *tag, struct soap_Points *a, const char *type)
{
	short soap_flag_coordsystem = 1, soap_flag___ptrpresences = 1, soap_flag___ptrabsences = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Points *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Points, sizeof(struct soap_Points), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Points(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_coordsystem && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "coordsystem", &a->coordsystem, "xsd:string"))
				{	soap_flag_coordsystem = 0;
					continue;
				}
			if (soap_flag___ptrpresences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__PresencePoints(soap, "presences", &a->__ptrpresences, "om:PresencePoints"))
				{	soap_flag___ptrpresences = 0;
					continue;
				}
			if (soap_flag___ptrabsences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__AbsencePoints(soap, "absences", &a->__ptrabsences, "om:AbsencePoints"))
				{	soap_flag___ptrabsences = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Points *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Points, sizeof(struct soap_Points), 0), SOAP_TYPE_om__Points, sizeof(struct soap_Points));
		if (soap->alloced)
			soap_default_om__Points(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Points(struct soap *soap, struct soap_Points const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Points))
		soap_mark_soap_Points(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Points(struct soap *soap, const struct soap_Points *a)
{
	soap_embedded(soap, &a->coordsystem, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->coordsystem);
	soap_embedded(soap, &a->__ptrpresences, SOAP_TYPE_PointerToom__PresencePoints);
	soap_mark_PointerToom__PresencePoints(soap, &a->__ptrpresences);
	soap_embedded(soap, &a->__ptrabsences, SOAP_TYPE_PointerToom__AbsencePoints);
	soap_mark_PointerToom__AbsencePoints(soap, &a->__ptrabsences);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Points(struct soap *soap, struct soap_Points *a)
{
	soap_default_xsd__string(soap, &a->coordsystem);
	soap_default_PointerToom__PresencePoints(soap, &a->__ptrpresences);
	soap_default_PointerToom__AbsencePoints(soap, &a->__ptrabsences);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Points(struct soap *soap, struct soap_Points *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Points);
	soap_out_soap_Points(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Points(struct soap *soap, const char *tag, int id, const struct soap_Points *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Points), type);
	soap_out_xsd__string(soap, "coordsystem", -1, &a->coordsystem, "xsd:string");
	soap_out_PointerToom__PresencePoints(soap, "presences", -1, &a->__ptrpresences, "om:PresencePoints");
	soap_out_PointerToom__AbsencePoints(soap, "absences", -1, &a->__ptrabsences, "om:AbsencePoints");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Points * SOAP_FMAC4 soap_get_soap_Points(struct soap *soap, struct soap_Points *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Points(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Points * SOAP_FMAC4 soap_in_soap_Points(struct soap *soap, const char *tag, struct soap_Points *a, const char *type)
{
	short soap_flag_coordsystem = 1, soap_flag___ptrpresences = 1, soap_flag___ptrabsences = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Points *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Points, sizeof(struct soap_Points), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Points(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_coordsystem && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "coordsystem", &a->coordsystem, "xsd:string"))
				{	soap_flag_coordsystem = 0;
					continue;
				}
			if (soap_flag___ptrpresences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__PresencePoints(soap, "presences", &a->__ptrpresences, "om:PresencePoints"))
				{	soap_flag___ptrpresences = 0;
					continue;
				}
			if (soap_flag___ptrabsences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__AbsencePoints(soap, "absences", &a->__ptrabsences, "om:AbsencePoints"))
				{	soap_flag___ptrabsences = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Points *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Points, sizeof(struct soap_Points), 0), SOAP_TYPE_soap_Points, sizeof(struct soap_Points));
		if (soap->alloced)
			soap_default_soap_Points(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AbsencePoints(struct soap *soap, struct soap_AbsencePoints const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__AbsencePoints))
		soap_mark_om__AbsencePoints(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__AbsencePoints(struct soap *soap, const struct soap_AbsencePoints *a)
{
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrpoint + i, SOAP_TYPE_om__Point);
			soap_mark_om__Point(soap, a->__ptrpoint + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *a)
{
	a->__size = 0;
	a->__ptrpoint = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__AbsencePoints);
	soap_out_om__AbsencePoints(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AbsencePoints(struct soap *soap, const char *tag, int id, const struct soap_AbsencePoints *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AbsencePoints), type);
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Point(soap, "point", -1, a->__ptrpoint + i, "om:Point");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AbsencePoints * SOAP_FMAC4 soap_get_om__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AbsencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AbsencePoints * SOAP_FMAC4 soap_in_om__AbsencePoints(struct soap *soap, const char *tag, struct soap_AbsencePoints *a, const char *type)
{
	short soap_flag___ptrpoint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_AbsencePoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AbsencePoints, sizeof(struct soap_AbsencePoints), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__AbsencePoints(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Point *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_Point *)soap_push_block(soap, sizeof(struct soap_Point));
					soap_default_om__Point(soap, p);
					if (!soap_in_om__Point(soap, "point", p, "om:Point"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrpoint = (struct soap_Point *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrpoint);
				soap_flag___ptrpoint = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_AbsencePoints *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AbsencePoints, sizeof(struct soap_AbsencePoints), 0), SOAP_TYPE_om__AbsencePoints, sizeof(struct soap_AbsencePoints));
		if (soap->alloced)
			soap_default_om__AbsencePoints(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AbsencePoints(struct soap *soap, struct soap_AbsencePoints const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_AbsencePoints))
		soap_mark_soap_AbsencePoints(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_AbsencePoints(struct soap *soap, const struct soap_AbsencePoints *a)
{
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrpoint + i, SOAP_TYPE_om__Point);
			soap_mark_om__Point(soap, a->__ptrpoint + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AbsencePoints(struct soap *soap, struct soap_AbsencePoints *a)
{
	a->__size = 0;
	a->__ptrpoint = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AbsencePoints(struct soap *soap, struct soap_AbsencePoints *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_AbsencePoints);
	soap_out_soap_AbsencePoints(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AbsencePoints(struct soap *soap, const char *tag, int id, const struct soap_AbsencePoints *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AbsencePoints), type);
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Point(soap, "point", -1, a->__ptrpoint + i, "om:Point");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AbsencePoints * SOAP_FMAC4 soap_get_soap_AbsencePoints(struct soap *soap, struct soap_AbsencePoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AbsencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AbsencePoints * SOAP_FMAC4 soap_in_soap_AbsencePoints(struct soap *soap, const char *tag, struct soap_AbsencePoints *a, const char *type)
{
	short soap_flag___ptrpoint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_AbsencePoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AbsencePoints, sizeof(struct soap_AbsencePoints), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_AbsencePoints(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Point *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_Point *)soap_push_block(soap, sizeof(struct soap_Point));
					soap_default_om__Point(soap, p);
					if (!soap_in_om__Point(soap, "point", p, "om:Point"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrpoint = (struct soap_Point *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrpoint);
				soap_flag___ptrpoint = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_AbsencePoints *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AbsencePoints, sizeof(struct soap_AbsencePoints), 0), SOAP_TYPE_soap_AbsencePoints, sizeof(struct soap_AbsencePoints));
		if (soap->alloced)
			soap_default_soap_AbsencePoints(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__PresencePoints(struct soap *soap, struct soap_PresencePoints const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__PresencePoints))
		soap_mark_om__PresencePoints(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__PresencePoints(struct soap *soap, const struct soap_PresencePoints *a)
{
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrpoint + i, SOAP_TYPE_om__Point);
			soap_mark_om__Point(soap, a->__ptrpoint + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__PresencePoints(struct soap *soap, struct soap_PresencePoints *a)
{
	a->__size = 0;
	a->__ptrpoint = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__PresencePoints(struct soap *soap, struct soap_PresencePoints *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__PresencePoints);
	soap_out_om__PresencePoints(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__PresencePoints(struct soap *soap, const char *tag, int id, const struct soap_PresencePoints *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__PresencePoints), type);
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Point(soap, "point", -1, a->__ptrpoint + i, "om:Point");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_PresencePoints * SOAP_FMAC4 soap_get_om__PresencePoints(struct soap *soap, struct soap_PresencePoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__PresencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_PresencePoints * SOAP_FMAC4 soap_in_om__PresencePoints(struct soap *soap, const char *tag, struct soap_PresencePoints *a, const char *type)
{
	short soap_flag___ptrpoint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_PresencePoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__PresencePoints, sizeof(struct soap_PresencePoints), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__PresencePoints(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Point *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_Point *)soap_push_block(soap, sizeof(struct soap_Point));
					soap_default_om__Point(soap, p);
					if (!soap_in_om__Point(soap, "point", p, "om:Point"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrpoint = (struct soap_Point *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrpoint);
				soap_flag___ptrpoint = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_PresencePoints *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__PresencePoints, sizeof(struct soap_PresencePoints), 0), SOAP_TYPE_om__PresencePoints, sizeof(struct soap_PresencePoints));
		if (soap->alloced)
			soap_default_om__PresencePoints(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_PresencePoints(struct soap *soap, struct soap_PresencePoints const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_PresencePoints))
		soap_mark_soap_PresencePoints(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_PresencePoints(struct soap *soap, const struct soap_PresencePoints *a)
{
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrpoint + i, SOAP_TYPE_om__Point);
			soap_mark_om__Point(soap, a->__ptrpoint + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_PresencePoints(struct soap *soap, struct soap_PresencePoints *a)
{
	a->__size = 0;
	a->__ptrpoint = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_PresencePoints(struct soap *soap, struct soap_PresencePoints *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_PresencePoints);
	soap_out_soap_PresencePoints(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_PresencePoints(struct soap *soap, const char *tag, int id, const struct soap_PresencePoints *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_PresencePoints), type);
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Point(soap, "point", -1, a->__ptrpoint + i, "om:Point");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_PresencePoints * SOAP_FMAC4 soap_get_soap_PresencePoints(struct soap *soap, struct soap_PresencePoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_PresencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_PresencePoints * SOAP_FMAC4 soap_in_soap_PresencePoints(struct soap *soap, const char *tag, struct soap_PresencePoints *a, const char *type)
{
	short soap_flag___ptrpoint = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_PresencePoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_PresencePoints, sizeof(struct soap_PresencePoints), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_PresencePoints(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Point *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_Point *)soap_push_block(soap, sizeof(struct soap_Point));
					soap_default_om__Point(soap, p);
					if (!soap_in_om__Point(soap, "point", p, "om:Point"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrpoint = (struct soap_Point *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrpoint);
				soap_flag___ptrpoint = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_PresencePoints *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_PresencePoints, sizeof(struct soap_PresencePoints), 0), SOAP_TYPE_soap_PresencePoints, sizeof(struct soap_PresencePoints));
		if (soap->alloced)
			soap_default_soap_PresencePoints(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Point(struct soap *soap, struct soap_Point const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Point))
		soap_mark_om__Point(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Point(struct soap *soap, const struct soap_Point *a)
{
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Point(struct soap *soap, struct soap_Point *a)
{
	soap_default_xsd__double(soap, &a->latitude);
	soap_default_xsd__double(soap, &a->longitude);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Point(struct soap *soap, struct soap_Point *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Point);
	soap_out_om__Point(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Point(struct soap *soap, const char *tag, int id, const struct soap_Point *a, const char *type)
{
	soap_set_attr(soap, "latitude", soap_double2s(soap, a->latitude));
	soap_set_attr(soap, "longitude", soap_double2s(soap, a->longitude));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Point), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Point * SOAP_FMAC4 soap_get_om__Point(struct soap *soap, struct soap_Point *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Point(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Point * SOAP_FMAC4 soap_in_om__Point(struct soap *soap, const char *tag, struct soap_Point *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Point *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Point, sizeof(struct soap_Point), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Point(soap, a);
		if (soap_s2double(soap, soap_attr_value(soap, "latitude"), &a->latitude))
			return NULL;
		else if (soap->mode & SOAP_XML_STRICT)
		{	soap->error = SOAP_REQUIRED;
			return NULL;
		}
		if (soap_s2double(soap, soap_attr_value(soap, "longitude"), &a->longitude))
			return NULL;
		else if (soap->mode & SOAP_XML_STRICT)
		{	soap->error = SOAP_REQUIRED;
			return NULL;
		}
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Point *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Point, sizeof(struct soap_Point), 0), SOAP_TYPE_om__Point, sizeof(struct soap_Point));
		if (soap->alloced)
			soap_default_om__Point(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Point(struct soap *soap, struct soap_Point const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Point))
		soap_mark_soap_Point(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Point(struct soap *soap, const struct soap_Point *a)
{
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Point(struct soap *soap, struct soap_Point *a)
{
	soap_default_xsd__double(soap, &a->latitude);
	soap_default_xsd__double(soap, &a->longitude);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Point(struct soap *soap, struct soap_Point *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Point);
	soap_out_soap_Point(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Point(struct soap *soap, const char *tag, int id, const struct soap_Point *a, const char *type)
{
	soap_set_attr(soap, "latitude", soap_double2s(soap, a->latitude));
	soap_set_attr(soap, "longitude", soap_double2s(soap, a->longitude));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Point), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Point * SOAP_FMAC4 soap_get_soap_Point(struct soap *soap, struct soap_Point *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Point(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Point * SOAP_FMAC4 soap_in_soap_Point(struct soap *soap, const char *tag, struct soap_Point *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Point *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Point, sizeof(struct soap_Point), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Point(soap, a);
		if (soap_s2double(soap, soap_attr_value(soap, "latitude"), &a->latitude))
			return NULL;
		else if (soap->mode & SOAP_XML_STRICT)
		{	soap->error = SOAP_REQUIRED;
			return NULL;
		}
		if (soap_s2double(soap, soap_attr_value(soap, "longitude"), &a->longitude))
			return NULL;
		else if (soap->mode & SOAP_XML_STRICT)
		{	soap->error = SOAP_REQUIRED;
			return NULL;
		}
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Point *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Point, sizeof(struct soap_Point), 0), SOAP_TYPE_soap_Point, sizeof(struct soap_Point));
		if (soap->alloced)
			soap_default_soap_Point(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__getAlgorithms(struct soap *soap, struct om__getAlgorithms const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__getAlgorithms))
		soap_mark_om__getAlgorithms(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__getAlgorithms(struct soap *soap, const struct om__getAlgorithms *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__getAlgorithms(struct soap *soap, struct om__getAlgorithms *a)
{
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__getAlgorithms(struct soap *soap, struct om__getAlgorithms *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__getAlgorithms);
	soap_out_om__getAlgorithms(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__getAlgorithms(struct soap *soap, const char *tag, int id, const struct om__getAlgorithms *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__getAlgorithms), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__getAlgorithms * SOAP_FMAC4 soap_get_om__getAlgorithms(struct soap *soap, struct om__getAlgorithms *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__getAlgorithms(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__getAlgorithms * SOAP_FMAC4 soap_in_om__getAlgorithms(struct soap *soap, const char *tag, struct om__getAlgorithms *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct om__getAlgorithms *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getAlgorithms, sizeof(struct om__getAlgorithms), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__getAlgorithms(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct om__getAlgorithms *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getAlgorithms, sizeof(struct om__getAlgorithms), 0), SOAP_TYPE_om__getAlgorithms, sizeof(struct om__getAlgorithms));
		if (soap->alloced)
			soap_default_om__getAlgorithms(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__getAlgorithmsResponse(struct soap *soap, struct om__getAlgorithmsResponse const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__getAlgorithmsResponse))
		soap_mark_om__getAlgorithmsResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__getAlgorithmsResponse(struct soap *soap, const struct om__getAlgorithmsResponse *a)
{
	soap_embedded(soap, &a->_return, SOAP_TYPE_om__Algorithms);
	soap_mark_om__Algorithms(soap, &a->_return);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__getAlgorithmsResponse(struct soap *soap, struct om__getAlgorithmsResponse *a)
{
	soap_default_om__Algorithms(soap, &a->_return);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__getAlgorithmsResponse(struct soap *soap, struct om__getAlgorithmsResponse *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__getAlgorithmsResponse);
	soap_out_om__getAlgorithmsResponse(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__getAlgorithmsResponse(struct soap *soap, const char *tag, int id, const struct om__getAlgorithmsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__getAlgorithmsResponse), type);
	soap_element_result(soap, "return");
	soap_out_om__Algorithms(soap, "return", -1, &a->_return, "om:Algorithms");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__getAlgorithmsResponse * SOAP_FMAC4 soap_get_om__getAlgorithmsResponse(struct soap *soap, struct om__getAlgorithmsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__getAlgorithmsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__getAlgorithmsResponse * SOAP_FMAC4 soap_in_om__getAlgorithmsResponse(struct soap *soap, const char *tag, struct om__getAlgorithmsResponse *a, const char *type)
{
	short soap_flag__return = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct om__getAlgorithmsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getAlgorithmsResponse, sizeof(struct om__getAlgorithmsResponse), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__getAlgorithmsResponse(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__return && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_om__Algorithms(soap, NULL, &a->_return, "om:Algorithms"))
				{	soap_flag__return = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__return))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct om__getAlgorithmsResponse *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getAlgorithmsResponse, sizeof(struct om__getAlgorithmsResponse), 0), SOAP_TYPE_om__getAlgorithmsResponse, sizeof(struct om__getAlgorithmsResponse));
		if (soap->alloced)
			soap_default_om__getAlgorithmsResponse(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Algorithms(struct soap *soap, struct soap_Algorithms const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__Algorithms))
		soap_mark_om__Algorithms(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__Algorithms(struct soap *soap, const struct soap_Algorithms *a)
{
	if (a->__ptralgorithm)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptralgorithm + i, SOAP_TYPE_om__AlgorithmMetadata);
			soap_mark_om__AlgorithmMetadata(soap, a->__ptralgorithm + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Algorithms(struct soap *soap, struct soap_Algorithms *a)
{
	a->__size = 0;
	a->__ptralgorithm = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Algorithms(struct soap *soap, struct soap_Algorithms *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__Algorithms);
	soap_out_om__Algorithms(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Algorithms(struct soap *soap, const char *tag, int id, const struct soap_Algorithms *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Algorithms), type);
	if (a->__ptralgorithm)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__AlgorithmMetadata(soap, "algorithm", -1, a->__ptralgorithm + i, "om:AlgorithmMetadata");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Algorithms * SOAP_FMAC4 soap_get_om__Algorithms(struct soap *soap, struct soap_Algorithms *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Algorithms(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Algorithms * SOAP_FMAC4 soap_in_om__Algorithms(struct soap *soap, const char *tag, struct soap_Algorithms *a, const char *type)
{
	short soap_flag___ptralgorithm = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Algorithms *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Algorithms, sizeof(struct soap_Algorithms), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__Algorithms(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptralgorithm && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_AlgorithmMetadata *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_AlgorithmMetadata *)soap_push_block(soap, sizeof(struct soap_AlgorithmMetadata));
					soap_default_om__AlgorithmMetadata(soap, p);
					if (!soap_in_om__AlgorithmMetadata(soap, "algorithm", p, "om:AlgorithmMetadata"))
						break;
				}
				soap_pop_block(soap);
				a->__ptralgorithm = (struct soap_AlgorithmMetadata *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptralgorithm);
				soap_flag___ptralgorithm = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Algorithms *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Algorithms, sizeof(struct soap_Algorithms), 0), SOAP_TYPE_om__Algorithms, sizeof(struct soap_Algorithms));
		if (soap->alloced)
			soap_default_om__Algorithms(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Algorithms(struct soap *soap, struct soap_Algorithms const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_Algorithms))
		soap_mark_soap_Algorithms(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_Algorithms(struct soap *soap, const struct soap_Algorithms *a)
{
	if (a->__ptralgorithm)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptralgorithm + i, SOAP_TYPE_om__AlgorithmMetadata);
			soap_mark_om__AlgorithmMetadata(soap, a->__ptralgorithm + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Algorithms(struct soap *soap, struct soap_Algorithms *a)
{
	a->__size = 0;
	a->__ptralgorithm = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Algorithms(struct soap *soap, struct soap_Algorithms *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_Algorithms);
	soap_out_soap_Algorithms(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Algorithms(struct soap *soap, const char *tag, int id, const struct soap_Algorithms *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Algorithms), type);
	if (a->__ptralgorithm)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__AlgorithmMetadata(soap, "algorithm", -1, a->__ptralgorithm + i, "om:AlgorithmMetadata");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Algorithms * SOAP_FMAC4 soap_get_soap_Algorithms(struct soap *soap, struct soap_Algorithms *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Algorithms(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Algorithms * SOAP_FMAC4 soap_in_soap_Algorithms(struct soap *soap, const char *tag, struct soap_Algorithms *a, const char *type)
{
	short soap_flag___ptralgorithm = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_Algorithms *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Algorithms, sizeof(struct soap_Algorithms), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_Algorithms(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptralgorithm && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_AlgorithmMetadata *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_AlgorithmMetadata *)soap_push_block(soap, sizeof(struct soap_AlgorithmMetadata));
					soap_default_om__AlgorithmMetadata(soap, p);
					if (!soap_in_om__AlgorithmMetadata(soap, "algorithm", p, "om:AlgorithmMetadata"))
						break;
				}
				soap_pop_block(soap);
				a->__ptralgorithm = (struct soap_AlgorithmMetadata *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptralgorithm);
				soap_flag___ptralgorithm = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct soap_Algorithms *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Algorithms, sizeof(struct soap_Algorithms), 0), SOAP_TYPE_soap_Algorithms, sizeof(struct soap_Algorithms));
		if (soap->alloced)
			soap_default_soap_Algorithms(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__AlgorithmMetadata))
		soap_mark_om__AlgorithmMetadata(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__AlgorithmMetadata(struct soap *soap, const struct soap_AlgorithmMetadata *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->version, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->version);
	soap_embedded(soap, &a->overview, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->overview);
	soap_embedded(soap, &a->description, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->description);
	soap_embedded(soap, &a->creator, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->creator);
	soap_embedded(soap, &a->bibliography, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->bibliography);
	soap_embedded(soap, &a->developer, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->developer);
	soap_embedded(soap, &a->contact, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->contact);
	soap_embedded(soap, &a->accepts_categorical_maps, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->accepts_absence_points, SOAP_TYPE_xsd__int);
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrparameter + i, SOAP_TYPE_om__AlgorithmParameter);
			soap_mark_om__AlgorithmParameter(soap, a->__ptrparameter + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *a)
{
	soap_default_xsd__string(soap, &a->om_id);
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__string(soap, &a->version);
	soap_default_xsd__string(soap, &a->overview);
	soap_default_xsd__string(soap, &a->description);
	soap_default_xsd__string(soap, &a->creator);
	soap_default_xsd__string(soap, &a->bibliography);
	soap_default_xsd__string(soap, &a->developer);
	soap_default_xsd__string(soap, &a->contact);
	soap_default_xsd__int(soap, &a->accepts_categorical_maps);
	soap_default_xsd__int(soap, &a->accepts_absence_points);
	a->__size = 0;
	a->__ptrparameter = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__AlgorithmMetadata);
	soap_out_om__AlgorithmMetadata(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AlgorithmMetadata(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmMetadata *a, const char *type)
{
	if (a->om_id)
		soap_set_attr(soap, "om-id", a->om_id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AlgorithmMetadata), type);
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__string(soap, "version", -1, &a->version, "xsd:string");
	soap_out_xsd__string(soap, "overview", -1, &a->overview, "xsd:string");
	soap_out_xsd__string(soap, "description", -1, &a->description, "xsd:string");
	soap_out_xsd__string(soap, "creator", -1, &a->creator, "xsd:string");
	soap_out_xsd__string(soap, "bibliography", -1, &a->bibliography, "xsd:string");
	soap_out_xsd__string(soap, "developer", -1, &a->developer, "xsd:string");
	soap_out_xsd__string(soap, "contact", -1, &a->contact, "xsd:string");
	soap_out_xsd__int(soap, "accepts-categorical-maps", -1, &a->accepts_categorical_maps, "xsd:int");
	soap_out_xsd__int(soap, "accepts-absence-points", -1, &a->accepts_absence_points, "xsd:int");
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__AlgorithmParameter(soap, "parameter", -1, a->__ptrparameter + i, "om:AlgorithmParameter");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata * SOAP_FMAC4 soap_get_om__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AlgorithmMetadata(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata * SOAP_FMAC4 soap_in_om__AlgorithmMetadata(struct soap *soap, const char *tag, struct soap_AlgorithmMetadata *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_version = 1, soap_flag_overview = 1, soap_flag_description = 1, soap_flag_creator = 1, soap_flag_bibliography = 1, soap_flag_developer = 1, soap_flag_contact = 1, soap_flag_accepts_categorical_maps = 1, soap_flag_accepts_absence_points = 1, soap_flag___ptrparameter = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_AlgorithmMetadata *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__AlgorithmMetadata(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "om-id"), &a->om_id))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_version && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "version", &a->version, "xsd:string"))
				{	soap_flag_version = 0;
					continue;
				}
			if (soap_flag_overview && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "overview", &a->overview, "xsd:string"))
				{	soap_flag_overview = 0;
					continue;
				}
			if (soap_flag_description && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "description", &a->description, "xsd:string"))
				{	soap_flag_description = 0;
					continue;
				}
			if (soap_flag_creator && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "creator", &a->creator, "xsd:string"))
				{	soap_flag_creator = 0;
					continue;
				}
			if (soap_flag_bibliography && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "bibliography", &a->bibliography, "xsd:string"))
				{	soap_flag_bibliography = 0;
					continue;
				}
			if (soap_flag_developer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "developer", &a->developer, "xsd:string"))
				{	soap_flag_developer = 0;
					continue;
				}
			if (soap_flag_contact && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "contact", &a->contact, "xsd:string"))
				{	soap_flag_contact = 0;
					continue;
				}
			if (soap_flag_accepts_categorical_maps && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "accepts-categorical-maps", &a->accepts_categorical_maps, "xsd:int"))
				{	soap_flag_accepts_categorical_maps = 0;
					continue;
				}
			if (soap_flag_accepts_absence_points && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "accepts-absence-points", &a->accepts_absence_points, "xsd:int"))
				{	soap_flag_accepts_absence_points = 0;
					continue;
				}
			if (soap_flag___ptrparameter && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_AlgorithmParameter *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_AlgorithmParameter *)soap_push_block(soap, sizeof(struct soap_AlgorithmParameter));
					soap_default_om__AlgorithmParameter(soap, p);
					if (!soap_in_om__AlgorithmParameter(soap, "parameter", p, "om:AlgorithmParameter"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrparameter = (struct soap_AlgorithmParameter *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrparameter);
				soap_flag___ptrparameter = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_accepts_categorical_maps || soap_flag_accepts_absence_points))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct soap_AlgorithmMetadata *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata), 0), SOAP_TYPE_om__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata));
		if (soap->alloced)
			soap_default_om__AlgorithmMetadata(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_AlgorithmMetadata))
		soap_mark_soap_AlgorithmMetadata(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_AlgorithmMetadata(struct soap *soap, const struct soap_AlgorithmMetadata *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->version, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->version);
	soap_embedded(soap, &a->overview, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->overview);
	soap_embedded(soap, &a->description, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->description);
	soap_embedded(soap, &a->creator, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->creator);
	soap_embedded(soap, &a->bibliography, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->bibliography);
	soap_embedded(soap, &a->developer, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->developer);
	soap_embedded(soap, &a->contact, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->contact);
	soap_embedded(soap, &a->accepts_categorical_maps, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->accepts_absence_points, SOAP_TYPE_xsd__int);
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptrparameter + i, SOAP_TYPE_om__AlgorithmParameter);
			soap_mark_om__AlgorithmParameter(soap, a->__ptrparameter + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *a)
{
	soap_default_xsd__string(soap, &a->om_id);
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__string(soap, &a->version);
	soap_default_xsd__string(soap, &a->overview);
	soap_default_xsd__string(soap, &a->description);
	soap_default_xsd__string(soap, &a->creator);
	soap_default_xsd__string(soap, &a->bibliography);
	soap_default_xsd__string(soap, &a->developer);
	soap_default_xsd__string(soap, &a->contact);
	soap_default_xsd__int(soap, &a->accepts_categorical_maps);
	soap_default_xsd__int(soap, &a->accepts_absence_points);
	a->__size = 0;
	a->__ptrparameter = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_AlgorithmMetadata);
	soap_out_soap_AlgorithmMetadata(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AlgorithmMetadata(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmMetadata *a, const char *type)
{
	if (a->om_id)
		soap_set_attr(soap, "om-id", a->om_id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AlgorithmMetadata), type);
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__string(soap, "version", -1, &a->version, "xsd:string");
	soap_out_xsd__string(soap, "overview", -1, &a->overview, "xsd:string");
	soap_out_xsd__string(soap, "description", -1, &a->description, "xsd:string");
	soap_out_xsd__string(soap, "creator", -1, &a->creator, "xsd:string");
	soap_out_xsd__string(soap, "bibliography", -1, &a->bibliography, "xsd:string");
	soap_out_xsd__string(soap, "developer", -1, &a->developer, "xsd:string");
	soap_out_xsd__string(soap, "contact", -1, &a->contact, "xsd:string");
	soap_out_xsd__int(soap, "accepts-categorical-maps", -1, &a->accepts_categorical_maps, "xsd:int");
	soap_out_xsd__int(soap, "accepts-absence-points", -1, &a->accepts_absence_points, "xsd:int");
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__AlgorithmParameter(soap, "parameter", -1, a->__ptrparameter + i, "om:AlgorithmParameter");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata * SOAP_FMAC4 soap_get_soap_AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AlgorithmMetadata(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata * SOAP_FMAC4 soap_in_soap_AlgorithmMetadata(struct soap *soap, const char *tag, struct soap_AlgorithmMetadata *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_version = 1, soap_flag_overview = 1, soap_flag_description = 1, soap_flag_creator = 1, soap_flag_bibliography = 1, soap_flag_developer = 1, soap_flag_contact = 1, soap_flag_accepts_categorical_maps = 1, soap_flag_accepts_absence_points = 1, soap_flag___ptrparameter = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_AlgorithmMetadata *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_AlgorithmMetadata(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "om-id"), &a->om_id))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_version && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "version", &a->version, "xsd:string"))
				{	soap_flag_version = 0;
					continue;
				}
			if (soap_flag_overview && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "overview", &a->overview, "xsd:string"))
				{	soap_flag_overview = 0;
					continue;
				}
			if (soap_flag_description && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "description", &a->description, "xsd:string"))
				{	soap_flag_description = 0;
					continue;
				}
			if (soap_flag_creator && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "creator", &a->creator, "xsd:string"))
				{	soap_flag_creator = 0;
					continue;
				}
			if (soap_flag_bibliography && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "bibliography", &a->bibliography, "xsd:string"))
				{	soap_flag_bibliography = 0;
					continue;
				}
			if (soap_flag_developer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "developer", &a->developer, "xsd:string"))
				{	soap_flag_developer = 0;
					continue;
				}
			if (soap_flag_contact && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "contact", &a->contact, "xsd:string"))
				{	soap_flag_contact = 0;
					continue;
				}
			if (soap_flag_accepts_categorical_maps && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "accepts-categorical-maps", &a->accepts_categorical_maps, "xsd:int"))
				{	soap_flag_accepts_categorical_maps = 0;
					continue;
				}
			if (soap_flag_accepts_absence_points && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "accepts-absence-points", &a->accepts_absence_points, "xsd:int"))
				{	soap_flag_accepts_absence_points = 0;
					continue;
				}
			if (soap_flag___ptrparameter && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_AlgorithmParameter *p;
				soap_new_block(soap);
				for (a->__size = 0; ; a->__size++)
				{	p = (struct soap_AlgorithmParameter *)soap_push_block(soap, sizeof(struct soap_AlgorithmParameter));
					soap_default_om__AlgorithmParameter(soap, p);
					if (!soap_in_om__AlgorithmParameter(soap, "parameter", p, "om:AlgorithmParameter"))
						break;
				}
				soap_pop_block(soap);
				a->__ptrparameter = (struct soap_AlgorithmParameter *)soap_malloc(soap, soap->blist->size);
				soap_store_block(soap, (char*)a->__ptrparameter);
				soap_flag___ptrparameter = 0;
				if (soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_accepts_categorical_maps || soap_flag_accepts_absence_points))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct soap_AlgorithmMetadata *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata), 0), SOAP_TYPE_soap_AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata));
		if (soap->alloced)
			soap_default_soap_AlgorithmMetadata(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_om__AlgorithmParameter))
		soap_mark_om__AlgorithmParameter(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_om__AlgorithmParameter(struct soap *soap, const struct soap_AlgorithmParameter *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->data_type, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->data_type);
	soap_embedded(soap, &a->overview, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->overview);
	soap_embedded(soap, &a->description, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->description);
	soap_embedded(soap, &a->has_min, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->min, SOAP_TYPE_xsd__double);
	soap_embedded(soap, &a->has_max, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->max, SOAP_TYPE_xsd__double);
	soap_embedded(soap, &a->typical_value, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->typical_value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *a)
{
	soap_default_xsd__string(soap, &a->om_id);
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__string(soap, &a->data_type);
	soap_default_xsd__string(soap, &a->overview);
	soap_default_xsd__string(soap, &a->description);
	soap_default_xsd__int(soap, &a->has_min);
	soap_default_xsd__double(soap, &a->min);
	soap_default_xsd__int(soap, &a->has_max);
	soap_default_xsd__double(soap, &a->max);
	soap_default_xsd__string(soap, &a->typical_value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_om__AlgorithmParameter);
	soap_out_om__AlgorithmParameter(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AlgorithmParameter(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmParameter *a, const char *type)
{
	if (a->om_id)
		soap_set_attr(soap, "om-id", a->om_id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AlgorithmParameter), type);
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__string(soap, "data-type", -1, &a->data_type, "xsd:string");
	soap_out_xsd__string(soap, "overview", -1, &a->overview, "xsd:string");
	soap_out_xsd__string(soap, "description", -1, &a->description, "xsd:string");
	soap_out_xsd__int(soap, "has-min", -1, &a->has_min, "xsd:int");
	soap_out_xsd__double(soap, "min", -1, &a->min, "xsd:double");
	soap_out_xsd__int(soap, "has-max", -1, &a->has_max, "xsd:int");
	soap_out_xsd__double(soap, "max", -1, &a->max, "xsd:double");
	soap_out_xsd__string(soap, "typical-value", -1, &a->typical_value, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmParameter * SOAP_FMAC4 soap_get_om__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AlgorithmParameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameter * SOAP_FMAC4 soap_in_om__AlgorithmParameter(struct soap *soap, const char *tag, struct soap_AlgorithmParameter *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_data_type = 1, soap_flag_overview = 1, soap_flag_description = 1, soap_flag_has_min = 1, soap_flag_min = 1, soap_flag_has_max = 1, soap_flag_max = 1, soap_flag_typical_value = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_AlgorithmParameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_om__AlgorithmParameter(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "om-id"), &a->om_id))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_data_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "data-type", &a->data_type, "xsd:string"))
				{	soap_flag_data_type = 0;
					continue;
				}
			if (soap_flag_overview && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "overview", &a->overview, "xsd:string"))
				{	soap_flag_overview = 0;
					continue;
				}
			if (soap_flag_description && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "description", &a->description, "xsd:string"))
				{	soap_flag_description = 0;
					continue;
				}
			if (soap_flag_has_min && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "has-min", &a->has_min, "xsd:int"))
				{	soap_flag_has_min = 0;
					continue;
				}
			if (soap_flag_min && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__double(soap, "min", &a->min, "xsd:double"))
				{	soap_flag_min = 0;
					continue;
				}
			if (soap_flag_has_max && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "has-max", &a->has_max, "xsd:int"))
				{	soap_flag_has_max = 0;
					continue;
				}
			if (soap_flag_max && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__double(soap, "max", &a->max, "xsd:double"))
				{	soap_flag_max = 0;
					continue;
				}
			if (soap_flag_typical_value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "typical-value", &a->typical_value, "xsd:string"))
				{	soap_flag_typical_value = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_has_min || soap_flag_min || soap_flag_has_max || soap_flag_max))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct soap_AlgorithmParameter *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter), 0), SOAP_TYPE_om__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter));
		if (soap->alloced)
			soap_default_om__AlgorithmParameter(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_soap_AlgorithmParameter))
		soap_mark_soap_AlgorithmParameter(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_soap_AlgorithmParameter(struct soap *soap, const struct soap_AlgorithmParameter *a)
{
	soap_embedded(soap, &a->name, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->name);
	soap_embedded(soap, &a->data_type, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->data_type);
	soap_embedded(soap, &a->overview, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->overview);
	soap_embedded(soap, &a->description, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->description);
	soap_embedded(soap, &a->has_min, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->min, SOAP_TYPE_xsd__double);
	soap_embedded(soap, &a->has_max, SOAP_TYPE_xsd__int);
	soap_embedded(soap, &a->max, SOAP_TYPE_xsd__double);
	soap_embedded(soap, &a->typical_value, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->typical_value);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *a)
{
	soap_default_xsd__string(soap, &a->om_id);
	soap_default_xsd__string(soap, &a->name);
	soap_default_xsd__string(soap, &a->data_type);
	soap_default_xsd__string(soap, &a->overview);
	soap_default_xsd__string(soap, &a->description);
	soap_default_xsd__int(soap, &a->has_min);
	soap_default_xsd__double(soap, &a->min);
	soap_default_xsd__int(soap, &a->has_max);
	soap_default_xsd__double(soap, &a->max);
	soap_default_xsd__string(soap, &a->typical_value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_soap_AlgorithmParameter);
	soap_out_soap_AlgorithmParameter(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AlgorithmParameter(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmParameter *a, const char *type)
{
	if (a->om_id)
		soap_set_attr(soap, "om-id", a->om_id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AlgorithmParameter), type);
	soap_out_xsd__string(soap, "name", -1, &a->name, "xsd:string");
	soap_out_xsd__string(soap, "data-type", -1, &a->data_type, "xsd:string");
	soap_out_xsd__string(soap, "overview", -1, &a->overview, "xsd:string");
	soap_out_xsd__string(soap, "description", -1, &a->description, "xsd:string");
	soap_out_xsd__int(soap, "has-min", -1, &a->has_min, "xsd:int");
	soap_out_xsd__double(soap, "min", -1, &a->min, "xsd:double");
	soap_out_xsd__int(soap, "has-max", -1, &a->has_max, "xsd:int");
	soap_out_xsd__double(soap, "max", -1, &a->max, "xsd:double");
	soap_out_xsd__string(soap, "typical-value", -1, &a->typical_value, "xsd:string");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmParameter * SOAP_FMAC4 soap_get_soap_AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AlgorithmParameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameter * SOAP_FMAC4 soap_in_soap_AlgorithmParameter(struct soap *soap, const char *tag, struct soap_AlgorithmParameter *a, const char *type)
{
	short soap_flag_name = 1, soap_flag_data_type = 1, soap_flag_overview = 1, soap_flag_description = 1, soap_flag_has_min = 1, soap_flag_min = 1, soap_flag_has_max = 1, soap_flag_max = 1, soap_flag_typical_value = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct soap_AlgorithmParameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AlgorithmParameter, sizeof(struct soap_AlgorithmParameter), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_soap_AlgorithmParameter(soap, a);
		if (soap_s2string(soap, soap_attr_value(soap, "om-id"), &a->om_id))
			return NULL;
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name = 0;
					continue;
				}
			if (soap_flag_data_type && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "data-type", &a->data_type, "xsd:string"))
				{	soap_flag_data_type = 0;
					continue;
				}
			if (soap_flag_overview && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "overview", &a->overview, "xsd:string"))
				{	soap_flag_overview = 0;
					continue;
				}
			if (soap_flag_description && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "description", &a->description, "xsd:string"))
				{	soap_flag_description = 0;
					continue;
				}
			if (soap_flag_has_min && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "has-min", &a->has_min, "xsd:int"))
				{	soap_flag_has_min = 0;
					continue;
				}
			if (soap_flag_min && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__double(soap, "min", &a->min, "xsd:double"))
				{	soap_flag_min = 0;
					continue;
				}
			if (soap_flag_has_max && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "has-max", &a->has_max, "xsd:int"))
				{	soap_flag_has_max = 0;
					continue;
				}
			if (soap_flag_max && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__double(soap, "max", &a->max, "xsd:double"))
				{	soap_flag_max = 0;
					continue;
				}
			if (soap_flag_typical_value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "typical-value", &a->typical_value, "xsd:string"))
				{	soap_flag_typical_value = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_has_min || soap_flag_min || soap_flag_has_max || soap_flag_max))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else
	{	a = (struct soap_AlgorithmParameter *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AlgorithmParameter, sizeof(struct soap_AlgorithmParameter), 0), SOAP_TYPE_soap_AlgorithmParameter, sizeof(struct soap_AlgorithmParameter));
		if (soap->alloced)
			soap_default_soap_AlgorithmParameter(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_SOAP_ENV__Header))
		soap_mark_SOAP_ENV__Header(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	soap_embedded(soap, &a->om__version, SOAP_TYPE_xsd__string);
	soap_mark_xsd__string(soap, &a->om__version);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	soap_default_xsd__string(soap, &a->om__version);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_SOAP_ENV__Header);
	soap_out_SOAP_ENV__Header(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	soap_out_xsd__string(soap, "om:version", -1, &a->om__version, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	short soap_flag_om__version = 1;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		soap_revert(soap);
		return NULL;
	}
	if (soap->null)
	{	if (soap->mode & SOAP_XML_NIL)
		{	soap->error = SOAP_NULL;
			return NULL;
		}
		else
			return a;
	}
	if (!*soap->href)
	{	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0);
		if (!a)
			return NULL;
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body)
		{	for (;;)
			{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__version && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__string(soap, "om:version", &a->om__version, "xsd:string"))
				{	soap_flag_om__version = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			{	return NULL;
			}
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		}
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0), SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header));
		if (soap->alloced)
			soap_default_SOAP_ENV__Header(soap, a);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToSOAP_ENV__Code))
		soap_mark_PointerToSOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_out_PointerToSOAP_ENV__Code(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_SOAP_ENV__Code(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_SOAP_ENV__Code(soap, tag, i, *a, type);
	}
	return soap_out_SOAP_ENV__Code(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_SOAP_ENV__Code, &pp), *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	struct SOAP_ENV__Code *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_SOAP_ENV__Code(soap, tag, NULL, type)))
		{	a = (struct SOAP_ENV__Code **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Code, sizeof(struct SOAP_ENV__Code *), 1), SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToSOAP_ENV__Detail))
		soap_mark_PointerToSOAP_ENV__Detail(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_mark_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_out_PointerToSOAP_ENV__Detail(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_SOAP_ENV__Detail, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_SOAP_ENV__Detail(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_SOAP_ENV__Detail(soap, tag, i, *a, type);
	}
	return soap_out_SOAP_ENV__Detail(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_SOAP_ENV__Detail, &pp), *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	struct SOAP_ENV__Detail *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct SOAP_ENV__Detail **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_SOAP_ENV__Detail(soap, tag, NULL, type)))
		{	a = (struct SOAP_ENV__Detail **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToSOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail *), 1), SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__int(struct soap *soap, int *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToxsd__int))
		soap_mark_PointerToxsd__int(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToxsd__int(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToxsd__int(struct soap *soap, int **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__int(struct soap *soap, int **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToxsd__int);
	soap_out_PointerToxsd__int(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__int(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToxsd__int);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_xsd__int, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_xsd__int(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_xsd__int(soap, tag, i, *a, type);
	}
	return soap_out_xsd__int(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_xsd__int, &pp), *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToxsd__int(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToxsd__int(struct soap *soap, const char *tag, int **a, const char *type)
{
	int *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (int **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToxsd__int, sizeof(int *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_xsd__int(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_xsd__int(soap, tag, NULL, type)))
		{	a = (int **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToxsd__int, sizeof(int *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToxsd__int, sizeof(int *), 1), SOAP_TYPE_xsd__int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerTounsignedByte))
		soap_mark_PointerTounsignedByte(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerTounsignedByte(struct soap *soap, unsigned char **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerTounsignedByte);
	soap_out_PointerTounsignedByte(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerTounsignedByte);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_unsignedByte, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_unsignedByte(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_unsignedByte(soap, tag, i, *a, type);
	}
	return soap_out_unsignedByte(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_unsignedByte, &pp), *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	unsigned char *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (unsigned char **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_unsignedByte(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_unsignedByte(soap, tag, NULL, type)))
		{	a = (unsigned char **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerTounsignedByte, sizeof(unsigned char *), 1), SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__string(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToxsd__string))
		soap_mark_PointerToxsd__string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToxsd__string(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__string))
		soap_mark_xsd__string(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToxsd__string(struct soap *soap, char ***a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__string(struct soap *soap, char ***a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToxsd__string);
	soap_out_PointerToxsd__string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__string(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToxsd__string);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_xsd__string, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_xsd__string(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_xsd__string(soap, tag, i, *a, type);
	}
	return soap_out_xsd__string(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_xsd__string, &pp), *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxsd__string(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxsd__string(struct soap *soap, const char *tag, char ***a, const char *type)
{
	char **p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (char ***)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToxsd__string, sizeof(char **), 2);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_xsd__string(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_xsd__string(soap, tag, NULL, type)))
		{	a = (char ***)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToxsd__string, sizeof(char **), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToxsd__string, sizeof(char **), 2), SOAP_TYPE_xsd__string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Output(struct soap *soap, struct soap_Output *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__Output))
		soap_mark_PointerToom__Output(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__Output(struct soap *soap, struct soap_Output *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Output))
		soap_mark_om__Output(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__Output(struct soap *soap, struct soap_Output **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Output(struct soap *soap, struct soap_Output **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__Output);
	soap_out_PointerToom__Output(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Output(struct soap *soap, const char *tag, int id, struct soap_Output *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__Output);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__Output, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__Output(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__Output(soap, tag, i, *a, type);
	}
	return soap_out_om__Output(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__Output, &pp), *a, type);
}

SOAP_FMAC3 struct soap_Output ** SOAP_FMAC4 soap_get_PointerToom__Output(struct soap *soap, struct soap_Output **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Output(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Output ** SOAP_FMAC4 soap_in_PointerToom__Output(struct soap *soap, const char *tag, struct soap_Output **a, const char *type)
{
	struct soap_Output *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_Output **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Output, sizeof(struct soap_Output *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__Output(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__Output(soap, tag, NULL, type)))
		{	a = (struct soap_Output **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__Output, sizeof(struct soap_Output *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_Output **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Output, sizeof(struct soap_Output *), 1), SOAP_TYPE_om__Output, sizeof(struct soap_Output), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Algorithm(struct soap *soap, struct soap_Algorithm *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__Algorithm))
		soap_mark_PointerToom__Algorithm(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__Algorithm(struct soap *soap, struct soap_Algorithm *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Algorithm))
		soap_mark_om__Algorithm(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__Algorithm(struct soap *soap, struct soap_Algorithm **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Algorithm(struct soap *soap, struct soap_Algorithm **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__Algorithm);
	soap_out_PointerToom__Algorithm(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Algorithm(struct soap *soap, const char *tag, int id, struct soap_Algorithm *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__Algorithm);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__Algorithm, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__Algorithm(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__Algorithm(soap, tag, i, *a, type);
	}
	return soap_out_om__Algorithm(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__Algorithm, &pp), *a, type);
}

SOAP_FMAC3 struct soap_Algorithm ** SOAP_FMAC4 soap_get_PointerToom__Algorithm(struct soap *soap, struct soap_Algorithm **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Algorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Algorithm ** SOAP_FMAC4 soap_in_PointerToom__Algorithm(struct soap *soap, const char *tag, struct soap_Algorithm **a, const char *type)
{
	struct soap_Algorithm *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_Algorithm **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Algorithm, sizeof(struct soap_Algorithm *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__Algorithm(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__Algorithm(soap, tag, NULL, type)))
		{	a = (struct soap_Algorithm **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__Algorithm, sizeof(struct soap_Algorithm *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_Algorithm **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Algorithm, sizeof(struct soap_Algorithm *), 1), SOAP_TYPE_om__Algorithm, sizeof(struct soap_Algorithm), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Mask(struct soap *soap, struct soap_Mask *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__Mask))
		soap_mark_PointerToom__Mask(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__Mask(struct soap *soap, struct soap_Mask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Mask))
		soap_mark_om__Mask(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__Mask(struct soap *soap, struct soap_Mask **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Mask(struct soap *soap, struct soap_Mask **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__Mask);
	soap_out_PointerToom__Mask(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Mask(struct soap *soap, const char *tag, int id, struct soap_Mask *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__Mask);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__Mask, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__Mask(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__Mask(soap, tag, i, *a, type);
	}
	return soap_out_om__Mask(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__Mask, &pp), *a, type);
}

SOAP_FMAC3 struct soap_Mask ** SOAP_FMAC4 soap_get_PointerToom__Mask(struct soap *soap, struct soap_Mask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Mask(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Mask ** SOAP_FMAC4 soap_in_PointerToom__Mask(struct soap *soap, const char *tag, struct soap_Mask **a, const char *type)
{
	struct soap_Mask *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_Mask **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Mask, sizeof(struct soap_Mask *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__Mask(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__Mask(soap, tag, NULL, type)))
		{	a = (struct soap_Mask **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__Mask, sizeof(struct soap_Mask *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_Mask **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Mask, sizeof(struct soap_Mask *), 1), SOAP_TYPE_om__Mask, sizeof(struct soap_Mask), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Maps(struct soap *soap, struct soap_Maps *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__Maps))
		soap_mark_PointerToom__Maps(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__Maps(struct soap *soap, struct soap_Maps *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Maps))
		soap_mark_om__Maps(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__Maps(struct soap *soap, struct soap_Maps **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Maps(struct soap *soap, struct soap_Maps **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__Maps);
	soap_out_PointerToom__Maps(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Maps(struct soap *soap, const char *tag, int id, struct soap_Maps *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__Maps);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__Maps, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__Maps(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__Maps(soap, tag, i, *a, type);
	}
	return soap_out_om__Maps(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__Maps, &pp), *a, type);
}

SOAP_FMAC3 struct soap_Maps ** SOAP_FMAC4 soap_get_PointerToom__Maps(struct soap *soap, struct soap_Maps **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Maps(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Maps ** SOAP_FMAC4 soap_in_PointerToom__Maps(struct soap *soap, const char *tag, struct soap_Maps **a, const char *type)
{
	struct soap_Maps *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_Maps **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Maps, sizeof(struct soap_Maps *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__Maps(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__Maps(soap, tag, NULL, type)))
		{	a = (struct soap_Maps **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__Maps, sizeof(struct soap_Maps *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_Maps **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Maps, sizeof(struct soap_Maps *), 1), SOAP_TYPE_om__Maps, sizeof(struct soap_Maps), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Points(struct soap *soap, struct soap_Points *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__Points))
		soap_mark_PointerToom__Points(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__Points(struct soap *soap, struct soap_Points *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Points))
		soap_mark_om__Points(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__Points(struct soap *soap, struct soap_Points **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Points(struct soap *soap, struct soap_Points **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__Points);
	soap_out_PointerToom__Points(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Points(struct soap *soap, const char *tag, int id, struct soap_Points *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__Points);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__Points, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__Points(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__Points(soap, tag, i, *a, type);
	}
	return soap_out_om__Points(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__Points, &pp), *a, type);
}

SOAP_FMAC3 struct soap_Points ** SOAP_FMAC4 soap_get_PointerToom__Points(struct soap *soap, struct soap_Points **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Points(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Points ** SOAP_FMAC4 soap_in_PointerToom__Points(struct soap *soap, const char *tag, struct soap_Points **a, const char *type)
{
	struct soap_Points *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_Points **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Points, sizeof(struct soap_Points *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__Points(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__Points(soap, tag, NULL, type)))
		{	a = (struct soap_Points **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__Points, sizeof(struct soap_Points *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_Points **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Points, sizeof(struct soap_Points *), 1), SOAP_TYPE_om__Points, sizeof(struct soap_Points), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Parameter(struct soap *soap, struct soap_Parameter *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__Parameter))
		soap_mark_PointerToom__Parameter(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__Parameter(struct soap *soap, struct soap_Parameter *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Parameter))
		soap_mark_om__Parameter(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__Parameter(struct soap *soap, struct soap_Parameter **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Parameter(struct soap *soap, struct soap_Parameter **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__Parameter);
	soap_out_PointerToom__Parameter(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Parameter(struct soap *soap, const char *tag, int id, struct soap_Parameter *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__Parameter);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__Parameter, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__Parameter(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__Parameter(soap, tag, i, *a, type);
	}
	return soap_out_om__Parameter(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__Parameter, &pp), *a, type);
}

SOAP_FMAC3 struct soap_Parameter ** SOAP_FMAC4 soap_get_PointerToom__Parameter(struct soap *soap, struct soap_Parameter **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Parameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Parameter ** SOAP_FMAC4 soap_in_PointerToom__Parameter(struct soap *soap, const char *tag, struct soap_Parameter **a, const char *type)
{
	struct soap_Parameter *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_Parameter **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Parameter, sizeof(struct soap_Parameter *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__Parameter(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__Parameter(soap, tag, NULL, type)))
		{	a = (struct soap_Parameter **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__Parameter, sizeof(struct soap_Parameter *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_Parameter **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Parameter, sizeof(struct soap_Parameter *), 1), SOAP_TYPE_om__Parameter, sizeof(struct soap_Parameter), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Map(struct soap *soap, struct soap_Map *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__Map))
		soap_mark_PointerToom__Map(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__Map(struct soap *soap, struct soap_Map *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Map))
		soap_mark_om__Map(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__Map(struct soap *soap, struct soap_Map **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Map(struct soap *soap, struct soap_Map **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__Map);
	soap_out_PointerToom__Map(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Map(struct soap *soap, const char *tag, int id, struct soap_Map *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__Map);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__Map, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__Map(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__Map(soap, tag, i, *a, type);
	}
	return soap_out_om__Map(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__Map, &pp), *a, type);
}

SOAP_FMAC3 struct soap_Map ** SOAP_FMAC4 soap_get_PointerToom__Map(struct soap *soap, struct soap_Map **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Map(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Map ** SOAP_FMAC4 soap_in_PointerToom__Map(struct soap *soap, const char *tag, struct soap_Map **a, const char *type)
{
	struct soap_Map *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_Map **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Map, sizeof(struct soap_Map *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__Map(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__Map(soap, tag, NULL, type)))
		{	a = (struct soap_Map **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__Map, sizeof(struct soap_Map *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_Map **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Map, sizeof(struct soap_Map *), 1), SOAP_TYPE_om__Map, sizeof(struct soap_Map), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__AbsencePoints))
		soap_mark_PointerToom__AbsencePoints(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__AbsencePoints))
		soap_mark_om__AbsencePoints(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__AbsencePoints(struct soap *soap, struct soap_AbsencePoints **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AbsencePoints(struct soap *soap, struct soap_AbsencePoints **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__AbsencePoints);
	soap_out_PointerToom__AbsencePoints(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AbsencePoints(struct soap *soap, const char *tag, int id, struct soap_AbsencePoints *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__AbsencePoints);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__AbsencePoints, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__AbsencePoints(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__AbsencePoints(soap, tag, i, *a, type);
	}
	return soap_out_om__AbsencePoints(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__AbsencePoints, &pp), *a, type);
}

SOAP_FMAC3 struct soap_AbsencePoints ** SOAP_FMAC4 soap_get_PointerToom__AbsencePoints(struct soap *soap, struct soap_AbsencePoints **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__AbsencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AbsencePoints ** SOAP_FMAC4 soap_in_PointerToom__AbsencePoints(struct soap *soap, const char *tag, struct soap_AbsencePoints **a, const char *type)
{
	struct soap_AbsencePoints *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_AbsencePoints **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__AbsencePoints, sizeof(struct soap_AbsencePoints *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__AbsencePoints(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__AbsencePoints(soap, tag, NULL, type)))
		{	a = (struct soap_AbsencePoints **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__AbsencePoints, sizeof(struct soap_AbsencePoints *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_AbsencePoints **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__AbsencePoints, sizeof(struct soap_AbsencePoints *), 1), SOAP_TYPE_om__AbsencePoints, sizeof(struct soap_AbsencePoints), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__PresencePoints(struct soap *soap, struct soap_PresencePoints *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__PresencePoints))
		soap_mark_PointerToom__PresencePoints(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__PresencePoints(struct soap *soap, struct soap_PresencePoints *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__PresencePoints))
		soap_mark_om__PresencePoints(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__PresencePoints(struct soap *soap, struct soap_PresencePoints **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__PresencePoints(struct soap *soap, struct soap_PresencePoints **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__PresencePoints);
	soap_out_PointerToom__PresencePoints(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__PresencePoints(struct soap *soap, const char *tag, int id, struct soap_PresencePoints *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__PresencePoints);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__PresencePoints, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__PresencePoints(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__PresencePoints(soap, tag, i, *a, type);
	}
	return soap_out_om__PresencePoints(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__PresencePoints, &pp), *a, type);
}

SOAP_FMAC3 struct soap_PresencePoints ** SOAP_FMAC4 soap_get_PointerToom__PresencePoints(struct soap *soap, struct soap_PresencePoints **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__PresencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_PresencePoints ** SOAP_FMAC4 soap_in_PointerToom__PresencePoints(struct soap *soap, const char *tag, struct soap_PresencePoints **a, const char *type)
{
	struct soap_PresencePoints *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_PresencePoints **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__PresencePoints, sizeof(struct soap_PresencePoints *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__PresencePoints(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__PresencePoints(soap, tag, NULL, type)))
		{	a = (struct soap_PresencePoints **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__PresencePoints, sizeof(struct soap_PresencePoints *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_PresencePoints **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__PresencePoints, sizeof(struct soap_PresencePoints *), 1), SOAP_TYPE_om__PresencePoints, sizeof(struct soap_PresencePoints), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Point(struct soap *soap, struct soap_Point *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__Point))
		soap_mark_PointerToom__Point(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__Point(struct soap *soap, struct soap_Point *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Point))
		soap_mark_om__Point(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__Point(struct soap *soap, struct soap_Point **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Point(struct soap *soap, struct soap_Point **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__Point);
	soap_out_PointerToom__Point(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Point(struct soap *soap, const char *tag, int id, struct soap_Point *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__Point);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__Point, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__Point(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__Point(soap, tag, i, *a, type);
	}
	return soap_out_om__Point(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__Point, &pp), *a, type);
}

SOAP_FMAC3 struct soap_Point ** SOAP_FMAC4 soap_get_PointerToom__Point(struct soap *soap, struct soap_Point **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Point(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Point ** SOAP_FMAC4 soap_in_PointerToom__Point(struct soap *soap, const char *tag, struct soap_Point **a, const char *type)
{
	struct soap_Point *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_Point **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Point, sizeof(struct soap_Point *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__Point(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__Point(soap, tag, NULL, type)))
		{	a = (struct soap_Point **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__Point, sizeof(struct soap_Point *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_Point **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__Point, sizeof(struct soap_Point *), 1), SOAP_TYPE_om__Point, sizeof(struct soap_Point), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__AlgorithmMetadata))
		soap_mark_PointerToom__AlgorithmMetadata(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__AlgorithmMetadata))
		soap_mark_om__AlgorithmMetadata(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__AlgorithmMetadata);
	soap_out_PointerToom__AlgorithmMetadata(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AlgorithmMetadata(struct soap *soap, const char *tag, int id, struct soap_AlgorithmMetadata *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__AlgorithmMetadata);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__AlgorithmMetadata, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__AlgorithmMetadata(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__AlgorithmMetadata(soap, tag, i, *a, type);
	}
	return soap_out_om__AlgorithmMetadata(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__AlgorithmMetadata, &pp), *a, type);
}

SOAP_FMAC3 struct soap_AlgorithmMetadata ** SOAP_FMAC4 soap_get_PointerToom__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__AlgorithmMetadata(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata ** SOAP_FMAC4 soap_in_PointerToom__AlgorithmMetadata(struct soap *soap, const char *tag, struct soap_AlgorithmMetadata **a, const char *type)
{
	struct soap_AlgorithmMetadata *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_AlgorithmMetadata **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__AlgorithmMetadata(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__AlgorithmMetadata(soap, tag, NULL, type)))
		{	a = (struct soap_AlgorithmMetadata **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_AlgorithmMetadata **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata *), 1), SOAP_TYPE_om__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *const*a)
{
	if (!soap_reference(soap, a, SOAP_TYPE_PointerToom__AlgorithmParameter))
		soap_mark_PointerToom__AlgorithmParameter(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToom__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__AlgorithmParameter))
		soap_mark_om__AlgorithmParameter(soap, *a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_PointerToom__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter **a)
{
	*a = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_PointerToom__AlgorithmParameter);
	soap_out_PointerToom__AlgorithmParameter(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AlgorithmParameter(struct soap *soap, const char *tag, int id, struct soap_AlgorithmParameter *const*a, const char *type)
{
	struct soap_plist *pp;
	register int i;
	id = soap_embedded_id(soap, id, a, SOAP_TYPE_PointerToom__AlgorithmParameter);
	if (!*a)
		return soap_element_null(soap, tag, id, type);
	i = soap_pointer_lookup(soap, *a, SOAP_TYPE_om__AlgorithmParameter, &pp);
	if (i)
	{	if (soap_is_embedded(soap, pp))
			return soap_element_ref(soap, tag, id, i);
		if (soap_is_single(soap, pp))
			return soap_out_om__AlgorithmParameter(soap, tag, 0, *a, type);
		soap_set_embedded(soap, pp);
		return soap_out_om__AlgorithmParameter(soap, tag, i, *a, type);
	}
	return soap_out_om__AlgorithmParameter(soap, tag, soap_pointer_enter(soap, *a, SOAP_TYPE_om__AlgorithmParameter, &pp), *a, type);
}

SOAP_FMAC3 struct soap_AlgorithmParameter ** SOAP_FMAC4 soap_get_PointerToom__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__AlgorithmParameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameter ** SOAP_FMAC4 soap_in_PointerToom__AlgorithmParameter(struct soap *soap, const char *tag, struct soap_AlgorithmParameter **a, const char *type)
{
	struct soap_AlgorithmParameter *p;
	if (soap_element_begin_in(soap, tag))
		return NULL;
	if (soap->null)
	{	a = (struct soap_AlgorithmParameter **)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter *), 1);
		if (a)
			*a = NULL;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	else if (!*soap->href)
	{	soap_revert(soap);
		if (a)
		{	if ((p = soap_in_om__AlgorithmParameter(soap, tag, *a, type)))
				*a = p;
			else
				a = NULL;
		}
		else if ((p = soap_in_om__AlgorithmParameter(soap, tag, NULL, type)))
		{	a = (struct soap_AlgorithmParameter **)soap_id_enter(soap, "", NULL, SOAP_TYPE_PointerToom__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter *), 0);
			if (a)
				*a = p;
		}
	}
	else
	{	a = (struct soap_AlgorithmParameter **)soap_id_lookup(soap, soap->href, (void**)soap_id_enter(soap, soap->id, a, SOAP_TYPE_PointerToom__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter *), 1), SOAP_TYPE_om__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_xsd__string
	*a = SOAP_DEFAULT_xsd__string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_xsd__string);
	soap_out_xsd__string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE__QName);
	soap_out__QName(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char **a, const char *tag, const char *type)
{
	int i = soap_embed_element(soap, (void*)a, tag, SOAP_TYPE_string);
	soap_out_string(soap, tag, i, a, type);
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1);
}

SOAP_END_NAMESPACE(soap)

/* end of soapC.cpp */
