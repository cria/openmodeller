/* soapC.cpp
   Generated by gSOAP 2.7.6d from om_soap.hh
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.6d 2006-02-09 21:06:47 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = (struct SOAP_ENV__Reason*)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_SOAP_ENV__Reason:
		return soap_in_SOAP_ENV__Reason(soap, NULL, NULL, "SOAP-ENV:Reason");
	case SOAP_TYPE_om__ping:
		return soap_in_om__ping(soap, NULL, NULL, "om:ping");
	case SOAP_TYPE_om__pingResponse:
		return soap_in_om__pingResponse(soap, NULL, NULL, "om:pingResponse");
	case SOAP_TYPE_om__getDistributionMap:
		return soap_in_om__getDistributionMap(soap, NULL, NULL, "om:getDistributionMap");
	case SOAP_TYPE_om__getDistributionMapResponse:
		return soap_in_om__getDistributionMapResponse(soap, NULL, NULL, "om:getDistributionMapResponse");
	case SOAP_TYPE_om__createModel:
		return soap_in_om__createModel(soap, NULL, NULL, "om:createModel");
	case SOAP_TYPE_om__createModelResponse:
		return soap_in_om__createModelResponse(soap, NULL, NULL, "om:createModelResponse");
	case SOAP_TYPE_om__Output:
		return soap_in_om__Output(soap, NULL, NULL, "om:Output");
	case SOAP_TYPE_soap_Output:
		return soap_in_soap_Output(soap, NULL, NULL, "soap-Output");
	case SOAP_TYPE_om__Algorithm:
		return soap_in_om__Algorithm(soap, NULL, NULL, "om:Algorithm");
	case SOAP_TYPE_soap_Algorithm:
		return soap_in_soap_Algorithm(soap, NULL, NULL, "soap-Algorithm");
	case SOAP_TYPE_om__Parameter:
		return soap_in_om__Parameter(soap, NULL, NULL, "om:Parameter");
	case SOAP_TYPE_soap_Parameter:
		return soap_in_soap_Parameter(soap, NULL, NULL, "soap-Parameter");
	case SOAP_TYPE_om__Mask:
		return soap_in_om__Mask(soap, NULL, NULL, "om:Mask");
	case SOAP_TYPE_soap_Mask:
		return soap_in_soap_Mask(soap, NULL, NULL, "soap-Mask");
	case SOAP_TYPE_om__Maps:
		return soap_in_om__Maps(soap, NULL, NULL, "om:Maps");
	case SOAP_TYPE_soap_Maps:
		return soap_in_soap_Maps(soap, NULL, NULL, "soap-Maps");
	case SOAP_TYPE_om__Map:
		return soap_in_om__Map(soap, NULL, NULL, "om:Map");
	case SOAP_TYPE_soap_Map:
		return soap_in_soap_Map(soap, NULL, NULL, "soap-Map");
	case SOAP_TYPE_om__Points:
		return soap_in_om__Points(soap, NULL, NULL, "om:Points");
	case SOAP_TYPE_soap_Points:
		return soap_in_soap_Points(soap, NULL, NULL, "soap-Points");
	case SOAP_TYPE_om__AbsencePoints:
		return soap_in_om__AbsencePoints(soap, NULL, NULL, "om:AbsencePoints");
	case SOAP_TYPE_soap_AbsencePoints:
		return soap_in_soap_AbsencePoints(soap, NULL, NULL, "soap-AbsencePoints");
	case SOAP_TYPE_om__PresencePoints:
		return soap_in_om__PresencePoints(soap, NULL, NULL, "om:PresencePoints");
	case SOAP_TYPE_soap_PresencePoints:
		return soap_in_soap_PresencePoints(soap, NULL, NULL, "soap-PresencePoints");
	case SOAP_TYPE_om__Point:
		return soap_in_om__Point(soap, NULL, NULL, "om:Point");
	case SOAP_TYPE_soap_Point:
		return soap_in_soap_Point(soap, NULL, NULL, "soap-Point");
	case SOAP_TYPE_om__getAlgorithms:
		return soap_in_om__getAlgorithms(soap, NULL, NULL, "om:getAlgorithms");
	case SOAP_TYPE_om__getAlgorithmsResponse:
		return soap_in_om__getAlgorithmsResponse(soap, NULL, NULL, "om:getAlgorithmsResponse");
	case SOAP_TYPE_om__AvailableAlgorithms:
		return soap_in_om__AvailableAlgorithms(soap, NULL, NULL, "om:AvailableAlgorithms");
	case SOAP_TYPE_soap_AvailableAlgorithms:
		return soap_in_soap_AvailableAlgorithms(soap, NULL, NULL, "soap-AvailableAlgorithms");
	case SOAP_TYPE_om__AvailableAlgorithm:
		return soap_in_om__AvailableAlgorithm(soap, NULL, NULL, "om:AvailableAlgorithm");
	case SOAP_TYPE_soap_AvailableAlgorithm:
		return soap_in_soap_AvailableAlgorithm(soap, NULL, NULL, "soap-AvailableAlgorithm");
	case SOAP_TYPE_om__AlgorithmMetadata:
		return soap_in_om__AlgorithmMetadata(soap, NULL, NULL, "om:AlgorithmMetadata");
	case SOAP_TYPE_soap_AlgorithmMetadata:
		return soap_in_soap_AlgorithmMetadata(soap, NULL, NULL, "soap-AlgorithmMetadata");
	case SOAP_TYPE_om__AlgorithmParameters:
		return soap_in_om__AlgorithmParameters(soap, NULL, NULL, "om:AlgorithmParameters");
	case SOAP_TYPE_soap_AlgorithmParameters:
		return soap_in_soap_AlgorithmParameters(soap, NULL, NULL, "soap-AlgorithmParameters");
	case SOAP_TYPE_om__AlgorithmParameter:
		return soap_in_om__AlgorithmParameter(soap, NULL, NULL, "om:AlgorithmParameter");
	case SOAP_TYPE_soap_AlgorithmParameter:
		return soap_in_soap_AlgorithmParameter(soap, NULL, NULL, "soap-AlgorithmParameter");
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		return soap_in_PointerToSOAP_ENV__Reason(soap, NULL, NULL, "SOAP-ENV:Reason");
	case SOAP_TYPE_PointerToxsd__int:
		return soap_in_PointerToxsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToxsd__string:
		return soap_in_PointerToxsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToom__Output:
		return soap_in_PointerToom__Output(soap, NULL, NULL, "om:Output");
	case SOAP_TYPE_PointerToom__Algorithm:
		return soap_in_PointerToom__Algorithm(soap, NULL, NULL, "om:Algorithm");
	case SOAP_TYPE_PointerToom__Mask:
		return soap_in_PointerToom__Mask(soap, NULL, NULL, "om:Mask");
	case SOAP_TYPE_PointerToom__Maps:
		return soap_in_PointerToom__Maps(soap, NULL, NULL, "om:Maps");
	case SOAP_TYPE_PointerToom__Points:
		return soap_in_PointerToom__Points(soap, NULL, NULL, "om:Points");
	case SOAP_TYPE_PointerToom__Parameter:
		return soap_in_PointerToom__Parameter(soap, NULL, NULL, "om:Parameter");
	case SOAP_TYPE_PointerToom__Map:
		return soap_in_PointerToom__Map(soap, NULL, NULL, "om:Map");
	case SOAP_TYPE_PointerToom__AbsencePoints:
		return soap_in_PointerToom__AbsencePoints(soap, NULL, NULL, "om:AbsencePoints");
	case SOAP_TYPE_PointerToom__PresencePoints:
		return soap_in_PointerToom__PresencePoints(soap, NULL, NULL, "om:PresencePoints");
	case SOAP_TYPE_PointerToom__Point:
		return soap_in_PointerToom__Point(soap, NULL, NULL, "om:Point");
	case SOAP_TYPE_PointerToom__AvailableAlgorithm:
		return soap_in_PointerToom__AvailableAlgorithm(soap, NULL, NULL, "om:AvailableAlgorithm");
	case SOAP_TYPE_PointerToom__AlgorithmParameters:
		return soap_in_PointerToom__AlgorithmParameters(soap, NULL, NULL, "om:AlgorithmParameters");
	case SOAP_TYPE_PointerToom__AlgorithmMetadata:
		return soap_in_PointerToom__AlgorithmMetadata(soap, NULL, NULL, "om:AlgorithmMetadata");
	case SOAP_TYPE_PointerToom__AlgorithmParameter:
		return soap_in_PointerToom__AlgorithmParameter(soap, NULL, NULL, "om:AlgorithmParameter");
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENV:Reason"))
		{	*type = SOAP_TYPE_SOAP_ENV__Reason;
			return soap_in_SOAP_ENV__Reason(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:ping"))
		{	*type = SOAP_TYPE_om__ping;
			return soap_in_om__ping(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:pingResponse"))
		{	*type = SOAP_TYPE_om__pingResponse;
			return soap_in_om__pingResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:getDistributionMap"))
		{	*type = SOAP_TYPE_om__getDistributionMap;
			return soap_in_om__getDistributionMap(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:getDistributionMapResponse"))
		{	*type = SOAP_TYPE_om__getDistributionMapResponse;
			return soap_in_om__getDistributionMapResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:createModel"))
		{	*type = SOAP_TYPE_om__createModel;
			return soap_in_om__createModel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:createModelResponse"))
		{	*type = SOAP_TYPE_om__createModelResponse;
			return soap_in_om__createModelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Output"))
		{	*type = SOAP_TYPE_om__Output;
			return soap_in_om__Output(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Output"))
		{	*type = SOAP_TYPE_soap_Output;
			return soap_in_soap_Output(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Algorithm"))
		{	*type = SOAP_TYPE_om__Algorithm;
			return soap_in_om__Algorithm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Algorithm"))
		{	*type = SOAP_TYPE_soap_Algorithm;
			return soap_in_soap_Algorithm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Parameter"))
		{	*type = SOAP_TYPE_om__Parameter;
			return soap_in_om__Parameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Parameter"))
		{	*type = SOAP_TYPE_soap_Parameter;
			return soap_in_soap_Parameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Mask"))
		{	*type = SOAP_TYPE_om__Mask;
			return soap_in_om__Mask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Mask"))
		{	*type = SOAP_TYPE_soap_Mask;
			return soap_in_soap_Mask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Maps"))
		{	*type = SOAP_TYPE_om__Maps;
			return soap_in_om__Maps(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Maps"))
		{	*type = SOAP_TYPE_soap_Maps;
			return soap_in_soap_Maps(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Map"))
		{	*type = SOAP_TYPE_om__Map;
			return soap_in_om__Map(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Map"))
		{	*type = SOAP_TYPE_soap_Map;
			return soap_in_soap_Map(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Points"))
		{	*type = SOAP_TYPE_om__Points;
			return soap_in_om__Points(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Points"))
		{	*type = SOAP_TYPE_soap_Points;
			return soap_in_soap_Points(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AbsencePoints"))
		{	*type = SOAP_TYPE_om__AbsencePoints;
			return soap_in_om__AbsencePoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AbsencePoints"))
		{	*type = SOAP_TYPE_soap_AbsencePoints;
			return soap_in_soap_AbsencePoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:PresencePoints"))
		{	*type = SOAP_TYPE_om__PresencePoints;
			return soap_in_om__PresencePoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-PresencePoints"))
		{	*type = SOAP_TYPE_soap_PresencePoints;
			return soap_in_soap_PresencePoints(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:Point"))
		{	*type = SOAP_TYPE_om__Point;
			return soap_in_om__Point(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-Point"))
		{	*type = SOAP_TYPE_soap_Point;
			return soap_in_soap_Point(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:getAlgorithms"))
		{	*type = SOAP_TYPE_om__getAlgorithms;
			return soap_in_om__getAlgorithms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:getAlgorithmsResponse"))
		{	*type = SOAP_TYPE_om__getAlgorithmsResponse;
			return soap_in_om__getAlgorithmsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AvailableAlgorithms"))
		{	*type = SOAP_TYPE_om__AvailableAlgorithms;
			return soap_in_om__AvailableAlgorithms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AvailableAlgorithms"))
		{	*type = SOAP_TYPE_soap_AvailableAlgorithms;
			return soap_in_soap_AvailableAlgorithms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AvailableAlgorithm"))
		{	*type = SOAP_TYPE_om__AvailableAlgorithm;
			return soap_in_om__AvailableAlgorithm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AvailableAlgorithm"))
		{	*type = SOAP_TYPE_soap_AvailableAlgorithm;
			return soap_in_soap_AvailableAlgorithm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AlgorithmMetadata"))
		{	*type = SOAP_TYPE_om__AlgorithmMetadata;
			return soap_in_om__AlgorithmMetadata(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AlgorithmMetadata"))
		{	*type = SOAP_TYPE_soap_AlgorithmMetadata;
			return soap_in_soap_AlgorithmMetadata(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AlgorithmParameters"))
		{	*type = SOAP_TYPE_om__AlgorithmParameters;
			return soap_in_om__AlgorithmParameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AlgorithmParameters"))
		{	*type = SOAP_TYPE_soap_AlgorithmParameters;
			return soap_in_soap_AlgorithmParameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "om:AlgorithmParameter"))
		{	*type = SOAP_TYPE_om__AlgorithmParameter;
			return soap_in_om__AlgorithmParameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "soap-AlgorithmParameter"))
		{	*type = SOAP_TYPE_soap_AlgorithmParameter;
			return soap_in_soap_AlgorithmParameter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
			return soap->error = SOAP_TAG_MISMATCH;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__double:
		return soap_out_xsd__double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_SOAP_ENV__Reason:
		return soap_out_SOAP_ENV__Reason(soap, tag, id, (const struct SOAP_ENV__Reason *)ptr, "SOAP-ENV:Reason");
	case SOAP_TYPE_om__ping:
		return soap_out_om__ping(soap, tag, id, (const struct om__ping *)ptr, "om:ping");
	case SOAP_TYPE_om__pingResponse:
		return soap_out_om__pingResponse(soap, tag, id, (const struct om__pingResponse *)ptr, "om:pingResponse");
	case SOAP_TYPE_om__getDistributionMap:
		return soap_out_om__getDistributionMap(soap, tag, id, (const struct om__getDistributionMap *)ptr, "om:getDistributionMap");
	case SOAP_TYPE_om__getDistributionMapResponse:
		return soap_out_om__getDistributionMapResponse(soap, tag, id, (const struct om__getDistributionMapResponse *)ptr, "om:getDistributionMapResponse");
	case SOAP_TYPE_om__createModel:
		return soap_out_om__createModel(soap, tag, id, (const struct om__createModel *)ptr, "om:createModel");
	case SOAP_TYPE_om__createModelResponse:
		return soap_out_om__createModelResponse(soap, tag, id, (const struct om__createModelResponse *)ptr, "om:createModelResponse");
	case SOAP_TYPE_om__Output:
		return soap_out_om__Output(soap, tag, id, (const struct soap_Output *)ptr, "om:Output");
	case SOAP_TYPE_soap_Output:
		return soap_out_soap_Output(soap, tag, id, (const struct soap_Output *)ptr, "soap-Output");
	case SOAP_TYPE_om__Algorithm:
		return soap_out_om__Algorithm(soap, tag, id, (const struct soap_Algorithm *)ptr, "om:Algorithm");
	case SOAP_TYPE_soap_Algorithm:
		return soap_out_soap_Algorithm(soap, tag, id, (const struct soap_Algorithm *)ptr, "soap-Algorithm");
	case SOAP_TYPE_om__Parameter:
		return soap_out_om__Parameter(soap, tag, id, (const struct soap_Parameter *)ptr, "om:Parameter");
	case SOAP_TYPE_soap_Parameter:
		return soap_out_soap_Parameter(soap, tag, id, (const struct soap_Parameter *)ptr, "soap-Parameter");
	case SOAP_TYPE_om__Mask:
		return soap_out_om__Mask(soap, tag, id, (const struct soap_Mask *)ptr, "om:Mask");
	case SOAP_TYPE_soap_Mask:
		return soap_out_soap_Mask(soap, tag, id, (const struct soap_Mask *)ptr, "soap-Mask");
	case SOAP_TYPE_om__Maps:
		return soap_out_om__Maps(soap, tag, id, (const struct soap_Maps *)ptr, "om:Maps");
	case SOAP_TYPE_soap_Maps:
		return soap_out_soap_Maps(soap, tag, id, (const struct soap_Maps *)ptr, "soap-Maps");
	case SOAP_TYPE_om__Map:
		return soap_out_om__Map(soap, tag, id, (const struct soap_Map *)ptr, "om:Map");
	case SOAP_TYPE_soap_Map:
		return soap_out_soap_Map(soap, tag, id, (const struct soap_Map *)ptr, "soap-Map");
	case SOAP_TYPE_om__Points:
		return soap_out_om__Points(soap, tag, id, (const struct soap_Points *)ptr, "om:Points");
	case SOAP_TYPE_soap_Points:
		return soap_out_soap_Points(soap, tag, id, (const struct soap_Points *)ptr, "soap-Points");
	case SOAP_TYPE_om__AbsencePoints:
		return soap_out_om__AbsencePoints(soap, tag, id, (const struct soap_AbsencePoints *)ptr, "om:AbsencePoints");
	case SOAP_TYPE_soap_AbsencePoints:
		return soap_out_soap_AbsencePoints(soap, tag, id, (const struct soap_AbsencePoints *)ptr, "soap-AbsencePoints");
	case SOAP_TYPE_om__PresencePoints:
		return soap_out_om__PresencePoints(soap, tag, id, (const struct soap_PresencePoints *)ptr, "om:PresencePoints");
	case SOAP_TYPE_soap_PresencePoints:
		return soap_out_soap_PresencePoints(soap, tag, id, (const struct soap_PresencePoints *)ptr, "soap-PresencePoints");
	case SOAP_TYPE_om__Point:
		return soap_out_om__Point(soap, tag, id, (const struct soap_Point *)ptr, "om:Point");
	case SOAP_TYPE_soap_Point:
		return soap_out_soap_Point(soap, tag, id, (const struct soap_Point *)ptr, "soap-Point");
	case SOAP_TYPE_om__getAlgorithms:
		return soap_out_om__getAlgorithms(soap, tag, id, (const struct om__getAlgorithms *)ptr, "om:getAlgorithms");
	case SOAP_TYPE_om__getAlgorithmsResponse:
		return soap_out_om__getAlgorithmsResponse(soap, tag, id, (const struct om__getAlgorithmsResponse *)ptr, "om:getAlgorithmsResponse");
	case SOAP_TYPE_om__AvailableAlgorithms:
		return soap_out_om__AvailableAlgorithms(soap, tag, id, (const struct soap_AvailableAlgorithms *)ptr, "om:AvailableAlgorithms");
	case SOAP_TYPE_soap_AvailableAlgorithms:
		return soap_out_soap_AvailableAlgorithms(soap, tag, id, (const struct soap_AvailableAlgorithms *)ptr, "soap-AvailableAlgorithms");
	case SOAP_TYPE_om__AvailableAlgorithm:
		return soap_out_om__AvailableAlgorithm(soap, tag, id, (const struct soap_AvailableAlgorithm *)ptr, "om:AvailableAlgorithm");
	case SOAP_TYPE_soap_AvailableAlgorithm:
		return soap_out_soap_AvailableAlgorithm(soap, tag, id, (const struct soap_AvailableAlgorithm *)ptr, "soap-AvailableAlgorithm");
	case SOAP_TYPE_om__AlgorithmMetadata:
		return soap_out_om__AlgorithmMetadata(soap, tag, id, (const struct soap_AlgorithmMetadata *)ptr, "om:AlgorithmMetadata");
	case SOAP_TYPE_soap_AlgorithmMetadata:
		return soap_out_soap_AlgorithmMetadata(soap, tag, id, (const struct soap_AlgorithmMetadata *)ptr, "soap-AlgorithmMetadata");
	case SOAP_TYPE_om__AlgorithmParameters:
		return soap_out_om__AlgorithmParameters(soap, tag, id, (const struct soap_AlgorithmParameters *)ptr, "om:AlgorithmParameters");
	case SOAP_TYPE_soap_AlgorithmParameters:
		return soap_out_soap_AlgorithmParameters(soap, tag, id, (const struct soap_AlgorithmParameters *)ptr, "soap-AlgorithmParameters");
	case SOAP_TYPE_om__AlgorithmParameter:
		return soap_out_om__AlgorithmParameter(soap, tag, id, (const struct soap_AlgorithmParameter *)ptr, "om:AlgorithmParameter");
	case SOAP_TYPE_soap_AlgorithmParameter:
		return soap_out_soap_AlgorithmParameter(soap, tag, id, (const struct soap_AlgorithmParameter *)ptr, "soap-AlgorithmParameter");
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		return soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, (struct SOAP_ENV__Reason *const*)ptr, "SOAP-ENV:Reason");
	case SOAP_TYPE_PointerToxsd__int:
		return soap_out_PointerToxsd__int(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToxsd__string:
		return soap_out_PointerToxsd__string(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToom__Output:
		return soap_out_PointerToom__Output(soap, tag, id, (struct soap_Output *const*)ptr, "om:Output");
	case SOAP_TYPE_PointerToom__Algorithm:
		return soap_out_PointerToom__Algorithm(soap, tag, id, (struct soap_Algorithm *const*)ptr, "om:Algorithm");
	case SOAP_TYPE_PointerToom__Mask:
		return soap_out_PointerToom__Mask(soap, tag, id, (struct soap_Mask *const*)ptr, "om:Mask");
	case SOAP_TYPE_PointerToom__Maps:
		return soap_out_PointerToom__Maps(soap, tag, id, (struct soap_Maps *const*)ptr, "om:Maps");
	case SOAP_TYPE_PointerToom__Points:
		return soap_out_PointerToom__Points(soap, tag, id, (struct soap_Points *const*)ptr, "om:Points");
	case SOAP_TYPE_PointerToom__Parameter:
		return soap_out_PointerToom__Parameter(soap, tag, id, (struct soap_Parameter *const*)ptr, "om:Parameter");
	case SOAP_TYPE_PointerToom__Map:
		return soap_out_PointerToom__Map(soap, tag, id, (struct soap_Map *const*)ptr, "om:Map");
	case SOAP_TYPE_PointerToom__AbsencePoints:
		return soap_out_PointerToom__AbsencePoints(soap, tag, id, (struct soap_AbsencePoints *const*)ptr, "om:AbsencePoints");
	case SOAP_TYPE_PointerToom__PresencePoints:
		return soap_out_PointerToom__PresencePoints(soap, tag, id, (struct soap_PresencePoints *const*)ptr, "om:PresencePoints");
	case SOAP_TYPE_PointerToom__Point:
		return soap_out_PointerToom__Point(soap, tag, id, (struct soap_Point *const*)ptr, "om:Point");
	case SOAP_TYPE_PointerToom__AvailableAlgorithm:
		return soap_out_PointerToom__AvailableAlgorithm(soap, tag, id, (struct soap_AvailableAlgorithm *const*)ptr, "om:AvailableAlgorithm");
	case SOAP_TYPE_PointerToom__AlgorithmParameters:
		return soap_out_PointerToom__AlgorithmParameters(soap, tag, id, (struct soap_AlgorithmParameters *const*)ptr, "om:AlgorithmParameters");
	case SOAP_TYPE_PointerToom__AlgorithmMetadata:
		return soap_out_PointerToom__AlgorithmMetadata(soap, tag, id, (struct soap_AlgorithmMetadata *const*)ptr, "om:AlgorithmMetadata");
	case SOAP_TYPE_PointerToom__AlgorithmParameter:
		return soap_out_PointerToom__AlgorithmParameter(soap, tag, id, (struct soap_AlgorithmParameter *const*)ptr, "om:AlgorithmParameter");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		soap_serialize_SOAP_ENV__Reason(soap, (const struct SOAP_ENV__Reason *)ptr);
		break;
	case SOAP_TYPE_om__ping:
		soap_serialize_om__ping(soap, (const struct om__ping *)ptr);
		break;
	case SOAP_TYPE_om__pingResponse:
		soap_serialize_om__pingResponse(soap, (const struct om__pingResponse *)ptr);
		break;
	case SOAP_TYPE_om__getDistributionMap:
		soap_serialize_om__getDistributionMap(soap, (const struct om__getDistributionMap *)ptr);
		break;
	case SOAP_TYPE_om__getDistributionMapResponse:
		soap_serialize_om__getDistributionMapResponse(soap, (const struct om__getDistributionMapResponse *)ptr);
		break;
	case SOAP_TYPE_om__createModel:
		soap_serialize_om__createModel(soap, (const struct om__createModel *)ptr);
		break;
	case SOAP_TYPE_om__createModelResponse:
		soap_serialize_om__createModelResponse(soap, (const struct om__createModelResponse *)ptr);
		break;
	case SOAP_TYPE_om__Output:
		soap_serialize_om__Output(soap, (const struct soap_Output *)ptr);
		break;
	case SOAP_TYPE_soap_Output:
		soap_serialize_soap_Output(soap, (const struct soap_Output *)ptr);
		break;
	case SOAP_TYPE_om__Algorithm:
		soap_serialize_om__Algorithm(soap, (const struct soap_Algorithm *)ptr);
		break;
	case SOAP_TYPE_soap_Algorithm:
		soap_serialize_soap_Algorithm(soap, (const struct soap_Algorithm *)ptr);
		break;
	case SOAP_TYPE_om__Parameter:
		soap_serialize_om__Parameter(soap, (const struct soap_Parameter *)ptr);
		break;
	case SOAP_TYPE_soap_Parameter:
		soap_serialize_soap_Parameter(soap, (const struct soap_Parameter *)ptr);
		break;
	case SOAP_TYPE_om__Mask:
		soap_serialize_om__Mask(soap, (const struct soap_Mask *)ptr);
		break;
	case SOAP_TYPE_soap_Mask:
		soap_serialize_soap_Mask(soap, (const struct soap_Mask *)ptr);
		break;
	case SOAP_TYPE_om__Maps:
		soap_serialize_om__Maps(soap, (const struct soap_Maps *)ptr);
		break;
	case SOAP_TYPE_soap_Maps:
		soap_serialize_soap_Maps(soap, (const struct soap_Maps *)ptr);
		break;
	case SOAP_TYPE_om__Map:
		soap_serialize_om__Map(soap, (const struct soap_Map *)ptr);
		break;
	case SOAP_TYPE_soap_Map:
		soap_serialize_soap_Map(soap, (const struct soap_Map *)ptr);
		break;
	case SOAP_TYPE_om__Points:
		soap_serialize_om__Points(soap, (const struct soap_Points *)ptr);
		break;
	case SOAP_TYPE_soap_Points:
		soap_serialize_soap_Points(soap, (const struct soap_Points *)ptr);
		break;
	case SOAP_TYPE_om__AbsencePoints:
		soap_serialize_om__AbsencePoints(soap, (const struct soap_AbsencePoints *)ptr);
		break;
	case SOAP_TYPE_soap_AbsencePoints:
		soap_serialize_soap_AbsencePoints(soap, (const struct soap_AbsencePoints *)ptr);
		break;
	case SOAP_TYPE_om__PresencePoints:
		soap_serialize_om__PresencePoints(soap, (const struct soap_PresencePoints *)ptr);
		break;
	case SOAP_TYPE_soap_PresencePoints:
		soap_serialize_soap_PresencePoints(soap, (const struct soap_PresencePoints *)ptr);
		break;
	case SOAP_TYPE_om__Point:
		soap_serialize_om__Point(soap, (const struct soap_Point *)ptr);
		break;
	case SOAP_TYPE_soap_Point:
		soap_serialize_soap_Point(soap, (const struct soap_Point *)ptr);
		break;
	case SOAP_TYPE_om__getAlgorithms:
		soap_serialize_om__getAlgorithms(soap, (const struct om__getAlgorithms *)ptr);
		break;
	case SOAP_TYPE_om__getAlgorithmsResponse:
		soap_serialize_om__getAlgorithmsResponse(soap, (const struct om__getAlgorithmsResponse *)ptr);
		break;
	case SOAP_TYPE_om__AvailableAlgorithms:
		soap_serialize_om__AvailableAlgorithms(soap, (const struct soap_AvailableAlgorithms *)ptr);
		break;
	case SOAP_TYPE_soap_AvailableAlgorithms:
		soap_serialize_soap_AvailableAlgorithms(soap, (const struct soap_AvailableAlgorithms *)ptr);
		break;
	case SOAP_TYPE_om__AvailableAlgorithm:
		soap_serialize_om__AvailableAlgorithm(soap, (const struct soap_AvailableAlgorithm *)ptr);
		break;
	case SOAP_TYPE_soap_AvailableAlgorithm:
		soap_serialize_soap_AvailableAlgorithm(soap, (const struct soap_AvailableAlgorithm *)ptr);
		break;
	case SOAP_TYPE_om__AlgorithmMetadata:
		soap_serialize_om__AlgorithmMetadata(soap, (const struct soap_AlgorithmMetadata *)ptr);
		break;
	case SOAP_TYPE_soap_AlgorithmMetadata:
		soap_serialize_soap_AlgorithmMetadata(soap, (const struct soap_AlgorithmMetadata *)ptr);
		break;
	case SOAP_TYPE_om__AlgorithmParameters:
		soap_serialize_om__AlgorithmParameters(soap, (const struct soap_AlgorithmParameters *)ptr);
		break;
	case SOAP_TYPE_soap_AlgorithmParameters:
		soap_serialize_soap_AlgorithmParameters(soap, (const struct soap_AlgorithmParameters *)ptr);
		break;
	case SOAP_TYPE_om__AlgorithmParameter:
		soap_serialize_om__AlgorithmParameter(soap, (const struct soap_AlgorithmParameter *)ptr);
		break;
	case SOAP_TYPE_soap_AlgorithmParameter:
		soap_serialize_soap_AlgorithmParameter(soap, (const struct soap_AlgorithmParameter *)ptr);
		break;
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		soap_serialize_PointerToSOAP_ENV__Reason(soap, (struct SOAP_ENV__Reason *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__int:
		soap_serialize_PointerToxsd__int(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__string:
		soap_serialize_PointerToxsd__string(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Output:
		soap_serialize_PointerToom__Output(soap, (struct soap_Output *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Algorithm:
		soap_serialize_PointerToom__Algorithm(soap, (struct soap_Algorithm *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Mask:
		soap_serialize_PointerToom__Mask(soap, (struct soap_Mask *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Maps:
		soap_serialize_PointerToom__Maps(soap, (struct soap_Maps *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Points:
		soap_serialize_PointerToom__Points(soap, (struct soap_Points *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Parameter:
		soap_serialize_PointerToom__Parameter(soap, (struct soap_Parameter *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Map:
		soap_serialize_PointerToom__Map(soap, (struct soap_Map *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__AbsencePoints:
		soap_serialize_PointerToom__AbsencePoints(soap, (struct soap_AbsencePoints *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__PresencePoints:
		soap_serialize_PointerToom__PresencePoints(soap, (struct soap_PresencePoints *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__Point:
		soap_serialize_PointerToom__Point(soap, (struct soap_Point *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__AvailableAlgorithm:
		soap_serialize_PointerToom__AvailableAlgorithm(soap, (struct soap_AvailableAlgorithm *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__AlgorithmParameters:
		soap_serialize_PointerToom__AlgorithmParameters(soap, (struct soap_AlgorithmParameters *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__AlgorithmMetadata:
		soap_serialize_PointerToom__AlgorithmMetadata(soap, (struct soap_AlgorithmMetadata *const*)ptr);
		break;
	case SOAP_TYPE_PointerToom__AlgorithmParameter:
		soap_serialize_PointerToom__AlgorithmParameter(soap, (struct soap_AlgorithmParameter *const*)ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_om__getDistributionMapResponse:
		return (void*)soap_instantiate_om__getDistributionMapResponse(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_om__getDistributionMapResponse:
		if (p->size < 0)
			delete (struct om__getDistributionMapResponse*)p->ptr;
		else
			delete[] (struct om__getDistributionMapResponse*)p->ptr;
		break;
	}
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, int *a)
{	soap_default_int(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (soap_out_xsd__int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__double(struct soap *soap, double *a)
{	soap_default_double(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (soap_out_xsd__double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	soap_element_begin_out(soap, tag, id, type);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type);
	soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__ping(struct soap *soap, const struct om__ping *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__ping(struct soap *soap, struct om__ping *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__ping(struct soap *soap, const struct om__ping *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__ping);
	if (soap_out_om__ping(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ping(struct soap *soap, const char *tag, int id, const struct om__ping *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__ping), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__ping * SOAP_FMAC4 soap_get_om__ping(struct soap *soap, struct om__ping *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__ping(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__ping * SOAP_FMAC4 soap_in_om__ping(struct soap *soap, const char *tag, struct om__ping *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct om__ping *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__ping, sizeof(struct om__ping), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__ping(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct om__ping *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__ping, 0, sizeof(struct om__ping), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__pingResponse(struct soap *soap, const struct om__pingResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__int(soap, &a->status);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__pingResponse(struct soap *soap, struct om__pingResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->status = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__pingResponse(struct soap *soap, const struct om__pingResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__pingResponse);
	if (soap_out_om__pingResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__pingResponse(struct soap *soap, const char *tag, int id, const struct om__pingResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__pingResponse), type);
	if (a->status)
		soap_element_result(soap, "status");
	soap_out_PointerToxsd__int(soap, "status", -1, &a->status, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__pingResponse * SOAP_FMAC4 soap_get_om__pingResponse(struct soap *soap, struct om__pingResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__pingResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__pingResponse * SOAP_FMAC4 soap_in_om__pingResponse(struct soap *soap, const char *tag, struct om__pingResponse *a, const char *type)
{
	short soap_flag_status = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct om__pingResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__pingResponse, sizeof(struct om__pingResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__pingResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__int(soap, "status", &a->status, "xsd:int"))
				{	soap_flag_status--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct om__pingResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__pingResponse, 0, sizeof(struct om__pingResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__getDistributionMap(struct soap *soap, const struct om__getDistributionMap *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__getDistributionMap(struct soap *soap, struct om__getDistributionMap *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__getDistributionMap(struct soap *soap, const struct om__getDistributionMap *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__getDistributionMap);
	if (soap_out_om__getDistributionMap(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__getDistributionMap(struct soap *soap, const char *tag, int id, const struct om__getDistributionMap *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__getDistributionMap), type);
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__getDistributionMap * SOAP_FMAC4 soap_get_om__getDistributionMap(struct soap *soap, struct om__getDistributionMap *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__getDistributionMap(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__getDistributionMap * SOAP_FMAC4 soap_in_om__getDistributionMap(struct soap *soap, const char *tag, struct om__getDistributionMap *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct om__getDistributionMap *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getDistributionMap, sizeof(struct om__getDistributionMap), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__getDistributionMap(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct om__getDistributionMap *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__getDistributionMap, 0, sizeof(struct om__getDistributionMap), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__getDistributionMapResponse(struct soap *soap, const struct om__getDistributionMapResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->file.soap_serialize(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__getDistributionMapResponse(struct soap *soap, struct om__getDistributionMapResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->file.xsd__base64Binary::soap_default(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__getDistributionMapResponse(struct soap *soap, const struct om__getDistributionMapResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__getDistributionMapResponse);
	if (soap_out_om__getDistributionMapResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__getDistributionMapResponse(struct soap *soap, const char *tag, int id, const struct om__getDistributionMapResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__getDistributionMapResponse), type);
	soap_element_result(soap, "file");
	a->file.soap_out(soap, "file", -1, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__getDistributionMapResponse * SOAP_FMAC4 soap_get_om__getDistributionMapResponse(struct soap *soap, struct om__getDistributionMapResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__getDistributionMapResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__getDistributionMapResponse * SOAP_FMAC4 soap_in_om__getDistributionMapResponse(struct soap *soap, const char *tag, struct om__getDistributionMapResponse *a, const char *type)
{
	short soap_flag_file = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct om__getDistributionMapResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_om__getDistributionMapResponse, sizeof(struct om__getDistributionMapResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_om__getDistributionMapResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_file && soap->error == SOAP_TAG_MISMATCH)
				if (a->file.soap_in(soap, "file", "xsd:base64Binary"))
				{	soap_flag_file--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_file > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct om__getDistributionMapResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__getDistributionMapResponse, 0, sizeof(struct om__getDistributionMapResponse), 0, soap_copy_om__getDistributionMapResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct om__getDistributionMapResponse * SOAP_FMAC6 soap_new_om__getDistributionMapResponse(struct soap *soap, int n)
{	return soap_instantiate_om__getDistributionMapResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_om__getDistributionMapResponse(struct soap *soap, struct om__getDistributionMapResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 struct om__getDistributionMapResponse * SOAP_FMAC6 soap_instantiate_om__getDistributionMapResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_om__getDistributionMapResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_om__getDistributionMapResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct om__getDistributionMapResponse;
		if (size)
			*size = sizeof(struct om__getDistributionMapResponse);
	}
	else
	{	cp->ptr = (void*)new struct om__getDistributionMapResponse[n];
		if (size)
			*size = n * sizeof(struct om__getDistributionMapResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct om__getDistributionMapResponse*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_om__getDistributionMapResponse(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct om__getDistributionMapResponse %p -> %p\n", q, p));
	*(struct om__getDistributionMapResponse*)p = *(struct om__getDistributionMapResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__createModel(struct soap *soap, const struct om__createModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToom__Points(soap, &a->points);
	soap_serialize_PointerToom__Maps(soap, &a->maps);
	soap_serialize_PointerToom__Mask(soap, &a->mask);
	soap_serialize_PointerToom__Algorithm(soap, &a->algorithm);
	soap_serialize_PointerToom__Output(soap, &a->output);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__createModel(struct soap *soap, struct om__createModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->points = NULL;
	a->maps = NULL;
	a->mask = NULL;
	a->algorithm = NULL;
	a->output = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__createModel(struct soap *soap, const struct om__createModel *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__createModel);
	if (soap_out_om__createModel(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__createModel(struct soap *soap, const char *tag, int id, const struct om__createModel *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__createModel), type);
	soap_out_PointerToom__Points(soap, "points", -1, &a->points, "");
	soap_out_PointerToom__Maps(soap, "maps", -1, &a->maps, "");
	soap_out_PointerToom__Mask(soap, "mask", -1, &a->mask, "");
	soap_out_PointerToom__Algorithm(soap, "algorithm", -1, &a->algorithm, "");
	soap_out_PointerToom__Output(soap, "output", -1, &a->output, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__createModel * SOAP_FMAC4 soap_get_om__createModel(struct soap *soap, struct om__createModel *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__createModel(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__createModel * SOAP_FMAC4 soap_in_om__createModel(struct soap *soap, const char *tag, struct om__createModel *a, const char *type)
{
	short soap_flag_points = 1, soap_flag_maps = 1, soap_flag_mask = 1, soap_flag_algorithm = 1, soap_flag_output = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct om__createModel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__createModel, sizeof(struct om__createModel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__createModel(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_points && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Points(soap, "points", &a->points, "om:Points"))
				{	soap_flag_points--;
					continue;
				}
			if (soap_flag_maps && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Maps(soap, "maps", &a->maps, "om:Maps"))
				{	soap_flag_maps--;
					continue;
				}
			if (soap_flag_mask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Mask(soap, "mask", &a->mask, "om:Mask"))
				{	soap_flag_mask--;
					continue;
				}
			if (soap_flag_algorithm && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Algorithm(soap, "algorithm", &a->algorithm, "om:Algorithm"))
				{	soap_flag_algorithm--;
					continue;
				}
			if (soap_flag_output && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__Output(soap, "output", &a->output, "om:Output"))
				{	soap_flag_output--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct om__createModel *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__createModel, 0, sizeof(struct om__createModel), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__createModelResponse(struct soap *soap, const struct om__createModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToxsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__createModelResponse(struct soap *soap, struct om__createModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ticket = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__createModelResponse(struct soap *soap, const struct om__createModelResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__createModelResponse);
	if (soap_out_om__createModelResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__createModelResponse(struct soap *soap, const char *tag, int id, const struct om__createModelResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__createModelResponse), type);
	if (a->ticket)
		soap_element_result(soap, "ticket");
	soap_out_PointerToxsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__createModelResponse * SOAP_FMAC4 soap_get_om__createModelResponse(struct soap *soap, struct om__createModelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__createModelResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__createModelResponse * SOAP_FMAC4 soap_in_om__createModelResponse(struct soap *soap, const char *tag, struct om__createModelResponse *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct om__createModelResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__createModelResponse, sizeof(struct om__createModelResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__createModelResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct om__createModelResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__createModelResponse, 0, sizeof(struct om__createModelResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Output(struct soap *soap, struct soap_Output const*a)
{	soap_serialize_soap_Output(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Output(struct soap *soap, struct soap_Output *a)
{	soap_default_soap_Output(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Output(struct soap *soap, const struct soap_Output *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__Output);
	if (soap_out_om__Output(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Output(struct soap *soap, const char *tag, int id, const struct soap_Output *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Output), type);
	soap_out_xsd__string(soap, "header", -1, &a->header, "");
	soap_out_xsd__int(soap, "scale", -1, &a->scale, "");
	soap_out_xsd__string(soap, "format", -1, &a->format, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Output * SOAP_FMAC4 soap_get_om__Output(struct soap *soap, struct soap_Output *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Output(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Output * SOAP_FMAC4 soap_in_om__Output(struct soap *soap, const char *tag, struct soap_Output *a, const char *type)
{
	short soap_flag_header = 1, soap_flag_scale = 1, soap_flag_format = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Output *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Output, sizeof(struct soap_Output), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__Output(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_header && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "header", &a->header, "xsd:string"))
				{	soap_flag_header--;
					continue;
				}
			if (soap_flag_scale && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "scale", &a->scale, "xsd:int"))
				{	soap_flag_scale--;
					continue;
				}
			if (soap_flag_format && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "format", &a->format, "xsd:string"))
				{	soap_flag_format--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_scale > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Output *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__Output, 0, sizeof(struct soap_Output), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Output(struct soap *soap, const struct soap_Output *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->header);
	soap_embedded(soap, &a->scale, SOAP_TYPE_xsd__int);
	soap_serialize_xsd__string(soap, &a->format);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Output(struct soap *soap, struct soap_Output *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->header);
	soap_default_xsd__int(soap, &a->scale);
	soap_default_xsd__string(soap, &a->format);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Output(struct soap *soap, const struct soap_Output *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_Output);
	if (soap_out_soap_Output(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Output(struct soap *soap, const char *tag, int id, const struct soap_Output *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Output), type);
	soap_out_xsd__string(soap, "header", -1, &a->header, "");
	soap_out_xsd__int(soap, "scale", -1, &a->scale, "");
	soap_out_xsd__string(soap, "format", -1, &a->format, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Output * SOAP_FMAC4 soap_get_soap_Output(struct soap *soap, struct soap_Output *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Output(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Output * SOAP_FMAC4 soap_in_soap_Output(struct soap *soap, const char *tag, struct soap_Output *a, const char *type)
{
	short soap_flag_header = 1, soap_flag_scale = 1, soap_flag_format = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Output *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Output, sizeof(struct soap_Output), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_Output(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_header && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "header", &a->header, "xsd:string"))
				{	soap_flag_header--;
					continue;
				}
			if (soap_flag_scale && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "scale", &a->scale, "xsd:int"))
				{	soap_flag_scale--;
					continue;
				}
			if (soap_flag_format && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "format", &a->format, "xsd:string"))
				{	soap_flag_format--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_scale > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Output *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_Output, 0, sizeof(struct soap_Output), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Algorithm(struct soap *soap, struct soap_Algorithm const*a)
{	soap_serialize_soap_Algorithm(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Algorithm(struct soap *soap, struct soap_Algorithm *a)
{	soap_default_soap_Algorithm(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Algorithm(struct soap *soap, const struct soap_Algorithm *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__Algorithm);
	if (soap_out_om__Algorithm(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Algorithm(struct soap *soap, const char *tag, int id, const struct soap_Algorithm *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", a->Id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Algorithm), type);
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Parameter(soap, "parameter", -1, a->__ptrparameter + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Algorithm * SOAP_FMAC4 soap_get_om__Algorithm(struct soap *soap, struct soap_Algorithm *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Algorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Algorithm * SOAP_FMAC4 soap_in_om__Algorithm(struct soap *soap, const char *tag, struct soap_Algorithm *a, const char *type)
{
	short soap_flag___ptrparameter = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Algorithm *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Algorithm, sizeof(struct soap_Algorithm), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__Algorithm(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 0), &a->Id))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrparameter && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Parameter *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "parameter", 1); a->__size++)
				{	p = (struct soap_Parameter *)soap_push_block(soap, sizeof(struct soap_Parameter));
					soap_default_om__Parameter(soap, p);
					soap_revert(soap);
					if (!soap_in_om__Parameter(soap, "parameter", p, "om:Parameter"))
						break;
					soap_flag___ptrparameter = 0;
				}
				a->__ptrparameter = (struct soap_Parameter *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrparameter && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Algorithm *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__Algorithm, 0, sizeof(struct soap_Algorithm), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Algorithm(struct soap *soap, const struct soap_Algorithm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_embedded(soap, a->__ptrparameter + i, SOAP_TYPE_om__Parameter);
			soap_serialize_om__Parameter(soap, a->__ptrparameter + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Algorithm(struct soap *soap, struct soap_Algorithm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->Id);
	a->__size = 0;
	a->__ptrparameter = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Algorithm(struct soap *soap, const struct soap_Algorithm *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_Algorithm);
	if (soap_out_soap_Algorithm(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Algorithm(struct soap *soap, const char *tag, int id, const struct soap_Algorithm *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", a->Id);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Algorithm), type);
	if (a->__ptrparameter)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Parameter(soap, "parameter", -1, a->__ptrparameter + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Algorithm * SOAP_FMAC4 soap_get_soap_Algorithm(struct soap *soap, struct soap_Algorithm *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Algorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Algorithm * SOAP_FMAC4 soap_in_soap_Algorithm(struct soap *soap, const char *tag, struct soap_Algorithm *a, const char *type)
{
	short soap_flag___ptrparameter = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Algorithm *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Algorithm, sizeof(struct soap_Algorithm), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_Algorithm(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 0), &a->Id))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrparameter && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Parameter *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "parameter", 1); a->__size++)
				{	p = (struct soap_Parameter *)soap_push_block(soap, sizeof(struct soap_Parameter));
					soap_default_om__Parameter(soap, p);
					soap_revert(soap);
					if (!soap_in_om__Parameter(soap, "parameter", p, "om:Parameter"))
						break;
					soap_flag___ptrparameter = 0;
				}
				a->__ptrparameter = (struct soap_Parameter *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrparameter && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Algorithm *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_Algorithm, 0, sizeof(struct soap_Algorithm), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Parameter(struct soap *soap, struct soap_Parameter const*a)
{	soap_serialize_soap_Parameter(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Parameter(struct soap *soap, struct soap_Parameter *a)
{	soap_default_soap_Parameter(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Parameter(struct soap *soap, const struct soap_Parameter *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__Parameter);
	if (soap_out_om__Parameter(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Parameter(struct soap *soap, const char *tag, int id, const struct soap_Parameter *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", a->Id);
	if (a->Value)
		soap_set_attr(soap, "Value", a->Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Parameter), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Parameter * SOAP_FMAC4 soap_get_om__Parameter(struct soap *soap, struct soap_Parameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Parameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Parameter * SOAP_FMAC4 soap_in_om__Parameter(struct soap *soap, const char *tag, struct soap_Parameter *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Parameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Parameter, sizeof(struct soap_Parameter), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__Parameter(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Value", 0), &a->Value))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Parameter *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__Parameter, 0, sizeof(struct soap_Parameter), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Parameter(struct soap *soap, const struct soap_Parameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Parameter(struct soap *soap, struct soap_Parameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->Id);
	soap_default_xsd__string(soap, &a->Value);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Parameter(struct soap *soap, const struct soap_Parameter *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_Parameter);
	if (soap_out_soap_Parameter(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Parameter(struct soap *soap, const char *tag, int id, const struct soap_Parameter *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", a->Id);
	if (a->Value)
		soap_set_attr(soap, "Value", a->Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Parameter), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Parameter * SOAP_FMAC4 soap_get_soap_Parameter(struct soap *soap, struct soap_Parameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Parameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Parameter * SOAP_FMAC4 soap_in_soap_Parameter(struct soap *soap, const char *tag, struct soap_Parameter *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Parameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Parameter, sizeof(struct soap_Parameter), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_Parameter(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Value", 0), &a->Value))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Parameter *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_Parameter, 0, sizeof(struct soap_Parameter), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Mask(struct soap *soap, struct soap_Mask const*a)
{	soap_serialize_soap_Mask(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Mask(struct soap *soap, struct soap_Mask *a)
{	soap_default_soap_Mask(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Mask(struct soap *soap, const struct soap_Mask *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__Mask);
	if (soap_out_om__Mask(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Mask(struct soap *soap, const char *tag, int id, const struct soap_Mask *a, const char *type)
{
	if (a->location)
		soap_set_attr(soap, "location", a->location);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Mask), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Mask * SOAP_FMAC4 soap_get_om__Mask(struct soap *soap, struct soap_Mask *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Mask(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Mask * SOAP_FMAC4 soap_in_om__Mask(struct soap *soap, const char *tag, struct soap_Mask *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Mask *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Mask, sizeof(struct soap_Mask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__Mask(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "location", 0), &a->location))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Mask *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__Mask, 0, sizeof(struct soap_Mask), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Mask(struct soap *soap, const struct soap_Mask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Mask(struct soap *soap, struct soap_Mask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->location);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Mask(struct soap *soap, const struct soap_Mask *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_Mask);
	if (soap_out_soap_Mask(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Mask(struct soap *soap, const char *tag, int id, const struct soap_Mask *a, const char *type)
{
	if (a->location)
		soap_set_attr(soap, "location", a->location);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Mask), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Mask * SOAP_FMAC4 soap_get_soap_Mask(struct soap *soap, struct soap_Mask *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Mask(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Mask * SOAP_FMAC4 soap_in_soap_Mask(struct soap *soap, const char *tag, struct soap_Mask *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Mask *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Mask, sizeof(struct soap_Mask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_Mask(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "location", 0), &a->location))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Mask *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_Mask, 0, sizeof(struct soap_Mask), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Maps(struct soap *soap, struct soap_Maps const*a)
{	soap_serialize_soap_Maps(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Maps(struct soap *soap, struct soap_Maps *a)
{	soap_default_soap_Maps(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Maps(struct soap *soap, const struct soap_Maps *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__Maps);
	if (soap_out_om__Maps(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Maps(struct soap *soap, const char *tag, int id, const struct soap_Maps *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Maps), type);
	if (a->__ptrmap)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Map(soap, "map", -1, a->__ptrmap + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Maps * SOAP_FMAC4 soap_get_om__Maps(struct soap *soap, struct soap_Maps *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Maps(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Maps * SOAP_FMAC4 soap_in_om__Maps(struct soap *soap, const char *tag, struct soap_Maps *a, const char *type)
{
	short soap_flag___ptrmap = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Maps *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Maps, sizeof(struct soap_Maps), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__Maps(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrmap && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Map *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "map", 1); a->__size++)
				{	p = (struct soap_Map *)soap_push_block(soap, sizeof(struct soap_Map));
					soap_default_om__Map(soap, p);
					soap_revert(soap);
					if (!soap_in_om__Map(soap, "map", p, "om:Map"))
						break;
					soap_flag___ptrmap = 0;
				}
				a->__ptrmap = (struct soap_Map *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrmap && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Maps *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__Maps, 0, sizeof(struct soap_Maps), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Maps(struct soap *soap, const struct soap_Maps *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->__ptrmap)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_embedded(soap, a->__ptrmap + i, SOAP_TYPE_om__Map);
			soap_serialize_om__Map(soap, a->__ptrmap + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Maps(struct soap *soap, struct soap_Maps *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptrmap = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Maps(struct soap *soap, const struct soap_Maps *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_Maps);
	if (soap_out_soap_Maps(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Maps(struct soap *soap, const char *tag, int id, const struct soap_Maps *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Maps), type);
	if (a->__ptrmap)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Map(soap, "map", -1, a->__ptrmap + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Maps * SOAP_FMAC4 soap_get_soap_Maps(struct soap *soap, struct soap_Maps *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Maps(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Maps * SOAP_FMAC4 soap_in_soap_Maps(struct soap *soap, const char *tag, struct soap_Maps *a, const char *type)
{
	short soap_flag___ptrmap = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Maps *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Maps, sizeof(struct soap_Maps), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_Maps(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrmap && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Map *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "map", 1); a->__size++)
				{	p = (struct soap_Map *)soap_push_block(soap, sizeof(struct soap_Map));
					soap_default_om__Map(soap, p);
					soap_revert(soap);
					if (!soap_in_om__Map(soap, "map", p, "om:Map"))
						break;
					soap_flag___ptrmap = 0;
				}
				a->__ptrmap = (struct soap_Map *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrmap && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Maps *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_Maps, 0, sizeof(struct soap_Maps), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Map(struct soap *soap, struct soap_Map const*a)
{	soap_serialize_soap_Map(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Map(struct soap *soap, struct soap_Map *a)
{	soap_default_soap_Map(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Map(struct soap *soap, const struct soap_Map *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__Map);
	if (soap_out_om__Map(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Map(struct soap *soap, const char *tag, int id, const struct soap_Map *a, const char *type)
{
	if (a->location)
		soap_set_attr(soap, "location", a->location);
	soap_set_attr(soap, "categorical", soap_int2s(soap, a->categorical));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Map), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Map * SOAP_FMAC4 soap_get_om__Map(struct soap *soap, struct soap_Map *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Map(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Map * SOAP_FMAC4 soap_in_om__Map(struct soap *soap, const char *tag, struct soap_Map *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Map *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Map, sizeof(struct soap_Map), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__Map(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "location", 0), &a->location))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "categorical", 0), &a->categorical))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Map *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__Map, 0, sizeof(struct soap_Map), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Map(struct soap *soap, const struct soap_Map *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Map(struct soap *soap, struct soap_Map *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->location);
	soap_default_xsd__int(soap, &a->categorical);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Map(struct soap *soap, const struct soap_Map *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_Map);
	if (soap_out_soap_Map(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Map(struct soap *soap, const char *tag, int id, const struct soap_Map *a, const char *type)
{
	if (a->location)
		soap_set_attr(soap, "location", a->location);
	soap_set_attr(soap, "categorical", soap_int2s(soap, a->categorical));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Map), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Map * SOAP_FMAC4 soap_get_soap_Map(struct soap *soap, struct soap_Map *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Map(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Map * SOAP_FMAC4 soap_in_soap_Map(struct soap *soap, const char *tag, struct soap_Map *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Map *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Map, sizeof(struct soap_Map), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_Map(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "location", 0), &a->location))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "categorical", 0), &a->categorical))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Map *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_Map, 0, sizeof(struct soap_Map), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Points(struct soap *soap, struct soap_Points const*a)
{	soap_serialize_soap_Points(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Points(struct soap *soap, struct soap_Points *a)
{	soap_default_soap_Points(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Points(struct soap *soap, const struct soap_Points *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__Points);
	if (soap_out_om__Points(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Points(struct soap *soap, const char *tag, int id, const struct soap_Points *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Points), type);
	soap_out_xsd__string(soap, "coordsystem", -1, &a->coordsystem, "");
	soap_out_PointerToom__PresencePoints(soap, "presences", -1, &a->__ptrpresences, "");
	soap_out_PointerToom__AbsencePoints(soap, "absences", -1, &a->__ptrabsences, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Points * SOAP_FMAC4 soap_get_om__Points(struct soap *soap, struct soap_Points *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Points(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Points * SOAP_FMAC4 soap_in_om__Points(struct soap *soap, const char *tag, struct soap_Points *a, const char *type)
{
	short soap_flag_coordsystem = 1, soap_flag___ptrpresences = 1, soap_flag___ptrabsences = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Points *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Points, sizeof(struct soap_Points), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__Points(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_coordsystem && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "coordsystem", &a->coordsystem, "xsd:string"))
				{	soap_flag_coordsystem--;
					continue;
				}
			if (soap_flag___ptrpresences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__PresencePoints(soap, "presences", &a->__ptrpresences, "om:PresencePoints"))
				{	soap_flag___ptrpresences--;
					continue;
				}
			if (soap_flag___ptrabsences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__AbsencePoints(soap, "absences", &a->__ptrabsences, "om:AbsencePoints"))
				{	soap_flag___ptrabsences--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Points *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__Points, 0, sizeof(struct soap_Points), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Points(struct soap *soap, const struct soap_Points *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->coordsystem);
	soap_serialize_PointerToom__PresencePoints(soap, &a->__ptrpresences);
	soap_serialize_PointerToom__AbsencePoints(soap, &a->__ptrabsences);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Points(struct soap *soap, struct soap_Points *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->coordsystem);
	a->__ptrpresences = NULL;
	a->__ptrabsences = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Points(struct soap *soap, const struct soap_Points *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_Points);
	if (soap_out_soap_Points(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Points(struct soap *soap, const char *tag, int id, const struct soap_Points *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Points), type);
	soap_out_xsd__string(soap, "coordsystem", -1, &a->coordsystem, "");
	soap_out_PointerToom__PresencePoints(soap, "presences", -1, &a->__ptrpresences, "");
	soap_out_PointerToom__AbsencePoints(soap, "absences", -1, &a->__ptrabsences, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Points * SOAP_FMAC4 soap_get_soap_Points(struct soap *soap, struct soap_Points *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Points(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Points * SOAP_FMAC4 soap_in_soap_Points(struct soap *soap, const char *tag, struct soap_Points *a, const char *type)
{
	short soap_flag_coordsystem = 1, soap_flag___ptrpresences = 1, soap_flag___ptrabsences = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Points *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Points, sizeof(struct soap_Points), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_Points(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_coordsystem && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "coordsystem", &a->coordsystem, "xsd:string"))
				{	soap_flag_coordsystem--;
					continue;
				}
			if (soap_flag___ptrpresences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__PresencePoints(soap, "presences", &a->__ptrpresences, "om:PresencePoints"))
				{	soap_flag___ptrpresences--;
					continue;
				}
			if (soap_flag___ptrabsences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__AbsencePoints(soap, "absences", &a->__ptrabsences, "om:AbsencePoints"))
				{	soap_flag___ptrabsences--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Points *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_Points, 0, sizeof(struct soap_Points), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AbsencePoints(struct soap *soap, struct soap_AbsencePoints const*a)
{	soap_serialize_soap_AbsencePoints(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *a)
{	soap_default_soap_AbsencePoints(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AbsencePoints(struct soap *soap, const struct soap_AbsencePoints *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__AbsencePoints);
	if (soap_out_om__AbsencePoints(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AbsencePoints(struct soap *soap, const char *tag, int id, const struct soap_AbsencePoints *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AbsencePoints), type);
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Point(soap, "point", -1, a->__ptrpoint + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AbsencePoints * SOAP_FMAC4 soap_get_om__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AbsencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AbsencePoints * SOAP_FMAC4 soap_in_om__AbsencePoints(struct soap *soap, const char *tag, struct soap_AbsencePoints *a, const char *type)
{
	short soap_flag___ptrpoint = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AbsencePoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AbsencePoints, sizeof(struct soap_AbsencePoints), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__AbsencePoints(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Point *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "point", 1); a->__size++)
				{	p = (struct soap_Point *)soap_push_block(soap, sizeof(struct soap_Point));
					soap_default_om__Point(soap, p);
					soap_revert(soap);
					if (!soap_in_om__Point(soap, "point", p, "om:Point"))
						break;
					soap_flag___ptrpoint = 0;
				}
				a->__ptrpoint = (struct soap_Point *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AbsencePoints *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__AbsencePoints, 0, sizeof(struct soap_AbsencePoints), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AbsencePoints(struct soap *soap, const struct soap_AbsencePoints *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_embedded(soap, a->__ptrpoint + i, SOAP_TYPE_om__Point);
			soap_serialize_om__Point(soap, a->__ptrpoint + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AbsencePoints(struct soap *soap, struct soap_AbsencePoints *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptrpoint = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AbsencePoints(struct soap *soap, const struct soap_AbsencePoints *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_AbsencePoints);
	if (soap_out_soap_AbsencePoints(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AbsencePoints(struct soap *soap, const char *tag, int id, const struct soap_AbsencePoints *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AbsencePoints), type);
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Point(soap, "point", -1, a->__ptrpoint + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AbsencePoints * SOAP_FMAC4 soap_get_soap_AbsencePoints(struct soap *soap, struct soap_AbsencePoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AbsencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AbsencePoints * SOAP_FMAC4 soap_in_soap_AbsencePoints(struct soap *soap, const char *tag, struct soap_AbsencePoints *a, const char *type)
{
	short soap_flag___ptrpoint = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AbsencePoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AbsencePoints, sizeof(struct soap_AbsencePoints), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_AbsencePoints(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Point *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "point", 1); a->__size++)
				{	p = (struct soap_Point *)soap_push_block(soap, sizeof(struct soap_Point));
					soap_default_om__Point(soap, p);
					soap_revert(soap);
					if (!soap_in_om__Point(soap, "point", p, "om:Point"))
						break;
					soap_flag___ptrpoint = 0;
				}
				a->__ptrpoint = (struct soap_Point *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AbsencePoints *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_AbsencePoints, 0, sizeof(struct soap_AbsencePoints), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__PresencePoints(struct soap *soap, struct soap_PresencePoints const*a)
{	soap_serialize_soap_PresencePoints(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__PresencePoints(struct soap *soap, struct soap_PresencePoints *a)
{	soap_default_soap_PresencePoints(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__PresencePoints(struct soap *soap, const struct soap_PresencePoints *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__PresencePoints);
	if (soap_out_om__PresencePoints(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__PresencePoints(struct soap *soap, const char *tag, int id, const struct soap_PresencePoints *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__PresencePoints), type);
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Point(soap, "point", -1, a->__ptrpoint + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_PresencePoints * SOAP_FMAC4 soap_get_om__PresencePoints(struct soap *soap, struct soap_PresencePoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__PresencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_PresencePoints * SOAP_FMAC4 soap_in_om__PresencePoints(struct soap *soap, const char *tag, struct soap_PresencePoints *a, const char *type)
{
	short soap_flag___ptrpoint = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_PresencePoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__PresencePoints, sizeof(struct soap_PresencePoints), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__PresencePoints(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Point *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "point", 1); a->__size++)
				{	p = (struct soap_Point *)soap_push_block(soap, sizeof(struct soap_Point));
					soap_default_om__Point(soap, p);
					soap_revert(soap);
					if (!soap_in_om__Point(soap, "point", p, "om:Point"))
						break;
					soap_flag___ptrpoint = 0;
				}
				a->__ptrpoint = (struct soap_Point *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_PresencePoints *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__PresencePoints, 0, sizeof(struct soap_PresencePoints), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_PresencePoints(struct soap *soap, const struct soap_PresencePoints *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_embedded(soap, a->__ptrpoint + i, SOAP_TYPE_om__Point);
			soap_serialize_om__Point(soap, a->__ptrpoint + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_PresencePoints(struct soap *soap, struct soap_PresencePoints *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptrpoint = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_PresencePoints(struct soap *soap, const struct soap_PresencePoints *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_PresencePoints);
	if (soap_out_soap_PresencePoints(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_PresencePoints(struct soap *soap, const char *tag, int id, const struct soap_PresencePoints *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_PresencePoints), type);
	if (a->__ptrpoint)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__Point(soap, "point", -1, a->__ptrpoint + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_PresencePoints * SOAP_FMAC4 soap_get_soap_PresencePoints(struct soap *soap, struct soap_PresencePoints *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_PresencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_PresencePoints * SOAP_FMAC4 soap_in_soap_PresencePoints(struct soap *soap, const char *tag, struct soap_PresencePoints *a, const char *type)
{
	short soap_flag___ptrpoint = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_PresencePoints *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_PresencePoints, sizeof(struct soap_PresencePoints), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_PresencePoints(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_Point *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "point", 1); a->__size++)
				{	p = (struct soap_Point *)soap_push_block(soap, sizeof(struct soap_Point));
					soap_default_om__Point(soap, p);
					soap_revert(soap);
					if (!soap_in_om__Point(soap, "point", p, "om:Point"))
						break;
					soap_flag___ptrpoint = 0;
				}
				a->__ptrpoint = (struct soap_Point *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrpoint && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_PresencePoints *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_PresencePoints, 0, sizeof(struct soap_PresencePoints), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__Point(struct soap *soap, struct soap_Point const*a)
{	soap_serialize_soap_Point(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__Point(struct soap *soap, struct soap_Point *a)
{	soap_default_soap_Point(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__Point(struct soap *soap, const struct soap_Point *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__Point);
	if (soap_out_om__Point(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__Point(struct soap *soap, const char *tag, int id, const struct soap_Point *a, const char *type)
{
	soap_set_attr(soap, "latitude", soap_double2s(soap, a->latitude));
	soap_set_attr(soap, "longitude", soap_double2s(soap, a->longitude));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__Point), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Point * SOAP_FMAC4 soap_get_om__Point(struct soap *soap, struct soap_Point *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__Point(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Point * SOAP_FMAC4 soap_in_om__Point(struct soap *soap, const char *tag, struct soap_Point *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Point *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__Point, sizeof(struct soap_Point), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__Point(soap, a);
	if (soap_s2double(soap, soap_attr_value(soap, "latitude", 0), &a->latitude))
		return NULL;
	if (soap_s2double(soap, soap_attr_value(soap, "longitude", 0), &a->longitude))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Point *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__Point, 0, sizeof(struct soap_Point), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_Point(struct soap *soap, const struct soap_Point *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_Point(struct soap *soap, struct soap_Point *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__double(soap, &a->latitude);
	soap_default_xsd__double(soap, &a->longitude);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_Point(struct soap *soap, const struct soap_Point *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_Point);
	if (soap_out_soap_Point(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_Point(struct soap *soap, const char *tag, int id, const struct soap_Point *a, const char *type)
{
	soap_set_attr(soap, "latitude", soap_double2s(soap, a->latitude));
	soap_set_attr(soap, "longitude", soap_double2s(soap, a->longitude));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_Point), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_Point * SOAP_FMAC4 soap_get_soap_Point(struct soap *soap, struct soap_Point *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_Point(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Point * SOAP_FMAC4 soap_in_soap_Point(struct soap *soap, const char *tag, struct soap_Point *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_Point *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_Point, sizeof(struct soap_Point), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_Point(soap, a);
	if (soap_s2double(soap, soap_attr_value(soap, "latitude", 0), &a->latitude))
		return NULL;
	if (soap_s2double(soap, soap_attr_value(soap, "longitude", 0), &a->longitude))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_Point *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_Point, 0, sizeof(struct soap_Point), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__getAlgorithms(struct soap *soap, const struct om__getAlgorithms *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__getAlgorithms(struct soap *soap, struct om__getAlgorithms *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__getAlgorithms(struct soap *soap, const struct om__getAlgorithms *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__getAlgorithms);
	if (soap_out_om__getAlgorithms(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__getAlgorithms(struct soap *soap, const char *tag, int id, const struct om__getAlgorithms *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__getAlgorithms), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__getAlgorithms * SOAP_FMAC4 soap_get_om__getAlgorithms(struct soap *soap, struct om__getAlgorithms *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__getAlgorithms(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__getAlgorithms * SOAP_FMAC4 soap_in_om__getAlgorithms(struct soap *soap, const char *tag, struct om__getAlgorithms *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct om__getAlgorithms *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getAlgorithms, sizeof(struct om__getAlgorithms), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__getAlgorithms(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct om__getAlgorithms *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__getAlgorithms, 0, sizeof(struct om__getAlgorithms), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__getAlgorithmsResponse(struct soap *soap, const struct om__getAlgorithmsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_om__AvailableAlgorithms(soap, &a->_AvailableAlgorithms);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__getAlgorithmsResponse(struct soap *soap, struct om__getAlgorithmsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_om__AvailableAlgorithms(soap, &a->_AvailableAlgorithms);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__getAlgorithmsResponse(struct soap *soap, const struct om__getAlgorithmsResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__getAlgorithmsResponse);
	if (soap_out_om__getAlgorithmsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__getAlgorithmsResponse(struct soap *soap, const char *tag, int id, const struct om__getAlgorithmsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__getAlgorithmsResponse), type);
	soap_element_result(soap, "AvailableAlgorithms");
	soap_out_om__AvailableAlgorithms(soap, "AvailableAlgorithms", -1, &a->_AvailableAlgorithms, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct om__getAlgorithmsResponse * SOAP_FMAC4 soap_get_om__getAlgorithmsResponse(struct soap *soap, struct om__getAlgorithmsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__getAlgorithmsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct om__getAlgorithmsResponse * SOAP_FMAC4 soap_in_om__getAlgorithmsResponse(struct soap *soap, const char *tag, struct om__getAlgorithmsResponse *a, const char *type)
{
	short soap_flag__AvailableAlgorithms = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct om__getAlgorithmsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__getAlgorithmsResponse, sizeof(struct om__getAlgorithmsResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__getAlgorithmsResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__AvailableAlgorithms && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_om__AvailableAlgorithms(soap, NULL, &a->_AvailableAlgorithms, "om:AvailableAlgorithms"))
				{	soap_flag__AvailableAlgorithms--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__AvailableAlgorithms > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct om__getAlgorithmsResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__getAlgorithmsResponse, 0, sizeof(struct om__getAlgorithmsResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AvailableAlgorithms(struct soap *soap, struct soap_AvailableAlgorithms const*a)
{	soap_serialize_soap_AvailableAlgorithms(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AvailableAlgorithms(struct soap *soap, struct soap_AvailableAlgorithms *a)
{	soap_default_soap_AvailableAlgorithms(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AvailableAlgorithms(struct soap *soap, const struct soap_AvailableAlgorithms *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__AvailableAlgorithms);
	if (soap_out_om__AvailableAlgorithms(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AvailableAlgorithms(struct soap *soap, const char *tag, int id, const struct soap_AvailableAlgorithms *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AvailableAlgorithms), type);
	if (a->__ptrAlgorithm)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__AvailableAlgorithm(soap, "Algorithm", -1, a->__ptrAlgorithm + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AvailableAlgorithms * SOAP_FMAC4 soap_get_om__AvailableAlgorithms(struct soap *soap, struct soap_AvailableAlgorithms *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AvailableAlgorithms(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AvailableAlgorithms * SOAP_FMAC4 soap_in_om__AvailableAlgorithms(struct soap *soap, const char *tag, struct soap_AvailableAlgorithms *a, const char *type)
{
	short soap_flag___ptrAlgorithm = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AvailableAlgorithms *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AvailableAlgorithms, sizeof(struct soap_AvailableAlgorithms), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__AvailableAlgorithms(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrAlgorithm && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_AvailableAlgorithm *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "Algorithm", 1); a->__size++)
				{	p = (struct soap_AvailableAlgorithm *)soap_push_block(soap, sizeof(struct soap_AvailableAlgorithm));
					soap_default_om__AvailableAlgorithm(soap, p);
					soap_revert(soap);
					if (!soap_in_om__AvailableAlgorithm(soap, "Algorithm", p, "om:AvailableAlgorithm"))
						break;
					soap_flag___ptrAlgorithm = 0;
				}
				a->__ptrAlgorithm = (struct soap_AvailableAlgorithm *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrAlgorithm && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AvailableAlgorithms *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__AvailableAlgorithms, 0, sizeof(struct soap_AvailableAlgorithms), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AvailableAlgorithms(struct soap *soap, const struct soap_AvailableAlgorithms *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->__ptrAlgorithm)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_embedded(soap, a->__ptrAlgorithm + i, SOAP_TYPE_om__AvailableAlgorithm);
			soap_serialize_om__AvailableAlgorithm(soap, a->__ptrAlgorithm + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AvailableAlgorithms(struct soap *soap, struct soap_AvailableAlgorithms *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptrAlgorithm = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AvailableAlgorithms(struct soap *soap, const struct soap_AvailableAlgorithms *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_AvailableAlgorithms);
	if (soap_out_soap_AvailableAlgorithms(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AvailableAlgorithms(struct soap *soap, const char *tag, int id, const struct soap_AvailableAlgorithms *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AvailableAlgorithms), type);
	if (a->__ptrAlgorithm)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__AvailableAlgorithm(soap, "Algorithm", -1, a->__ptrAlgorithm + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AvailableAlgorithms * SOAP_FMAC4 soap_get_soap_AvailableAlgorithms(struct soap *soap, struct soap_AvailableAlgorithms *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AvailableAlgorithms(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AvailableAlgorithms * SOAP_FMAC4 soap_in_soap_AvailableAlgorithms(struct soap *soap, const char *tag, struct soap_AvailableAlgorithms *a, const char *type)
{
	short soap_flag___ptrAlgorithm = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AvailableAlgorithms *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AvailableAlgorithms, sizeof(struct soap_AvailableAlgorithms), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_AvailableAlgorithms(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrAlgorithm && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_AvailableAlgorithm *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "Algorithm", 1); a->__size++)
				{	p = (struct soap_AvailableAlgorithm *)soap_push_block(soap, sizeof(struct soap_AvailableAlgorithm));
					soap_default_om__AvailableAlgorithm(soap, p);
					soap_revert(soap);
					if (!soap_in_om__AvailableAlgorithm(soap, "Algorithm", p, "om:AvailableAlgorithm"))
						break;
					soap_flag___ptrAlgorithm = 0;
				}
				a->__ptrAlgorithm = (struct soap_AvailableAlgorithm *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrAlgorithm && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AvailableAlgorithms *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_AvailableAlgorithms, 0, sizeof(struct soap_AvailableAlgorithms), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AvailableAlgorithm(struct soap *soap, struct soap_AvailableAlgorithm const*a)
{	soap_serialize_soap_AvailableAlgorithm(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AvailableAlgorithm(struct soap *soap, struct soap_AvailableAlgorithm *a)
{	soap_default_soap_AvailableAlgorithm(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AvailableAlgorithm(struct soap *soap, const struct soap_AvailableAlgorithm *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__AvailableAlgorithm);
	if (soap_out_om__AvailableAlgorithm(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AvailableAlgorithm(struct soap *soap, const char *tag, int id, const struct soap_AvailableAlgorithm *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AvailableAlgorithm), type);
	soap_out_PointerToom__AlgorithmMetadata(soap, "AlgorithmMetadata", -1, &a->__ptrAlgorithmMetadata, "");
	soap_out_PointerToom__AlgorithmParameters(soap, "AlgorithmParameters", -1, &a->__ptrAlgorithmParameters, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AvailableAlgorithm * SOAP_FMAC4 soap_get_om__AvailableAlgorithm(struct soap *soap, struct soap_AvailableAlgorithm *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AvailableAlgorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AvailableAlgorithm * SOAP_FMAC4 soap_in_om__AvailableAlgorithm(struct soap *soap, const char *tag, struct soap_AvailableAlgorithm *a, const char *type)
{
	short soap_flag___ptrAlgorithmMetadata = 1, soap_flag___ptrAlgorithmParameters = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AvailableAlgorithm *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AvailableAlgorithm, sizeof(struct soap_AvailableAlgorithm), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__AvailableAlgorithm(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrAlgorithmMetadata && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__AlgorithmMetadata(soap, "AlgorithmMetadata", &a->__ptrAlgorithmMetadata, "om:AlgorithmMetadata"))
				{	soap_flag___ptrAlgorithmMetadata--;
					continue;
				}
			if (soap_flag___ptrAlgorithmParameters && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__AlgorithmParameters(soap, "AlgorithmParameters", &a->__ptrAlgorithmParameters, "om:AlgorithmParameters"))
				{	soap_flag___ptrAlgorithmParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AvailableAlgorithm *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__AvailableAlgorithm, 0, sizeof(struct soap_AvailableAlgorithm), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AvailableAlgorithm(struct soap *soap, const struct soap_AvailableAlgorithm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToom__AlgorithmMetadata(soap, &a->__ptrAlgorithmMetadata);
	soap_serialize_PointerToom__AlgorithmParameters(soap, &a->__ptrAlgorithmParameters);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AvailableAlgorithm(struct soap *soap, struct soap_AvailableAlgorithm *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__ptrAlgorithmMetadata = NULL;
	a->__ptrAlgorithmParameters = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AvailableAlgorithm(struct soap *soap, const struct soap_AvailableAlgorithm *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_AvailableAlgorithm);
	if (soap_out_soap_AvailableAlgorithm(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AvailableAlgorithm(struct soap *soap, const char *tag, int id, const struct soap_AvailableAlgorithm *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AvailableAlgorithm), type);
	soap_out_PointerToom__AlgorithmMetadata(soap, "AlgorithmMetadata", -1, &a->__ptrAlgorithmMetadata, "");
	soap_out_PointerToom__AlgorithmParameters(soap, "AlgorithmParameters", -1, &a->__ptrAlgorithmParameters, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AvailableAlgorithm * SOAP_FMAC4 soap_get_soap_AvailableAlgorithm(struct soap *soap, struct soap_AvailableAlgorithm *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AvailableAlgorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AvailableAlgorithm * SOAP_FMAC4 soap_in_soap_AvailableAlgorithm(struct soap *soap, const char *tag, struct soap_AvailableAlgorithm *a, const char *type)
{
	short soap_flag___ptrAlgorithmMetadata = 1, soap_flag___ptrAlgorithmParameters = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AvailableAlgorithm *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AvailableAlgorithm, sizeof(struct soap_AvailableAlgorithm), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_AvailableAlgorithm(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrAlgorithmMetadata && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__AlgorithmMetadata(soap, "AlgorithmMetadata", &a->__ptrAlgorithmMetadata, "om:AlgorithmMetadata"))
				{	soap_flag___ptrAlgorithmMetadata--;
					continue;
				}
			if (soap_flag___ptrAlgorithmParameters && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToom__AlgorithmParameters(soap, "AlgorithmParameters", &a->__ptrAlgorithmParameters, "om:AlgorithmParameters"))
				{	soap_flag___ptrAlgorithmParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AvailableAlgorithm *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_AvailableAlgorithm, 0, sizeof(struct soap_AvailableAlgorithm), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata const*a)
{	soap_serialize_soap_AlgorithmMetadata(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *a)
{	soap_default_soap_AlgorithmMetadata(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AlgorithmMetadata(struct soap *soap, const struct soap_AlgorithmMetadata *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__AlgorithmMetadata);
	if (soap_out_om__AlgorithmMetadata(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AlgorithmMetadata(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmMetadata *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", a->Id);
	if (a->Name)
		soap_set_attr(soap, "Name", a->Name);
	if (a->Version)
		soap_set_attr(soap, "Version", a->Version);
	if (a->Author)
		soap_set_attr(soap, "Author", a->Author);
	if (a->CodeAuthor)
		soap_set_attr(soap, "CodeAuthor", a->CodeAuthor);
	if (a->Contact)
		soap_set_attr(soap, "Contact", a->Contact);
	soap_set_attr(soap, "Categorical", soap_int2s(soap, a->Categorical));
	soap_set_attr(soap, "Absence", soap_int2s(soap, a->Absence));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AlgorithmMetadata), type);
	soap_out_xsd__string(soap, "Overview", -1, &a->Overview, "");
	soap_out_xsd__string(soap, "Description", -1, &a->Description, "");
	soap_out_xsd__string(soap, "Bibliography", -1, &a->Bibliography, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata * SOAP_FMAC4 soap_get_om__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AlgorithmMetadata(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata * SOAP_FMAC4 soap_in_om__AlgorithmMetadata(struct soap *soap, const char *tag, struct soap_AlgorithmMetadata *a, const char *type)
{
	short soap_flag_Overview = 1, soap_flag_Description = 1, soap_flag_Bibliography = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AlgorithmMetadata *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__AlgorithmMetadata(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Name", 0), &a->Name))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Version", 0), &a->Version))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Author", 0), &a->Author))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "CodeAuthor", 0), &a->CodeAuthor))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Contact", 0), &a->Contact))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "Categorical", 0), &a->Categorical))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "Absence", 0), &a->Absence))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Overview && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Overview", &a->Overview, "xsd:string"))
				{	soap_flag_Overview--;
					continue;
				}
			if (soap_flag_Description && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Description", &a->Description, "xsd:string"))
				{	soap_flag_Description--;
					continue;
				}
			if (soap_flag_Bibliography && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Bibliography", &a->Bibliography, "xsd:string"))
				{	soap_flag_Bibliography--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmMetadata *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__AlgorithmMetadata, 0, sizeof(struct soap_AlgorithmMetadata), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AlgorithmMetadata(struct soap *soap, const struct soap_AlgorithmMetadata *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->Overview);
	soap_serialize_xsd__string(soap, &a->Description);
	soap_serialize_xsd__string(soap, &a->Bibliography);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->Id);
	soap_default_xsd__string(soap, &a->Name);
	soap_default_xsd__string(soap, &a->Version);
	soap_default_xsd__string(soap, &a->Overview);
	soap_default_xsd__string(soap, &a->Description);
	soap_default_xsd__string(soap, &a->Author);
	soap_default_xsd__string(soap, &a->Bibliography);
	soap_default_xsd__string(soap, &a->CodeAuthor);
	soap_default_xsd__string(soap, &a->Contact);
	soap_default_xsd__int(soap, &a->Categorical);
	soap_default_xsd__int(soap, &a->Absence);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AlgorithmMetadata(struct soap *soap, const struct soap_AlgorithmMetadata *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_AlgorithmMetadata);
	if (soap_out_soap_AlgorithmMetadata(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AlgorithmMetadata(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmMetadata *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", a->Id);
	if (a->Name)
		soap_set_attr(soap, "Name", a->Name);
	if (a->Version)
		soap_set_attr(soap, "Version", a->Version);
	if (a->Author)
		soap_set_attr(soap, "Author", a->Author);
	if (a->CodeAuthor)
		soap_set_attr(soap, "CodeAuthor", a->CodeAuthor);
	if (a->Contact)
		soap_set_attr(soap, "Contact", a->Contact);
	soap_set_attr(soap, "Categorical", soap_int2s(soap, a->Categorical));
	soap_set_attr(soap, "Absence", soap_int2s(soap, a->Absence));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AlgorithmMetadata), type);
	soap_out_xsd__string(soap, "Overview", -1, &a->Overview, "");
	soap_out_xsd__string(soap, "Description", -1, &a->Description, "");
	soap_out_xsd__string(soap, "Bibliography", -1, &a->Bibliography, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata * SOAP_FMAC4 soap_get_soap_AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AlgorithmMetadata(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata * SOAP_FMAC4 soap_in_soap_AlgorithmMetadata(struct soap *soap, const char *tag, struct soap_AlgorithmMetadata *a, const char *type)
{
	short soap_flag_Overview = 1, soap_flag_Description = 1, soap_flag_Bibliography = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AlgorithmMetadata *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_AlgorithmMetadata(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Name", 0), &a->Name))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Version", 0), &a->Version))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Author", 0), &a->Author))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "CodeAuthor", 0), &a->CodeAuthor))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Contact", 0), &a->Contact))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "Categorical", 0), &a->Categorical))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "Absence", 0), &a->Absence))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Overview && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Overview", &a->Overview, "xsd:string"))
				{	soap_flag_Overview--;
					continue;
				}
			if (soap_flag_Description && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Description", &a->Description, "xsd:string"))
				{	soap_flag_Description--;
					continue;
				}
			if (soap_flag_Bibliography && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Bibliography", &a->Bibliography, "xsd:string"))
				{	soap_flag_Bibliography--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmMetadata *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_AlgorithmMetadata, 0, sizeof(struct soap_AlgorithmMetadata), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AlgorithmParameters(struct soap *soap, struct soap_AlgorithmParameters const*a)
{	soap_serialize_soap_AlgorithmParameters(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AlgorithmParameters(struct soap *soap, struct soap_AlgorithmParameters *a)
{	soap_default_soap_AlgorithmParameters(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AlgorithmParameters(struct soap *soap, const struct soap_AlgorithmParameters *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__AlgorithmParameters);
	if (soap_out_om__AlgorithmParameters(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AlgorithmParameters(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmParameters *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AlgorithmParameters), type);
	if (a->__ptrParam)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__AlgorithmParameter(soap, "Param", -1, a->__ptrParam + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmParameters * SOAP_FMAC4 soap_get_om__AlgorithmParameters(struct soap *soap, struct soap_AlgorithmParameters *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AlgorithmParameters(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameters * SOAP_FMAC4 soap_in_om__AlgorithmParameters(struct soap *soap, const char *tag, struct soap_AlgorithmParameters *a, const char *type)
{
	short soap_flag___ptrParam = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AlgorithmParameters *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AlgorithmParameters, sizeof(struct soap_AlgorithmParameters), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__AlgorithmParameters(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrParam && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_AlgorithmParameter *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "Param", 1); a->__size++)
				{	p = (struct soap_AlgorithmParameter *)soap_push_block(soap, sizeof(struct soap_AlgorithmParameter));
					soap_default_om__AlgorithmParameter(soap, p);
					soap_revert(soap);
					if (!soap_in_om__AlgorithmParameter(soap, "Param", p, "om:AlgorithmParameter"))
						break;
					soap_flag___ptrParam = 0;
				}
				a->__ptrParam = (struct soap_AlgorithmParameter *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrParam && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmParameters *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__AlgorithmParameters, 0, sizeof(struct soap_AlgorithmParameters), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AlgorithmParameters(struct soap *soap, const struct soap_AlgorithmParameters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	if (a->__ptrParam)
	{	int i;
		for (i = 0; i < a->__size; i++)
		{
			soap_embedded(soap, a->__ptrParam + i, SOAP_TYPE_om__AlgorithmParameter);
			soap_serialize_om__AlgorithmParameter(soap, a->__ptrParam + i);
		}
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AlgorithmParameters(struct soap *soap, struct soap_AlgorithmParameters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptrParam = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AlgorithmParameters(struct soap *soap, const struct soap_AlgorithmParameters *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_AlgorithmParameters);
	if (soap_out_soap_AlgorithmParameters(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AlgorithmParameters(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmParameters *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AlgorithmParameters), type);
	if (a->__ptrParam)
	{	int i;
		for (i = 0; i < a->__size; i++)
			soap_out_om__AlgorithmParameter(soap, "Param", -1, a->__ptrParam + i, "");
	}
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmParameters * SOAP_FMAC4 soap_get_soap_AlgorithmParameters(struct soap *soap, struct soap_AlgorithmParameters *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AlgorithmParameters(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameters * SOAP_FMAC4 soap_in_soap_AlgorithmParameters(struct soap *soap, const char *tag, struct soap_AlgorithmParameters *a, const char *type)
{
	short soap_flag___ptrParam = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AlgorithmParameters *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AlgorithmParameters, sizeof(struct soap_AlgorithmParameters), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_AlgorithmParameters(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___ptrParam && soap->error == SOAP_TAG_MISMATCH)
			{	struct soap_AlgorithmParameter *p;
				soap_new_block(soap);
				for (a->__size = 0; !soap_element_begin_in(soap, "Param", 1); a->__size++)
				{	p = (struct soap_AlgorithmParameter *)soap_push_block(soap, sizeof(struct soap_AlgorithmParameter));
					soap_default_om__AlgorithmParameter(soap, p);
					soap_revert(soap);
					if (!soap_in_om__AlgorithmParameter(soap, "Param", p, "om:AlgorithmParameter"))
						break;
					soap_flag___ptrParam = 0;
				}
				a->__ptrParam = (struct soap_AlgorithmParameter *)soap_save_block(soap, NULL, 1);
				if (!soap_flag___ptrParam && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmParameters *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_AlgorithmParameters, 0, sizeof(struct soap_AlgorithmParameters), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter const*a)
{	soap_serialize_soap_AlgorithmParameter(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *a)
{	soap_default_soap_AlgorithmParameter(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__AlgorithmParameter(struct soap *soap, const struct soap_AlgorithmParameter *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_om__AlgorithmParameter);
	if (soap_out_om__AlgorithmParameter(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AlgorithmParameter(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmParameter *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", a->Id);
	if (a->Name)
		soap_set_attr(soap, "Name", a->Name);
	if (a->Type)
		soap_set_attr(soap, "Type", a->Type);
	soap_set_attr(soap, "HasMin", soap_int2s(soap, a->HasMin));
	soap_set_attr(soap, "Min", soap_double2s(soap, a->Min));
	soap_set_attr(soap, "HasMax", soap_int2s(soap, a->HasMax));
	soap_set_attr(soap, "Max", soap_double2s(soap, a->Max));
	if (a->Typical)
		soap_set_attr(soap, "Typical", a->Typical);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_om__AlgorithmParameter), type);
	soap_out_xsd__string(soap, "Overview", -1, &a->Overview, "");
	soap_out_xsd__string(soap, "Description", -1, &a->Description, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmParameter * SOAP_FMAC4 soap_get_om__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_om__AlgorithmParameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameter * SOAP_FMAC4 soap_in_om__AlgorithmParameter(struct soap *soap, const char *tag, struct soap_AlgorithmParameter *a, const char *type)
{
	short soap_flag_Overview = 1, soap_flag_Description = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AlgorithmParameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_om__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_om__AlgorithmParameter(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Name", 0), &a->Name))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Type", 0), &a->Type))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "HasMin", 0), &a->HasMin))
		return NULL;
	if (soap_s2double(soap, soap_attr_value(soap, "Min", 0), &a->Min))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "HasMax", 0), &a->HasMax))
		return NULL;
	if (soap_s2double(soap, soap_attr_value(soap, "Max", 0), &a->Max))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Typical", 0), &a->Typical))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Overview && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Overview", &a->Overview, "xsd:string"))
				{	soap_flag_Overview--;
					continue;
				}
			if (soap_flag_Description && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Description", &a->Description, "xsd:string"))
				{	soap_flag_Description--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmParameter *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_om__AlgorithmParameter, 0, sizeof(struct soap_AlgorithmParameter), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_soap_AlgorithmParameter(struct soap *soap, const struct soap_AlgorithmParameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->Overview);
	soap_serialize_xsd__string(soap, &a->Description);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_soap_AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->Id);
	soap_default_xsd__string(soap, &a->Name);
	soap_default_xsd__string(soap, &a->Type);
	soap_default_xsd__string(soap, &a->Overview);
	soap_default_xsd__string(soap, &a->Description);
	soap_default_xsd__int(soap, &a->HasMin);
	soap_default_xsd__double(soap, &a->Min);
	soap_default_xsd__int(soap, &a->HasMax);
	soap_default_xsd__double(soap, &a->Max);
	soap_default_xsd__string(soap, &a->Typical);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_soap_AlgorithmParameter(struct soap *soap, const struct soap_AlgorithmParameter *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_soap_AlgorithmParameter);
	if (soap_out_soap_AlgorithmParameter(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_soap_AlgorithmParameter(struct soap *soap, const char *tag, int id, const struct soap_AlgorithmParameter *a, const char *type)
{
	if (a->Id)
		soap_set_attr(soap, "Id", a->Id);
	if (a->Name)
		soap_set_attr(soap, "Name", a->Name);
	if (a->Type)
		soap_set_attr(soap, "Type", a->Type);
	soap_set_attr(soap, "HasMin", soap_int2s(soap, a->HasMin));
	soap_set_attr(soap, "Min", soap_double2s(soap, a->Min));
	soap_set_attr(soap, "HasMax", soap_int2s(soap, a->HasMax));
	soap_set_attr(soap, "Max", soap_double2s(soap, a->Max));
	if (a->Typical)
		soap_set_attr(soap, "Typical", a->Typical);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_soap_AlgorithmParameter), type);
	soap_out_xsd__string(soap, "Overview", -1, &a->Overview, "");
	soap_out_xsd__string(soap, "Description", -1, &a->Description, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct soap_AlgorithmParameter * SOAP_FMAC4 soap_get_soap_AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *p, const char *tag, const char *type)
{
	if ((p = soap_in_soap_AlgorithmParameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameter * SOAP_FMAC4 soap_in_soap_AlgorithmParameter(struct soap *soap, const char *tag, struct soap_AlgorithmParameter *a, const char *type)
{
	short soap_flag_Overview = 1, soap_flag_Description = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct soap_AlgorithmParameter *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_soap_AlgorithmParameter, sizeof(struct soap_AlgorithmParameter), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_soap_AlgorithmParameter(soap, a);
	if (soap_s2string(soap, soap_attr_value(soap, "Id", 0), &a->Id))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Name", 0), &a->Name))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Type", 0), &a->Type))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "HasMin", 0), &a->HasMin))
		return NULL;
	if (soap_s2double(soap, soap_attr_value(soap, "Min", 0), &a->Min))
		return NULL;
	if (soap_s2int(soap, soap_attr_value(soap, "HasMax", 0), &a->HasMax))
		return NULL;
	if (soap_s2double(soap, soap_attr_value(soap, "Max", 0), &a->Max))
		return NULL;
	if (soap_s2string(soap, soap_attr_value(soap, "Typical", 0), &a->Typical))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Overview && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Overview", &a->Overview, "xsd:string"))
				{	soap_flag_Overview--;
					continue;
				}
			if (soap_flag_Description && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "Description", &a->Description, "xsd:string"))
				{	soap_flag_Description--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmParameter *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_soap_AlgorithmParameter, 0, sizeof(struct soap_AlgorithmParameter), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->om__version);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->om__version);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	soap_out_xsd__string(soap, "om:version", -1, &a->om__version, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	short soap_flag_om__version = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__version && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "om:version", &a->om__version, "xsd:string"))
				{	soap_flag_om__version--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__int(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__int(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__int);
	if (soap_out_PointerToxsd__int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__int(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__int);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToxsd__int(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToxsd__int(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__string(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__string))
		soap_serialize_xsd__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__string(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__string);
	if (soap_out_PointerToxsd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__string(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__string);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerToxsd__string(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerToxsd__string(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Output(struct soap *soap, struct soap_Output *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Output))
		soap_serialize_om__Output(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Output(struct soap *soap, struct soap_Output *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__Output);
	if (soap_out_PointerToom__Output(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Output(struct soap *soap, const char *tag, int id, struct soap_Output *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__Output);
	if (id < 0)
		return soap->error;
	return soap_out_om__Output(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_Output ** SOAP_FMAC4 soap_get_PointerToom__Output(struct soap *soap, struct soap_Output **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Output(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Output ** SOAP_FMAC4 soap_in_PointerToom__Output(struct soap *soap, const char *tag, struct soap_Output **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_Output **)soap_malloc(soap, sizeof(struct soap_Output *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__Output(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_Output **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__Output, sizeof(struct soap_Output), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Algorithm(struct soap *soap, struct soap_Algorithm *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Algorithm))
		soap_serialize_om__Algorithm(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Algorithm(struct soap *soap, struct soap_Algorithm *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__Algorithm);
	if (soap_out_PointerToom__Algorithm(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Algorithm(struct soap *soap, const char *tag, int id, struct soap_Algorithm *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__Algorithm);
	if (id < 0)
		return soap->error;
	return soap_out_om__Algorithm(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_Algorithm ** SOAP_FMAC4 soap_get_PointerToom__Algorithm(struct soap *soap, struct soap_Algorithm **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Algorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Algorithm ** SOAP_FMAC4 soap_in_PointerToom__Algorithm(struct soap *soap, const char *tag, struct soap_Algorithm **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_Algorithm **)soap_malloc(soap, sizeof(struct soap_Algorithm *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__Algorithm(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_Algorithm **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__Algorithm, sizeof(struct soap_Algorithm), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Mask(struct soap *soap, struct soap_Mask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Mask))
		soap_serialize_om__Mask(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Mask(struct soap *soap, struct soap_Mask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__Mask);
	if (soap_out_PointerToom__Mask(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Mask(struct soap *soap, const char *tag, int id, struct soap_Mask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__Mask);
	if (id < 0)
		return soap->error;
	return soap_out_om__Mask(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_Mask ** SOAP_FMAC4 soap_get_PointerToom__Mask(struct soap *soap, struct soap_Mask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Mask(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Mask ** SOAP_FMAC4 soap_in_PointerToom__Mask(struct soap *soap, const char *tag, struct soap_Mask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_Mask **)soap_malloc(soap, sizeof(struct soap_Mask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__Mask(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_Mask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__Mask, sizeof(struct soap_Mask), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Maps(struct soap *soap, struct soap_Maps *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Maps))
		soap_serialize_om__Maps(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Maps(struct soap *soap, struct soap_Maps *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__Maps);
	if (soap_out_PointerToom__Maps(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Maps(struct soap *soap, const char *tag, int id, struct soap_Maps *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__Maps);
	if (id < 0)
		return soap->error;
	return soap_out_om__Maps(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_Maps ** SOAP_FMAC4 soap_get_PointerToom__Maps(struct soap *soap, struct soap_Maps **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Maps(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Maps ** SOAP_FMAC4 soap_in_PointerToom__Maps(struct soap *soap, const char *tag, struct soap_Maps **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_Maps **)soap_malloc(soap, sizeof(struct soap_Maps *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__Maps(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_Maps **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__Maps, sizeof(struct soap_Maps), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Points(struct soap *soap, struct soap_Points *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Points))
		soap_serialize_om__Points(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Points(struct soap *soap, struct soap_Points *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__Points);
	if (soap_out_PointerToom__Points(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Points(struct soap *soap, const char *tag, int id, struct soap_Points *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__Points);
	if (id < 0)
		return soap->error;
	return soap_out_om__Points(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_Points ** SOAP_FMAC4 soap_get_PointerToom__Points(struct soap *soap, struct soap_Points **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Points(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Points ** SOAP_FMAC4 soap_in_PointerToom__Points(struct soap *soap, const char *tag, struct soap_Points **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_Points **)soap_malloc(soap, sizeof(struct soap_Points *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__Points(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_Points **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__Points, sizeof(struct soap_Points), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Parameter(struct soap *soap, struct soap_Parameter *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Parameter))
		soap_serialize_om__Parameter(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Parameter(struct soap *soap, struct soap_Parameter *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__Parameter);
	if (soap_out_PointerToom__Parameter(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Parameter(struct soap *soap, const char *tag, int id, struct soap_Parameter *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__Parameter);
	if (id < 0)
		return soap->error;
	return soap_out_om__Parameter(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_Parameter ** SOAP_FMAC4 soap_get_PointerToom__Parameter(struct soap *soap, struct soap_Parameter **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Parameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Parameter ** SOAP_FMAC4 soap_in_PointerToom__Parameter(struct soap *soap, const char *tag, struct soap_Parameter **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_Parameter **)soap_malloc(soap, sizeof(struct soap_Parameter *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__Parameter(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_Parameter **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__Parameter, sizeof(struct soap_Parameter), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Map(struct soap *soap, struct soap_Map *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Map))
		soap_serialize_om__Map(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Map(struct soap *soap, struct soap_Map *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__Map);
	if (soap_out_PointerToom__Map(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Map(struct soap *soap, const char *tag, int id, struct soap_Map *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__Map);
	if (id < 0)
		return soap->error;
	return soap_out_om__Map(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_Map ** SOAP_FMAC4 soap_get_PointerToom__Map(struct soap *soap, struct soap_Map **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Map(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Map ** SOAP_FMAC4 soap_in_PointerToom__Map(struct soap *soap, const char *tag, struct soap_Map **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_Map **)soap_malloc(soap, sizeof(struct soap_Map *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__Map(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_Map **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__Map, sizeof(struct soap_Map), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__AbsencePoints))
		soap_serialize_om__AbsencePoints(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AbsencePoints(struct soap *soap, struct soap_AbsencePoints *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__AbsencePoints);
	if (soap_out_PointerToom__AbsencePoints(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AbsencePoints(struct soap *soap, const char *tag, int id, struct soap_AbsencePoints *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__AbsencePoints);
	if (id < 0)
		return soap->error;
	return soap_out_om__AbsencePoints(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_AbsencePoints ** SOAP_FMAC4 soap_get_PointerToom__AbsencePoints(struct soap *soap, struct soap_AbsencePoints **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__AbsencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AbsencePoints ** SOAP_FMAC4 soap_in_PointerToom__AbsencePoints(struct soap *soap, const char *tag, struct soap_AbsencePoints **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_AbsencePoints **)soap_malloc(soap, sizeof(struct soap_AbsencePoints *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__AbsencePoints(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_AbsencePoints **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__AbsencePoints, sizeof(struct soap_AbsencePoints), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__PresencePoints(struct soap *soap, struct soap_PresencePoints *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__PresencePoints))
		soap_serialize_om__PresencePoints(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__PresencePoints(struct soap *soap, struct soap_PresencePoints *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__PresencePoints);
	if (soap_out_PointerToom__PresencePoints(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__PresencePoints(struct soap *soap, const char *tag, int id, struct soap_PresencePoints *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__PresencePoints);
	if (id < 0)
		return soap->error;
	return soap_out_om__PresencePoints(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_PresencePoints ** SOAP_FMAC4 soap_get_PointerToom__PresencePoints(struct soap *soap, struct soap_PresencePoints **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__PresencePoints(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_PresencePoints ** SOAP_FMAC4 soap_in_PointerToom__PresencePoints(struct soap *soap, const char *tag, struct soap_PresencePoints **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_PresencePoints **)soap_malloc(soap, sizeof(struct soap_PresencePoints *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__PresencePoints(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_PresencePoints **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__PresencePoints, sizeof(struct soap_PresencePoints), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__Point(struct soap *soap, struct soap_Point *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__Point))
		soap_serialize_om__Point(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__Point(struct soap *soap, struct soap_Point *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__Point);
	if (soap_out_PointerToom__Point(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__Point(struct soap *soap, const char *tag, int id, struct soap_Point *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__Point);
	if (id < 0)
		return soap->error;
	return soap_out_om__Point(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_Point ** SOAP_FMAC4 soap_get_PointerToom__Point(struct soap *soap, struct soap_Point **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__Point(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_Point ** SOAP_FMAC4 soap_in_PointerToom__Point(struct soap *soap, const char *tag, struct soap_Point **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_Point **)soap_malloc(soap, sizeof(struct soap_Point *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__Point(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_Point **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__Point, sizeof(struct soap_Point), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AvailableAlgorithm(struct soap *soap, struct soap_AvailableAlgorithm *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__AvailableAlgorithm))
		soap_serialize_om__AvailableAlgorithm(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AvailableAlgorithm(struct soap *soap, struct soap_AvailableAlgorithm *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__AvailableAlgorithm);
	if (soap_out_PointerToom__AvailableAlgorithm(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AvailableAlgorithm(struct soap *soap, const char *tag, int id, struct soap_AvailableAlgorithm *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__AvailableAlgorithm);
	if (id < 0)
		return soap->error;
	return soap_out_om__AvailableAlgorithm(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_AvailableAlgorithm ** SOAP_FMAC4 soap_get_PointerToom__AvailableAlgorithm(struct soap *soap, struct soap_AvailableAlgorithm **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__AvailableAlgorithm(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AvailableAlgorithm ** SOAP_FMAC4 soap_in_PointerToom__AvailableAlgorithm(struct soap *soap, const char *tag, struct soap_AvailableAlgorithm **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_AvailableAlgorithm **)soap_malloc(soap, sizeof(struct soap_AvailableAlgorithm *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__AvailableAlgorithm(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_AvailableAlgorithm **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__AvailableAlgorithm, sizeof(struct soap_AvailableAlgorithm), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AlgorithmParameters(struct soap *soap, struct soap_AlgorithmParameters *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__AlgorithmParameters))
		soap_serialize_om__AlgorithmParameters(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AlgorithmParameters(struct soap *soap, struct soap_AlgorithmParameters *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__AlgorithmParameters);
	if (soap_out_PointerToom__AlgorithmParameters(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AlgorithmParameters(struct soap *soap, const char *tag, int id, struct soap_AlgorithmParameters *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__AlgorithmParameters);
	if (id < 0)
		return soap->error;
	return soap_out_om__AlgorithmParameters(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_AlgorithmParameters ** SOAP_FMAC4 soap_get_PointerToom__AlgorithmParameters(struct soap *soap, struct soap_AlgorithmParameters **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__AlgorithmParameters(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameters ** SOAP_FMAC4 soap_in_PointerToom__AlgorithmParameters(struct soap *soap, const char *tag, struct soap_AlgorithmParameters **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_AlgorithmParameters **)soap_malloc(soap, sizeof(struct soap_AlgorithmParameters *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__AlgorithmParameters(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmParameters **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__AlgorithmParameters, sizeof(struct soap_AlgorithmParameters), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__AlgorithmMetadata))
		soap_serialize_om__AlgorithmMetadata(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__AlgorithmMetadata);
	if (soap_out_PointerToom__AlgorithmMetadata(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AlgorithmMetadata(struct soap *soap, const char *tag, int id, struct soap_AlgorithmMetadata *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__AlgorithmMetadata);
	if (id < 0)
		return soap->error;
	return soap_out_om__AlgorithmMetadata(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_AlgorithmMetadata ** SOAP_FMAC4 soap_get_PointerToom__AlgorithmMetadata(struct soap *soap, struct soap_AlgorithmMetadata **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__AlgorithmMetadata(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmMetadata ** SOAP_FMAC4 soap_in_PointerToom__AlgorithmMetadata(struct soap *soap, const char *tag, struct soap_AlgorithmMetadata **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_AlgorithmMetadata **)soap_malloc(soap, sizeof(struct soap_AlgorithmMetadata *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__AlgorithmMetadata(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmMetadata **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__AlgorithmMetadata, sizeof(struct soap_AlgorithmMetadata), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_om__AlgorithmParameter))
		soap_serialize_om__AlgorithmParameter(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToom__AlgorithmParameter);
	if (soap_out_PointerToom__AlgorithmParameter(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AlgorithmParameter(struct soap *soap, const char *tag, int id, struct soap_AlgorithmParameter *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_om__AlgorithmParameter);
	if (id < 0)
		return soap->error;
	return soap_out_om__AlgorithmParameter(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct soap_AlgorithmParameter ** SOAP_FMAC4 soap_get_PointerToom__AlgorithmParameter(struct soap *soap, struct soap_AlgorithmParameter **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToom__AlgorithmParameter(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct soap_AlgorithmParameter ** SOAP_FMAC4 soap_in_PointerToom__AlgorithmParameter(struct soap *soap, const char *tag, struct soap_AlgorithmParameter **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct soap_AlgorithmParameter **)soap_malloc(soap, sizeof(struct soap_AlgorithmParameter *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_om__AlgorithmParameter(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct soap_AlgorithmParameter **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_om__AlgorithmParameter, sizeof(struct soap_AlgorithmParameter), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (soap_out_xsd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */
