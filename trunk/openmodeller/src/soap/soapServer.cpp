/* soapServer.cpp
   Generated by gSOAP 2.5.2 from om_soap.hh
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#include "soapH.h"

SOAP_BEGIN_NAMESPACE(soap)

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.5.2 2004-09-28 20:13:56 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = SOAP_MAXKEEPALIVE;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			soap_closesock(soap);
			continue;
		}
		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_peek_element(soap))
			return soap_send_fault(soap);
		if (!soap_match_tag(soap, soap->tag, "om:getAlgorithms"))
			soap_serve_om__getAlgorithms(soap);
		else if (!soap_match_tag(soap, soap->tag, "om:createModel"))
			soap_serve_om__createModel(soap);
		else if (!soap_match_tag(soap, soap->tag, "om:getDistributionMap"))
			soap_serve_om__getDistributionMap(soap);
		else if (!soap_match_tag(soap, soap->tag, "om:ping"))
			soap_serve_om__ping(soap);
		else 
			soap->error = SOAP_NO_METHOD;
		if (soap->error)
			return soap_send_fault(soap);
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__getAlgorithms(struct soap *soap)
{	struct om__getAlgorithms soap_tmp_om__getAlgorithms;
	struct om__getAlgorithmsResponse r;
	soap_default_om__getAlgorithmsResponse(soap, &r);
	soap_default_om__getAlgorithms(soap, &soap_tmp_om__getAlgorithms);
	soap->encodingStyle = NULL;
	soap_get_om__getAlgorithms(soap, &soap_tmp_om__getAlgorithms, "om:getAlgorithms", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = om__getAlgorithms(soap, soap_tmp_om__getAlgorithms._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_om__getAlgorithmsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_om__getAlgorithmsResponse(soap, &r, "om:getAlgorithmsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__getAlgorithmsResponse(soap, &r, "om:getAlgorithmsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__createModel(struct soap *soap)
{	struct om__createModel soap_tmp_om__createModel;
	struct om__createModelResponse soap_tmp_om__createModelResponse;
	char * soap_tmp_xsd__string;
	soap_default_om__createModelResponse(soap, &soap_tmp_om__createModelResponse);
	soap_default_xsd__string(soap, &soap_tmp_xsd__string);
	soap_tmp_om__createModelResponse.ticket = &soap_tmp_xsd__string;
	soap_default_om__createModel(soap, &soap_tmp_om__createModel);
	soap->encodingStyle = NULL;
	soap_get_om__createModel(soap, &soap_tmp_om__createModel, "om:createModel", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = om__createModel(soap, soap_tmp_om__createModel.points, soap_tmp_om__createModel.maps, soap_tmp_om__createModel.mask, soap_tmp_om__createModel.algorithm, soap_tmp_om__createModel.output, &soap_tmp_xsd__string);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_om__createModelResponse(soap, &soap_tmp_om__createModelResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_om__createModelResponse(soap, &soap_tmp_om__createModelResponse, "om:createModelResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__createModelResponse(soap, &soap_tmp_om__createModelResponse, "om:createModelResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__getDistributionMap(struct soap *soap)
{	struct om__getDistributionMap soap_tmp_om__getDistributionMap;
	struct om__getDistributionMapResponse soap_tmp_om__getDistributionMapResponse;
	soap_default_om__getDistributionMapResponse(soap, &soap_tmp_om__getDistributionMapResponse);
	soap_default_om__getDistributionMap(soap, &soap_tmp_om__getDistributionMap);
	soap->encodingStyle = NULL;
	soap_get_om__getDistributionMap(soap, &soap_tmp_om__getDistributionMap, "om:getDistributionMap", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = om__getDistributionMap(soap, soap_tmp_om__getDistributionMap.ticket, soap_tmp_om__getDistributionMapResponse.file);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_om__getDistributionMapResponse(soap, &soap_tmp_om__getDistributionMapResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_om__getDistributionMapResponse(soap, &soap_tmp_om__getDistributionMapResponse, "om:getDistributionMapResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__getDistributionMapResponse(soap, &soap_tmp_om__getDistributionMapResponse, "om:getDistributionMapResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__ping(struct soap *soap)
{	struct om__ping soap_tmp_om__ping;
	struct om__pingResponse soap_tmp_om__pingResponse;
	int soap_tmp_xsd__int;
	soap_default_om__pingResponse(soap, &soap_tmp_om__pingResponse);
	soap_default_xsd__int(soap, &soap_tmp_xsd__int);
	soap_tmp_om__pingResponse.status = &soap_tmp_xsd__int;
	soap_default_om__ping(soap, &soap_tmp_om__ping);
	soap->encodingStyle = NULL;
	soap_get_om__ping(soap, &soap_tmp_om__ping, "om:ping", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_getattachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = om__ping(soap, soap_tmp_om__ping._, &soap_tmp_xsd__int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_om__pingResponse(soap, &soap_tmp_om__pingResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_om__pingResponse(soap, &soap_tmp_om__pingResponse, "om:pingResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__pingResponse(soap, &soap_tmp_om__pingResponse, "om:pingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
#ifndef WITH_LEANER
	 || soap_putattachments(soap)
#endif
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap)

/* end of soapServer.cpp */
