/* soapClient.cpp
   Generated by gSOAP 2.8.13 from om_soap.hh

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.13 2013-04-09 14:09:28 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__ping(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int &status)
{	struct omws__ping soap_tmp_omws__ping;
	struct omws__pingResponse *soap_tmp_omws__pingResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__ping._ = _;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__ping(soap, &soap_tmp_omws__ping);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__ping(soap, &soap_tmp_omws__ping, "omws:ping", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__ping(soap, &soap_tmp_omws__ping, "omws:ping", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&status)
		return soap_closesock(soap);
	soap_default_xsd__int(soap, &status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__pingResponse = soap_get_omws__pingResponse(soap, NULL, "omws:pingResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	status = soap_tmp_omws__pingResponse->status;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getAlgorithms(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct omws__getAlgorithmsResponse *out)
{	struct omws__getAlgorithms soap_tmp_omws__getAlgorithms;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getAlgorithms._ = _;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getAlgorithms(soap, &soap_tmp_omws__getAlgorithms);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getAlgorithms(soap, &soap_tmp_omws__getAlgorithms, "omws:getAlgorithms", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getAlgorithms(soap, &soap_tmp_omws__getAlgorithms, "omws:getAlgorithms", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__getAlgorithmsResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__getAlgorithmsResponse(soap, out, "omws:getAlgorithmsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getLayers(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct omws__getLayersResponse *out)
{	struct omws__getLayers soap_tmp_omws__getLayers;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getLayers._ = _;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getLayers(soap, &soap_tmp_omws__getLayers);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getLayers(soap, &soap_tmp_omws__getLayers, "omws:getLayers", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getLayers(soap, &soap_tmp_omws__getLayers, "omws:getLayers", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__getLayersResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__getLayersResponse(soap, out, "omws:getLayersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__createModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, wchar_t *om__ModelParameters, char *&ticket)
{	struct omws__createModel soap_tmp_omws__createModel;
	struct omws__createModelResponse *soap_tmp_omws__createModelResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__createModel.om__ModelParameters = om__ModelParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__createModel(soap, &soap_tmp_omws__createModel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__createModel(soap, &soap_tmp_omws__createModel, "omws:createModel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__createModel(soap, &soap_tmp_omws__createModel, "omws:createModel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	ticket = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__createModelResponse = soap_get_omws__createModelResponse(soap, NULL, "omws:createModelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ticket = soap_tmp_omws__createModelResponse->ticket;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, struct omws__getModelResponse *out)
{	struct omws__getModel soap_tmp_omws__getModel;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getModel.ticket = ticket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getModel(soap, &soap_tmp_omws__getModel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getModel(soap, &soap_tmp_omws__getModel, "omws:getModel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getModel(soap, &soap_tmp_omws__getModel, "omws:getModel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__getModelResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__getModelResponse(soap, out, "omws:getModelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__testModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, wchar_t *om__TestParameters, char *&ticket)
{	struct omws__testModel soap_tmp_omws__testModel;
	struct omws__testModelResponse *soap_tmp_omws__testModelResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__testModel.om__TestParameters = om__TestParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__testModel(soap, &soap_tmp_omws__testModel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__testModel(soap, &soap_tmp_omws__testModel, "omws:testModel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__testModel(soap, &soap_tmp_omws__testModel, "omws:testModel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	ticket = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__testModelResponse = soap_get_omws__testModelResponse(soap, NULL, "omws:testModelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ticket = soap_tmp_omws__testModelResponse->ticket;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getTestResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, struct omws__testResponse *out)
{	struct omws__getTestResult soap_tmp_omws__getTestResult;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getTestResult.ticket = ticket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getTestResult(soap, &soap_tmp_omws__getTestResult);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getTestResult(soap, &soap_tmp_omws__getTestResult, "omws:getTestResult", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getTestResult(soap, &soap_tmp_omws__getTestResult, "omws:getTestResult", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__testResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__testResponse(soap, out, "omws:testResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__projectModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, wchar_t *om__ProjectionParameters, char *&ticket)
{	struct omws__projectModel soap_tmp_omws__projectModel;
	struct omws__projectModelResponse *soap_tmp_omws__projectModelResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__projectModel.om__ProjectionParameters = om__ProjectionParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__projectModel(soap, &soap_tmp_omws__projectModel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__projectModel(soap, &soap_tmp_omws__projectModel, "omws:projectModel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__projectModel(soap, &soap_tmp_omws__projectModel, "omws:projectModel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	ticket = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__projectModelResponse = soap_get_omws__projectModelResponse(soap, NULL, "omws:projectModelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ticket = soap_tmp_omws__projectModelResponse->ticket;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getProgress(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *tickets, char *&progress)
{	struct omws__getProgress soap_tmp_omws__getProgress;
	struct omws__getProgressResponse *soap_tmp_omws__getProgressResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getProgress.tickets = tickets;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getProgress(soap, &soap_tmp_omws__getProgress);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getProgress(soap, &soap_tmp_omws__getProgress, "omws:getProgress", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getProgress(soap, &soap_tmp_omws__getProgress, "omws:getProgress", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	progress = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__getProgressResponse = soap_get_omws__getProgressResponse(soap, NULL, "omws:getProgressResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	progress = soap_tmp_omws__getProgressResponse->progress;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getLog(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, char *&log)
{	struct omws__getLog soap_tmp_omws__getLog;
	struct omws__getLogResponse *soap_tmp_omws__getLogResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getLog.ticket = ticket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getLog(soap, &soap_tmp_omws__getLog);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getLog(soap, &soap_tmp_omws__getLog, "omws:getLog", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getLog(soap, &soap_tmp_omws__getLog, "omws:getLog", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	log = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__getLogResponse = soap_get_omws__getLogResponse(soap, NULL, "omws:getLogResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	log = soap_tmp_omws__getLogResponse->log;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getLayerAsUrl(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *id, char *&url)
{	struct omws__getLayerAsUrl soap_tmp_omws__getLayerAsUrl;
	struct omws__getLayerAsUrlResponse *soap_tmp_omws__getLayerAsUrlResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getLayerAsUrl.id = id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getLayerAsUrl(soap, &soap_tmp_omws__getLayerAsUrl);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getLayerAsUrl(soap, &soap_tmp_omws__getLayerAsUrl, "omws:getLayerAsUrl", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getLayerAsUrl(soap, &soap_tmp_omws__getLayerAsUrl, "omws:getLayerAsUrl", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	url = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__getLayerAsUrlResponse = soap_get_omws__getLayerAsUrlResponse(soap, NULL, "omws:getLayerAsUrlResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	url = soap_tmp_omws__getLayerAsUrlResponse->url;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getProjectionMetadata(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, struct omws__getProjectionMetadataResponse *out)
{	struct omws__getProjectionMetadata soap_tmp_omws__getProjectionMetadata;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getProjectionMetadata.ticket = ticket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getProjectionMetadata(soap, &soap_tmp_omws__getProjectionMetadata);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getProjectionMetadata(soap, &soap_tmp_omws__getProjectionMetadata, "omws:getProjectionMetadata", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getProjectionMetadata(soap, &soap_tmp_omws__getProjectionMetadata, "omws:getProjectionMetadata", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__getProjectionMetadataResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__getProjectionMetadataResponse(soap, out, "omws:getProjectionMetadataResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__evaluateModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, wchar_t *om__ModelEvaluationParameters, char *&ticket)
{	struct omws__evaluateModel soap_tmp_omws__evaluateModel;
	struct omws__evaluateModelResponse *soap_tmp_omws__evaluateModelResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__evaluateModel.om__ModelEvaluationParameters = om__ModelEvaluationParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__evaluateModel(soap, &soap_tmp_omws__evaluateModel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__evaluateModel(soap, &soap_tmp_omws__evaluateModel, "omws:evaluateModel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__evaluateModel(soap, &soap_tmp_omws__evaluateModel, "omws:evaluateModel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	ticket = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__evaluateModelResponse = soap_get_omws__evaluateModelResponse(soap, NULL, "omws:evaluateModelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ticket = soap_tmp_omws__evaluateModelResponse->ticket;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getModelEvaluation(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, struct omws__modelEvaluationResponse *out)
{	struct omws__getModelEvaluation soap_tmp_omws__getModelEvaluation;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getModelEvaluation.ticket = ticket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getModelEvaluation(soap, &soap_tmp_omws__getModelEvaluation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getModelEvaluation(soap, &soap_tmp_omws__getModelEvaluation, "omws:getModelEvaluation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getModelEvaluation(soap, &soap_tmp_omws__getModelEvaluation, "omws:getModelEvaluation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__modelEvaluationResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__modelEvaluationResponse(soap, out, "omws:modelEvaluationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__samplePoints(struct soap *soap, const char *soap_endpoint, const char *soap_action, wchar_t *om__SamplingParameters, char *&ticket)
{	struct omws__samplePoints soap_tmp_omws__samplePoints;
	struct omws__samplePointsResponse *soap_tmp_omws__samplePointsResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__samplePoints.om__SamplingParameters = om__SamplingParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__samplePoints(soap, &soap_tmp_omws__samplePoints);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__samplePoints(soap, &soap_tmp_omws__samplePoints, "omws:samplePoints", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__samplePoints(soap, &soap_tmp_omws__samplePoints, "omws:samplePoints", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	ticket = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__samplePointsResponse = soap_get_omws__samplePointsResponse(soap, NULL, "omws:samplePointsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	ticket = soap_tmp_omws__samplePointsResponse->ticket;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getSamplingResult(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, struct omws__getSamplingResultResponse *out)
{	struct omws__getSamplingResult soap_tmp_omws__getSamplingResult;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getSamplingResult.ticket = ticket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getSamplingResult(soap, &soap_tmp_omws__getSamplingResult);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getSamplingResult(soap, &soap_tmp_omws__getSamplingResult, "omws:getSamplingResult", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getSamplingResult(soap, &soap_tmp_omws__getSamplingResult, "omws:getSamplingResult", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__getSamplingResultResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__getSamplingResultResponse(soap, out, "omws:getSamplingResultResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__runExperiment(struct soap *soap, const char *soap_endpoint, const char *soap_action, wchar_t *om__ExperimentParameters, struct omws__runExperimentResponse *out)
{	struct omws__runExperiment soap_tmp_omws__runExperiment;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__runExperiment.om__ExperimentParameters = om__ExperimentParameters;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__runExperiment(soap, &soap_tmp_omws__runExperiment);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__runExperiment(soap, &soap_tmp_omws__runExperiment, "omws:runExperiment", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__runExperiment(soap, &soap_tmp_omws__runExperiment, "omws:runExperiment", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__runExperimentResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__runExperimentResponse(soap, out, "omws:runExperimentResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getResults(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *tickets, struct omws__getResultsResponse *out)
{	struct omws__getResults soap_tmp_omws__getResults;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__getResults.tickets = tickets;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__getResults(soap, &soap_tmp_omws__getResults);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__getResults(soap, &soap_tmp_omws__getResults, "omws:getResults", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__getResults(soap, &soap_tmp_omws__getResults, "omws:getResults", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!out)
		return soap_closesock(soap);
	soap_default_omws__getResultsResponse(soap, out);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_omws__getResultsResponse(soap, out, "omws:getResultsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__cancel(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *tickets, char *&cancelledTickets)
{	struct omws__cancel soap_tmp_omws__cancel;
	struct omws__cancelResponse *soap_tmp_omws__cancelResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://modeller.cria.org.br/ws2/om";
	soap->encodingStyle = NULL;
	soap_tmp_omws__cancel.tickets = tickets;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_omws__cancel(soap, &soap_tmp_omws__cancel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_omws__cancel(soap, &soap_tmp_omws__cancel, "omws:cancel", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_omws__cancel(soap, &soap_tmp_omws__cancel, "omws:cancel", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	cancelledTickets = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_omws__cancelResponse = soap_get_omws__cancelResponse(soap, NULL, "omws:cancelResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	cancelledTickets = soap_tmp_omws__cancelResponse->cancelledTickets;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
