/* omwsH.h
   Generated by gSOAP 2.8.15 from omws_api.hh

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef omwsH_H
#define omwsH_H
#include "omwsStub.h"

namespace omws {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 omws_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 omws_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_omws_byte
#define SOAP_TYPE_omws_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( omws::soap_serialize_byte(soap, data), soap_begin_send(soap) || omws::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_xsd__int
#define SOAP_TYPE_omws_xsd__int (11)
#endif

#define soap_default_xsd__int(soap, a) soap_default_int(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( omws::soap_serialize_xsd__int(soap, data), soap_begin_send(soap) || omws::soap_put_xsd__int(soap, data, "xsd:int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_int
#define SOAP_TYPE_omws_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( omws::soap_serialize_int(soap, data), soap_begin_send(soap) || omws::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_xsd__double
#define SOAP_TYPE_omws_xsd__double (10)
#endif

#define soap_default_xsd__double(soap, a) soap_default_double(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( omws::soap_serialize_xsd__double(soap, data), soap_begin_send(soap) || omws::soap_put_xsd__double(soap, data, "xsd:double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_xsd__double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_double
#define SOAP_TYPE_omws_double (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( omws::soap_serialize_double(soap, data), soap_begin_send(soap) || omws::soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_xsd__string
#define SOAP_TYPE_omws_xsd__string (8)
#endif

#define soap_default_xsd__string(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_serialize_xsd__string(soap, data), soap_begin_send(soap) || soap_put_xsd__string(soap, data, "xsd:string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__string soap_instantiate_std__string


#define soap_copy_xsd__string soap_copy_std__string

#ifndef SOAP_TYPE_omws_std__string
#define SOAP_TYPE_omws_std__string (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_omws_SOAP_ENV__Fault
#define SOAP_TYPE_omws_SOAP_ENV__Fault (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( omws::soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || omws::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_omws_SOAP_ENV__Reason
#define SOAP_TYPE_omws_SOAP_ENV__Reason (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( omws::soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || omws::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_omws_SOAP_ENV__Detail
#define SOAP_TYPE_omws_SOAP_ENV__Detail (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( omws::soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || omws::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_omws_SOAP_ENV__Code
#define SOAP_TYPE_omws_SOAP_ENV__Code (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( omws::soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || omws::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_omws_omws__cancel
#define SOAP_TYPE_omws_omws__cancel (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__cancel(struct soap*, struct omws__cancel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__cancel(struct soap*, const struct omws__cancel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__cancel(struct soap*, const char*, int, const struct omws__cancel *, const char*);
SOAP_FMAC3 struct omws__cancel * SOAP_FMAC4 soap_in_omws__cancel(struct soap*, const char*, struct omws__cancel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__cancel(struct soap*, const struct omws__cancel *, const char*, const char*);

#ifndef soap_write_omws__cancel
#define soap_write_omws__cancel(soap, data) ( omws::soap_serialize_omws__cancel(soap, data), soap_begin_send(soap) || omws::soap_put_omws__cancel(soap, data, "omws:cancel", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__cancel * SOAP_FMAC4 soap_get_omws__cancel(struct soap*, struct omws__cancel *, const char*, const char*);

#ifndef soap_read_omws__cancel
#define soap_read_omws__cancel(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__cancel(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__cancel * SOAP_FMAC2 soap_instantiate_omws__cancel(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__cancel * soap_new_omws__cancel(struct soap *soap, int n = -1) { return soap_instantiate_omws__cancel(soap, n, NULL, NULL, NULL); }

inline struct omws__cancel * soap_new_req_omws__cancel(struct soap *soap, std::string& tickets) { struct omws__cancel *_p = soap_instantiate_omws__cancel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__cancel(soap, _p); _p->tickets = tickets; } return _p; }

inline struct omws__cancel * soap_new_set_omws__cancel(struct soap *soap, std::string& tickets) { struct omws__cancel *_p = soap_instantiate_omws__cancel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__cancel(soap, _p); _p->tickets = tickets; } return _p; }

inline void soap_delete_omws__cancel(struct soap *soap, struct omws__cancel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__cancel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__cancelResponse
#define SOAP_TYPE_omws_omws__cancelResponse (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__cancelResponse(struct soap*, struct omws__cancelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__cancelResponse(struct soap*, const struct omws__cancelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__cancelResponse(struct soap*, const char*, int, const struct omws__cancelResponse *, const char*);
SOAP_FMAC3 struct omws__cancelResponse * SOAP_FMAC4 soap_in_omws__cancelResponse(struct soap*, const char*, struct omws__cancelResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__cancelResponse(struct soap*, const struct omws__cancelResponse *, const char*, const char*);

#ifndef soap_write_omws__cancelResponse
#define soap_write_omws__cancelResponse(soap, data) ( omws::soap_serialize_omws__cancelResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__cancelResponse(soap, data, "omws:cancelResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__cancelResponse * SOAP_FMAC4 soap_get_omws__cancelResponse(struct soap*, struct omws__cancelResponse *, const char*, const char*);

#ifndef soap_read_omws__cancelResponse
#define soap_read_omws__cancelResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__cancelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__cancelResponse * SOAP_FMAC2 soap_instantiate_omws__cancelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__cancelResponse * soap_new_omws__cancelResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__cancelResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__cancelResponse * soap_new_req_omws__cancelResponse(struct soap *soap, std::string& cancelledTickets) { struct omws__cancelResponse *_p = soap_instantiate_omws__cancelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__cancelResponse(soap, _p); _p->cancelledTickets = cancelledTickets; } return _p; }

inline struct omws__cancelResponse * soap_new_set_omws__cancelResponse(struct soap *soap, std::string& cancelledTickets) { struct omws__cancelResponse *_p = soap_instantiate_omws__cancelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__cancelResponse(soap, _p); _p->cancelledTickets = cancelledTickets; } return _p; }

inline void soap_delete_omws__cancelResponse(struct soap *soap, struct omws__cancelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__cancelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getResults
#define SOAP_TYPE_omws_omws__getResults (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getResults(struct soap*, struct omws__getResults *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getResults(struct soap*, const struct omws__getResults *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getResults(struct soap*, const char*, int, const struct omws__getResults *, const char*);
SOAP_FMAC3 struct omws__getResults * SOAP_FMAC4 soap_in_omws__getResults(struct soap*, const char*, struct omws__getResults *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getResults(struct soap*, const struct omws__getResults *, const char*, const char*);

#ifndef soap_write_omws__getResults
#define soap_write_omws__getResults(soap, data) ( omws::soap_serialize_omws__getResults(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getResults(soap, data, "omws:getResults", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getResults * SOAP_FMAC4 soap_get_omws__getResults(struct soap*, struct omws__getResults *, const char*, const char*);

#ifndef soap_read_omws__getResults
#define soap_read_omws__getResults(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getResults(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getResults * SOAP_FMAC2 soap_instantiate_omws__getResults(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getResults * soap_new_omws__getResults(struct soap *soap, int n = -1) { return soap_instantiate_omws__getResults(soap, n, NULL, NULL, NULL); }

inline struct omws__getResults * soap_new_req_omws__getResults(struct soap *soap, std::string& tickets) { struct omws__getResults *_p = soap_instantiate_omws__getResults(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getResults(soap, _p); _p->tickets = tickets; } return _p; }

inline struct omws__getResults * soap_new_set_omws__getResults(struct soap *soap, std::string& tickets) { struct omws__getResults *_p = soap_instantiate_omws__getResults(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getResults(soap, _p); _p->tickets = tickets; } return _p; }

inline void soap_delete_omws__getResults(struct soap *soap, struct omws__getResults *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getResults(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getResultsResponse
#define SOAP_TYPE_omws_omws__getResultsResponse (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getResultsResponse(struct soap*, struct omws__getResultsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getResultsResponse(struct soap*, const struct omws__getResultsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getResultsResponse(struct soap*, const char*, int, const struct omws__getResultsResponse *, const char*);
SOAP_FMAC3 struct omws__getResultsResponse * SOAP_FMAC4 soap_in_omws__getResultsResponse(struct soap*, const char*, struct omws__getResultsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getResultsResponse(struct soap*, const struct omws__getResultsResponse *, const char*, const char*);

#ifndef soap_write_omws__getResultsResponse
#define soap_write_omws__getResultsResponse(soap, data) ( omws::soap_serialize_omws__getResultsResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getResultsResponse(soap, data, "omws:getResultsResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getResultsResponse * SOAP_FMAC4 soap_get_omws__getResultsResponse(struct soap*, struct omws__getResultsResponse *, const char*, const char*);

#ifndef soap_read_omws__getResultsResponse
#define soap_read_omws__getResultsResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getResultsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getResultsResponse * SOAP_FMAC2 soap_instantiate_omws__getResultsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getResultsResponse * soap_new_omws__getResultsResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getResultsResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getResultsResponse * soap_new_req_omws__getResultsResponse(struct soap *soap) { struct omws__getResultsResponse *_p = soap_instantiate_omws__getResultsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getResultsResponse(soap, _p); } return _p; }

inline struct omws__getResultsResponse * soap_new_set_omws__getResultsResponse(struct soap *soap, wchar_t *om__ResultSet) { struct omws__getResultsResponse *_p = soap_instantiate_omws__getResultsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getResultsResponse(soap, _p); _p->om__ResultSet = om__ResultSet; } return _p; }

inline void soap_delete_omws__getResultsResponse(struct soap *soap, struct omws__getResultsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getResultsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__runExperiment
#define SOAP_TYPE_omws_omws__runExperiment (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__runExperiment(struct soap*, struct omws__runExperiment *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__runExperiment(struct soap*, const struct omws__runExperiment *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__runExperiment(struct soap*, const char*, int, const struct omws__runExperiment *, const char*);
SOAP_FMAC3 struct omws__runExperiment * SOAP_FMAC4 soap_in_omws__runExperiment(struct soap*, const char*, struct omws__runExperiment *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__runExperiment(struct soap*, const struct omws__runExperiment *, const char*, const char*);

#ifndef soap_write_omws__runExperiment
#define soap_write_omws__runExperiment(soap, data) ( omws::soap_serialize_omws__runExperiment(soap, data), soap_begin_send(soap) || omws::soap_put_omws__runExperiment(soap, data, "omws:runExperiment", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__runExperiment * SOAP_FMAC4 soap_get_omws__runExperiment(struct soap*, struct omws__runExperiment *, const char*, const char*);

#ifndef soap_read_omws__runExperiment
#define soap_read_omws__runExperiment(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__runExperiment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__runExperiment * SOAP_FMAC2 soap_instantiate_omws__runExperiment(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__runExperiment * soap_new_omws__runExperiment(struct soap *soap, int n = -1) { return soap_instantiate_omws__runExperiment(soap, n, NULL, NULL, NULL); }

inline struct omws__runExperiment * soap_new_req_omws__runExperiment(struct soap *soap) { struct omws__runExperiment *_p = soap_instantiate_omws__runExperiment(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__runExperiment(soap, _p); } return _p; }

inline struct omws__runExperiment * soap_new_set_omws__runExperiment(struct soap *soap, char *om__ExperimentParameters) { struct omws__runExperiment *_p = soap_instantiate_omws__runExperiment(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__runExperiment(soap, _p); _p->om__ExperimentParameters = om__ExperimentParameters; } return _p; }

inline void soap_delete_omws__runExperiment(struct soap *soap, struct omws__runExperiment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__runExperiment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__runExperimentResponse
#define SOAP_TYPE_omws_omws__runExperimentResponse (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__runExperimentResponse(struct soap*, struct omws__runExperimentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__runExperimentResponse(struct soap*, const struct omws__runExperimentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__runExperimentResponse(struct soap*, const char*, int, const struct omws__runExperimentResponse *, const char*);
SOAP_FMAC3 struct omws__runExperimentResponse * SOAP_FMAC4 soap_in_omws__runExperimentResponse(struct soap*, const char*, struct omws__runExperimentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__runExperimentResponse(struct soap*, const struct omws__runExperimentResponse *, const char*, const char*);

#ifndef soap_write_omws__runExperimentResponse
#define soap_write_omws__runExperimentResponse(soap, data) ( omws::soap_serialize_omws__runExperimentResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__runExperimentResponse(soap, data, "omws:runExperimentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__runExperimentResponse * SOAP_FMAC4 soap_get_omws__runExperimentResponse(struct soap*, struct omws__runExperimentResponse *, const char*, const char*);

#ifndef soap_read_omws__runExperimentResponse
#define soap_read_omws__runExperimentResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__runExperimentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__runExperimentResponse * SOAP_FMAC2 soap_instantiate_omws__runExperimentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__runExperimentResponse * soap_new_omws__runExperimentResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__runExperimentResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__runExperimentResponse * soap_new_req_omws__runExperimentResponse(struct soap *soap) { struct omws__runExperimentResponse *_p = soap_instantiate_omws__runExperimentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__runExperimentResponse(soap, _p); } return _p; }

inline struct omws__runExperimentResponse * soap_new_set_omws__runExperimentResponse(struct soap *soap, wchar_t *om__ExperimentTickets) { struct omws__runExperimentResponse *_p = soap_instantiate_omws__runExperimentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__runExperimentResponse(soap, _p); _p->om__ExperimentTickets = om__ExperimentTickets; } return _p; }

inline void soap_delete_omws__runExperimentResponse(struct soap *soap, struct omws__runExperimentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__runExperimentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getSamplingResult
#define SOAP_TYPE_omws_omws__getSamplingResult (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getSamplingResult(struct soap*, struct omws__getSamplingResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getSamplingResult(struct soap*, const struct omws__getSamplingResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getSamplingResult(struct soap*, const char*, int, const struct omws__getSamplingResult *, const char*);
SOAP_FMAC3 struct omws__getSamplingResult * SOAP_FMAC4 soap_in_omws__getSamplingResult(struct soap*, const char*, struct omws__getSamplingResult *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getSamplingResult(struct soap*, const struct omws__getSamplingResult *, const char*, const char*);

#ifndef soap_write_omws__getSamplingResult
#define soap_write_omws__getSamplingResult(soap, data) ( omws::soap_serialize_omws__getSamplingResult(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getSamplingResult(soap, data, "omws:getSamplingResult", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getSamplingResult * SOAP_FMAC4 soap_get_omws__getSamplingResult(struct soap*, struct omws__getSamplingResult *, const char*, const char*);

#ifndef soap_read_omws__getSamplingResult
#define soap_read_omws__getSamplingResult(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getSamplingResult(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getSamplingResult * SOAP_FMAC2 soap_instantiate_omws__getSamplingResult(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getSamplingResult * soap_new_omws__getSamplingResult(struct soap *soap, int n = -1) { return soap_instantiate_omws__getSamplingResult(soap, n, NULL, NULL, NULL); }

inline struct omws__getSamplingResult * soap_new_req_omws__getSamplingResult(struct soap *soap, std::string& ticket) { struct omws__getSamplingResult *_p = soap_instantiate_omws__getSamplingResult(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getSamplingResult(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__getSamplingResult * soap_new_set_omws__getSamplingResult(struct soap *soap, std::string& ticket) { struct omws__getSamplingResult *_p = soap_instantiate_omws__getSamplingResult(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getSamplingResult(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__getSamplingResult(struct soap *soap, struct omws__getSamplingResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getSamplingResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getSamplingResultResponse
#define SOAP_TYPE_omws_omws__getSamplingResultResponse (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getSamplingResultResponse(struct soap*, struct omws__getSamplingResultResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getSamplingResultResponse(struct soap*, const struct omws__getSamplingResultResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getSamplingResultResponse(struct soap*, const char*, int, const struct omws__getSamplingResultResponse *, const char*);
SOAP_FMAC3 struct omws__getSamplingResultResponse * SOAP_FMAC4 soap_in_omws__getSamplingResultResponse(struct soap*, const char*, struct omws__getSamplingResultResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getSamplingResultResponse(struct soap*, const struct omws__getSamplingResultResponse *, const char*, const char*);

#ifndef soap_write_omws__getSamplingResultResponse
#define soap_write_omws__getSamplingResultResponse(soap, data) ( omws::soap_serialize_omws__getSamplingResultResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getSamplingResultResponse(soap, data, "omws:getSamplingResultResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getSamplingResultResponse * SOAP_FMAC4 soap_get_omws__getSamplingResultResponse(struct soap*, struct omws__getSamplingResultResponse *, const char*, const char*);

#ifndef soap_read_omws__getSamplingResultResponse
#define soap_read_omws__getSamplingResultResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getSamplingResultResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getSamplingResultResponse * SOAP_FMAC2 soap_instantiate_omws__getSamplingResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getSamplingResultResponse * soap_new_omws__getSamplingResultResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getSamplingResultResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getSamplingResultResponse * soap_new_req_omws__getSamplingResultResponse(struct soap *soap) { struct omws__getSamplingResultResponse *_p = soap_instantiate_omws__getSamplingResultResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getSamplingResultResponse(soap, _p); } return _p; }

inline struct omws__getSamplingResultResponse * soap_new_set_omws__getSamplingResultResponse(struct soap *soap, wchar_t *om__Sampler) { struct omws__getSamplingResultResponse *_p = soap_instantiate_omws__getSamplingResultResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getSamplingResultResponse(soap, _p); _p->om__Sampler = om__Sampler; } return _p; }

inline void soap_delete_omws__getSamplingResultResponse(struct soap *soap, struct omws__getSamplingResultResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getSamplingResultResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__samplePoints
#define SOAP_TYPE_omws_omws__samplePoints (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__samplePoints(struct soap*, struct omws__samplePoints *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__samplePoints(struct soap*, const struct omws__samplePoints *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__samplePoints(struct soap*, const char*, int, const struct omws__samplePoints *, const char*);
SOAP_FMAC3 struct omws__samplePoints * SOAP_FMAC4 soap_in_omws__samplePoints(struct soap*, const char*, struct omws__samplePoints *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__samplePoints(struct soap*, const struct omws__samplePoints *, const char*, const char*);

#ifndef soap_write_omws__samplePoints
#define soap_write_omws__samplePoints(soap, data) ( omws::soap_serialize_omws__samplePoints(soap, data), soap_begin_send(soap) || omws::soap_put_omws__samplePoints(soap, data, "omws:samplePoints", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__samplePoints * SOAP_FMAC4 soap_get_omws__samplePoints(struct soap*, struct omws__samplePoints *, const char*, const char*);

#ifndef soap_read_omws__samplePoints
#define soap_read_omws__samplePoints(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__samplePoints(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__samplePoints * SOAP_FMAC2 soap_instantiate_omws__samplePoints(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__samplePoints * soap_new_omws__samplePoints(struct soap *soap, int n = -1) { return soap_instantiate_omws__samplePoints(soap, n, NULL, NULL, NULL); }

inline struct omws__samplePoints * soap_new_req_omws__samplePoints(struct soap *soap) { struct omws__samplePoints *_p = soap_instantiate_omws__samplePoints(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__samplePoints(soap, _p); } return _p; }

inline struct omws__samplePoints * soap_new_set_omws__samplePoints(struct soap *soap, wchar_t *om__SamplingParameters) { struct omws__samplePoints *_p = soap_instantiate_omws__samplePoints(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__samplePoints(soap, _p); _p->om__SamplingParameters = om__SamplingParameters; } return _p; }

inline void soap_delete_omws__samplePoints(struct soap *soap, struct omws__samplePoints *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__samplePoints(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__samplePointsResponse
#define SOAP_TYPE_omws_omws__samplePointsResponse (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__samplePointsResponse(struct soap*, struct omws__samplePointsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__samplePointsResponse(struct soap*, const struct omws__samplePointsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__samplePointsResponse(struct soap*, const char*, int, const struct omws__samplePointsResponse *, const char*);
SOAP_FMAC3 struct omws__samplePointsResponse * SOAP_FMAC4 soap_in_omws__samplePointsResponse(struct soap*, const char*, struct omws__samplePointsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__samplePointsResponse(struct soap*, const struct omws__samplePointsResponse *, const char*, const char*);

#ifndef soap_write_omws__samplePointsResponse
#define soap_write_omws__samplePointsResponse(soap, data) ( omws::soap_serialize_omws__samplePointsResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__samplePointsResponse(soap, data, "omws:samplePointsResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__samplePointsResponse * SOAP_FMAC4 soap_get_omws__samplePointsResponse(struct soap*, struct omws__samplePointsResponse *, const char*, const char*);

#ifndef soap_read_omws__samplePointsResponse
#define soap_read_omws__samplePointsResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__samplePointsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__samplePointsResponse * SOAP_FMAC2 soap_instantiate_omws__samplePointsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__samplePointsResponse * soap_new_omws__samplePointsResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__samplePointsResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__samplePointsResponse * soap_new_req_omws__samplePointsResponse(struct soap *soap, std::string& ticket) { struct omws__samplePointsResponse *_p = soap_instantiate_omws__samplePointsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__samplePointsResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__samplePointsResponse * soap_new_set_omws__samplePointsResponse(struct soap *soap, std::string& ticket) { struct omws__samplePointsResponse *_p = soap_instantiate_omws__samplePointsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__samplePointsResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__samplePointsResponse(struct soap *soap, struct omws__samplePointsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__samplePointsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getModelEvaluation
#define SOAP_TYPE_omws_omws__getModelEvaluation (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getModelEvaluation(struct soap*, struct omws__getModelEvaluation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getModelEvaluation(struct soap*, const struct omws__getModelEvaluation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getModelEvaluation(struct soap*, const char*, int, const struct omws__getModelEvaluation *, const char*);
SOAP_FMAC3 struct omws__getModelEvaluation * SOAP_FMAC4 soap_in_omws__getModelEvaluation(struct soap*, const char*, struct omws__getModelEvaluation *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getModelEvaluation(struct soap*, const struct omws__getModelEvaluation *, const char*, const char*);

#ifndef soap_write_omws__getModelEvaluation
#define soap_write_omws__getModelEvaluation(soap, data) ( omws::soap_serialize_omws__getModelEvaluation(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getModelEvaluation(soap, data, "omws:getModelEvaluation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getModelEvaluation * SOAP_FMAC4 soap_get_omws__getModelEvaluation(struct soap*, struct omws__getModelEvaluation *, const char*, const char*);

#ifndef soap_read_omws__getModelEvaluation
#define soap_read_omws__getModelEvaluation(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getModelEvaluation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getModelEvaluation * SOAP_FMAC2 soap_instantiate_omws__getModelEvaluation(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getModelEvaluation * soap_new_omws__getModelEvaluation(struct soap *soap, int n = -1) { return soap_instantiate_omws__getModelEvaluation(soap, n, NULL, NULL, NULL); }

inline struct omws__getModelEvaluation * soap_new_req_omws__getModelEvaluation(struct soap *soap, std::string& ticket) { struct omws__getModelEvaluation *_p = soap_instantiate_omws__getModelEvaluation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getModelEvaluation(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__getModelEvaluation * soap_new_set_omws__getModelEvaluation(struct soap *soap, std::string& ticket) { struct omws__getModelEvaluation *_p = soap_instantiate_omws__getModelEvaluation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getModelEvaluation(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__getModelEvaluation(struct soap *soap, struct omws__getModelEvaluation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getModelEvaluation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__modelEvaluationResponse
#define SOAP_TYPE_omws_omws__modelEvaluationResponse (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__modelEvaluationResponse(struct soap*, struct omws__modelEvaluationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__modelEvaluationResponse(struct soap*, const struct omws__modelEvaluationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__modelEvaluationResponse(struct soap*, const char*, int, const struct omws__modelEvaluationResponse *, const char*);
SOAP_FMAC3 struct omws__modelEvaluationResponse * SOAP_FMAC4 soap_in_omws__modelEvaluationResponse(struct soap*, const char*, struct omws__modelEvaluationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__modelEvaluationResponse(struct soap*, const struct omws__modelEvaluationResponse *, const char*, const char*);

#ifndef soap_write_omws__modelEvaluationResponse
#define soap_write_omws__modelEvaluationResponse(soap, data) ( omws::soap_serialize_omws__modelEvaluationResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__modelEvaluationResponse(soap, data, "omws:modelEvaluationResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__modelEvaluationResponse * SOAP_FMAC4 soap_get_omws__modelEvaluationResponse(struct soap*, struct omws__modelEvaluationResponse *, const char*, const char*);

#ifndef soap_read_omws__modelEvaluationResponse
#define soap_read_omws__modelEvaluationResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__modelEvaluationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__modelEvaluationResponse * SOAP_FMAC2 soap_instantiate_omws__modelEvaluationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__modelEvaluationResponse * soap_new_omws__modelEvaluationResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__modelEvaluationResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__modelEvaluationResponse * soap_new_req_omws__modelEvaluationResponse(struct soap *soap) { struct omws__modelEvaluationResponse *_p = soap_instantiate_omws__modelEvaluationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__modelEvaluationResponse(soap, _p); } return _p; }

inline struct omws__modelEvaluationResponse * soap_new_set_omws__modelEvaluationResponse(struct soap *soap, wchar_t *om__ModelEvaluation) { struct omws__modelEvaluationResponse *_p = soap_instantiate_omws__modelEvaluationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__modelEvaluationResponse(soap, _p); _p->om__ModelEvaluation = om__ModelEvaluation; } return _p; }

inline void soap_delete_omws__modelEvaluationResponse(struct soap *soap, struct omws__modelEvaluationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__modelEvaluationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__evaluateModel
#define SOAP_TYPE_omws_omws__evaluateModel (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__evaluateModel(struct soap*, struct omws__evaluateModel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__evaluateModel(struct soap*, const struct omws__evaluateModel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__evaluateModel(struct soap*, const char*, int, const struct omws__evaluateModel *, const char*);
SOAP_FMAC3 struct omws__evaluateModel * SOAP_FMAC4 soap_in_omws__evaluateModel(struct soap*, const char*, struct omws__evaluateModel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__evaluateModel(struct soap*, const struct omws__evaluateModel *, const char*, const char*);

#ifndef soap_write_omws__evaluateModel
#define soap_write_omws__evaluateModel(soap, data) ( omws::soap_serialize_omws__evaluateModel(soap, data), soap_begin_send(soap) || omws::soap_put_omws__evaluateModel(soap, data, "omws:evaluateModel", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__evaluateModel * SOAP_FMAC4 soap_get_omws__evaluateModel(struct soap*, struct omws__evaluateModel *, const char*, const char*);

#ifndef soap_read_omws__evaluateModel
#define soap_read_omws__evaluateModel(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__evaluateModel(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__evaluateModel * SOAP_FMAC2 soap_instantiate_omws__evaluateModel(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__evaluateModel * soap_new_omws__evaluateModel(struct soap *soap, int n = -1) { return soap_instantiate_omws__evaluateModel(soap, n, NULL, NULL, NULL); }

inline struct omws__evaluateModel * soap_new_req_omws__evaluateModel(struct soap *soap) { struct omws__evaluateModel *_p = soap_instantiate_omws__evaluateModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__evaluateModel(soap, _p); } return _p; }

inline struct omws__evaluateModel * soap_new_set_omws__evaluateModel(struct soap *soap, wchar_t *om__ModelEvaluationParameters) { struct omws__evaluateModel *_p = soap_instantiate_omws__evaluateModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__evaluateModel(soap, _p); _p->om__ModelEvaluationParameters = om__ModelEvaluationParameters; } return _p; }

inline void soap_delete_omws__evaluateModel(struct soap *soap, struct omws__evaluateModel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__evaluateModel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__evaluateModelResponse
#define SOAP_TYPE_omws_omws__evaluateModelResponse (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__evaluateModelResponse(struct soap*, struct omws__evaluateModelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__evaluateModelResponse(struct soap*, const struct omws__evaluateModelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__evaluateModelResponse(struct soap*, const char*, int, const struct omws__evaluateModelResponse *, const char*);
SOAP_FMAC3 struct omws__evaluateModelResponse * SOAP_FMAC4 soap_in_omws__evaluateModelResponse(struct soap*, const char*, struct omws__evaluateModelResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__evaluateModelResponse(struct soap*, const struct omws__evaluateModelResponse *, const char*, const char*);

#ifndef soap_write_omws__evaluateModelResponse
#define soap_write_omws__evaluateModelResponse(soap, data) ( omws::soap_serialize_omws__evaluateModelResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__evaluateModelResponse(soap, data, "omws:evaluateModelResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__evaluateModelResponse * SOAP_FMAC4 soap_get_omws__evaluateModelResponse(struct soap*, struct omws__evaluateModelResponse *, const char*, const char*);

#ifndef soap_read_omws__evaluateModelResponse
#define soap_read_omws__evaluateModelResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__evaluateModelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__evaluateModelResponse * SOAP_FMAC2 soap_instantiate_omws__evaluateModelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__evaluateModelResponse * soap_new_omws__evaluateModelResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__evaluateModelResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__evaluateModelResponse * soap_new_req_omws__evaluateModelResponse(struct soap *soap, std::string& ticket) { struct omws__evaluateModelResponse *_p = soap_instantiate_omws__evaluateModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__evaluateModelResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__evaluateModelResponse * soap_new_set_omws__evaluateModelResponse(struct soap *soap, std::string& ticket) { struct omws__evaluateModelResponse *_p = soap_instantiate_omws__evaluateModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__evaluateModelResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__evaluateModelResponse(struct soap *soap, struct omws__evaluateModelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__evaluateModelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getProjectionMetadata
#define SOAP_TYPE_omws_omws__getProjectionMetadata (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getProjectionMetadata(struct soap*, struct omws__getProjectionMetadata *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getProjectionMetadata(struct soap*, const struct omws__getProjectionMetadata *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getProjectionMetadata(struct soap*, const char*, int, const struct omws__getProjectionMetadata *, const char*);
SOAP_FMAC3 struct omws__getProjectionMetadata * SOAP_FMAC4 soap_in_omws__getProjectionMetadata(struct soap*, const char*, struct omws__getProjectionMetadata *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getProjectionMetadata(struct soap*, const struct omws__getProjectionMetadata *, const char*, const char*);

#ifndef soap_write_omws__getProjectionMetadata
#define soap_write_omws__getProjectionMetadata(soap, data) ( omws::soap_serialize_omws__getProjectionMetadata(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getProjectionMetadata(soap, data, "omws:getProjectionMetadata", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getProjectionMetadata * SOAP_FMAC4 soap_get_omws__getProjectionMetadata(struct soap*, struct omws__getProjectionMetadata *, const char*, const char*);

#ifndef soap_read_omws__getProjectionMetadata
#define soap_read_omws__getProjectionMetadata(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getProjectionMetadata(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getProjectionMetadata * SOAP_FMAC2 soap_instantiate_omws__getProjectionMetadata(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getProjectionMetadata * soap_new_omws__getProjectionMetadata(struct soap *soap, int n = -1) { return soap_instantiate_omws__getProjectionMetadata(soap, n, NULL, NULL, NULL); }

inline struct omws__getProjectionMetadata * soap_new_req_omws__getProjectionMetadata(struct soap *soap, std::string& ticket) { struct omws__getProjectionMetadata *_p = soap_instantiate_omws__getProjectionMetadata(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getProjectionMetadata(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__getProjectionMetadata * soap_new_set_omws__getProjectionMetadata(struct soap *soap, std::string& ticket) { struct omws__getProjectionMetadata *_p = soap_instantiate_omws__getProjectionMetadata(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getProjectionMetadata(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__getProjectionMetadata(struct soap *soap, struct omws__getProjectionMetadata *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getProjectionMetadata(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getProjectionMetadataResponse
#define SOAP_TYPE_omws_omws__getProjectionMetadataResponse (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getProjectionMetadataResponse(struct soap*, struct omws__getProjectionMetadataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getProjectionMetadataResponse(struct soap*, const struct omws__getProjectionMetadataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getProjectionMetadataResponse(struct soap*, const char*, int, const struct omws__getProjectionMetadataResponse *, const char*);
SOAP_FMAC3 struct omws__getProjectionMetadataResponse * SOAP_FMAC4 soap_in_omws__getProjectionMetadataResponse(struct soap*, const char*, struct omws__getProjectionMetadataResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getProjectionMetadataResponse(struct soap*, const struct omws__getProjectionMetadataResponse *, const char*, const char*);

#ifndef soap_write_omws__getProjectionMetadataResponse
#define soap_write_omws__getProjectionMetadataResponse(soap, data) ( omws::soap_serialize_omws__getProjectionMetadataResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getProjectionMetadataResponse(soap, data, "omws:getProjectionMetadataResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getProjectionMetadataResponse * SOAP_FMAC4 soap_get_omws__getProjectionMetadataResponse(struct soap*, struct omws__getProjectionMetadataResponse *, const char*, const char*);

#ifndef soap_read_omws__getProjectionMetadataResponse
#define soap_read_omws__getProjectionMetadataResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getProjectionMetadataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getProjectionMetadataResponse * SOAP_FMAC2 soap_instantiate_omws__getProjectionMetadataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getProjectionMetadataResponse * soap_new_omws__getProjectionMetadataResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getProjectionMetadataResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getProjectionMetadataResponse * soap_new_req_omws__getProjectionMetadataResponse(struct soap *soap) { struct omws__getProjectionMetadataResponse *_p = soap_instantiate_omws__getProjectionMetadataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getProjectionMetadataResponse(soap, _p); } return _p; }

inline struct omws__getProjectionMetadataResponse * soap_new_set_omws__getProjectionMetadataResponse(struct soap *soap, int FileSize, wchar_t *om__ProjectionEnvelope) { struct omws__getProjectionMetadataResponse *_p = soap_instantiate_omws__getProjectionMetadataResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getProjectionMetadataResponse(soap, _p); _p->FileSize = FileSize; _p->om__ProjectionEnvelope = om__ProjectionEnvelope; } return _p; }

inline void soap_delete_omws__getProjectionMetadataResponse(struct soap *soap, struct omws__getProjectionMetadataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getProjectionMetadataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getLayerAsUrl
#define SOAP_TYPE_omws_omws__getLayerAsUrl (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayerAsUrl(struct soap*, struct omws__getLayerAsUrl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayerAsUrl(struct soap*, const struct omws__getLayerAsUrl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayerAsUrl(struct soap*, const char*, int, const struct omws__getLayerAsUrl *, const char*);
SOAP_FMAC3 struct omws__getLayerAsUrl * SOAP_FMAC4 soap_in_omws__getLayerAsUrl(struct soap*, const char*, struct omws__getLayerAsUrl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayerAsUrl(struct soap*, const struct omws__getLayerAsUrl *, const char*, const char*);

#ifndef soap_write_omws__getLayerAsUrl
#define soap_write_omws__getLayerAsUrl(soap, data) ( omws::soap_serialize_omws__getLayerAsUrl(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getLayerAsUrl(soap, data, "omws:getLayerAsUrl", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getLayerAsUrl * SOAP_FMAC4 soap_get_omws__getLayerAsUrl(struct soap*, struct omws__getLayerAsUrl *, const char*, const char*);

#ifndef soap_read_omws__getLayerAsUrl
#define soap_read_omws__getLayerAsUrl(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getLayerAsUrl(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getLayerAsUrl * SOAP_FMAC2 soap_instantiate_omws__getLayerAsUrl(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getLayerAsUrl * soap_new_omws__getLayerAsUrl(struct soap *soap, int n = -1) { return soap_instantiate_omws__getLayerAsUrl(soap, n, NULL, NULL, NULL); }

inline struct omws__getLayerAsUrl * soap_new_req_omws__getLayerAsUrl(struct soap *soap, std::string& id) { struct omws__getLayerAsUrl *_p = soap_instantiate_omws__getLayerAsUrl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLayerAsUrl(soap, _p); _p->id = id; } return _p; }

inline struct omws__getLayerAsUrl * soap_new_set_omws__getLayerAsUrl(struct soap *soap, std::string& id) { struct omws__getLayerAsUrl *_p = soap_instantiate_omws__getLayerAsUrl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLayerAsUrl(soap, _p); _p->id = id; } return _p; }

inline void soap_delete_omws__getLayerAsUrl(struct soap *soap, struct omws__getLayerAsUrl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getLayerAsUrl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getLayerAsUrlResponse
#define SOAP_TYPE_omws_omws__getLayerAsUrlResponse (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayerAsUrlResponse(struct soap*, struct omws__getLayerAsUrlResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayerAsUrlResponse(struct soap*, const struct omws__getLayerAsUrlResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayerAsUrlResponse(struct soap*, const char*, int, const struct omws__getLayerAsUrlResponse *, const char*);
SOAP_FMAC3 struct omws__getLayerAsUrlResponse * SOAP_FMAC4 soap_in_omws__getLayerAsUrlResponse(struct soap*, const char*, struct omws__getLayerAsUrlResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayerAsUrlResponse(struct soap*, const struct omws__getLayerAsUrlResponse *, const char*, const char*);

#ifndef soap_write_omws__getLayerAsUrlResponse
#define soap_write_omws__getLayerAsUrlResponse(soap, data) ( omws::soap_serialize_omws__getLayerAsUrlResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getLayerAsUrlResponse(soap, data, "omws:getLayerAsUrlResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getLayerAsUrlResponse * SOAP_FMAC4 soap_get_omws__getLayerAsUrlResponse(struct soap*, struct omws__getLayerAsUrlResponse *, const char*, const char*);

#ifndef soap_read_omws__getLayerAsUrlResponse
#define soap_read_omws__getLayerAsUrlResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getLayerAsUrlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getLayerAsUrlResponse * SOAP_FMAC2 soap_instantiate_omws__getLayerAsUrlResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getLayerAsUrlResponse * soap_new_omws__getLayerAsUrlResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getLayerAsUrlResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getLayerAsUrlResponse * soap_new_req_omws__getLayerAsUrlResponse(struct soap *soap, std::string& url) { struct omws__getLayerAsUrlResponse *_p = soap_instantiate_omws__getLayerAsUrlResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLayerAsUrlResponse(soap, _p); _p->url = url; } return _p; }

inline struct omws__getLayerAsUrlResponse * soap_new_set_omws__getLayerAsUrlResponse(struct soap *soap, std::string& url) { struct omws__getLayerAsUrlResponse *_p = soap_instantiate_omws__getLayerAsUrlResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLayerAsUrlResponse(soap, _p); _p->url = url; } return _p; }

inline void soap_delete_omws__getLayerAsUrlResponse(struct soap *soap, struct omws__getLayerAsUrlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getLayerAsUrlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getLog
#define SOAP_TYPE_omws_omws__getLog (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLog(struct soap*, struct omws__getLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLog(struct soap*, const struct omws__getLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLog(struct soap*, const char*, int, const struct omws__getLog *, const char*);
SOAP_FMAC3 struct omws__getLog * SOAP_FMAC4 soap_in_omws__getLog(struct soap*, const char*, struct omws__getLog *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLog(struct soap*, const struct omws__getLog *, const char*, const char*);

#ifndef soap_write_omws__getLog
#define soap_write_omws__getLog(soap, data) ( omws::soap_serialize_omws__getLog(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getLog(soap, data, "omws:getLog", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getLog * SOAP_FMAC4 soap_get_omws__getLog(struct soap*, struct omws__getLog *, const char*, const char*);

#ifndef soap_read_omws__getLog
#define soap_read_omws__getLog(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getLog(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getLog * SOAP_FMAC2 soap_instantiate_omws__getLog(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getLog * soap_new_omws__getLog(struct soap *soap, int n = -1) { return soap_instantiate_omws__getLog(soap, n, NULL, NULL, NULL); }

inline struct omws__getLog * soap_new_req_omws__getLog(struct soap *soap, std::string& ticket) { struct omws__getLog *_p = soap_instantiate_omws__getLog(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLog(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__getLog * soap_new_set_omws__getLog(struct soap *soap, std::string& ticket) { struct omws__getLog *_p = soap_instantiate_omws__getLog(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLog(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__getLog(struct soap *soap, struct omws__getLog *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getLog(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getLogResponse
#define SOAP_TYPE_omws_omws__getLogResponse (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLogResponse(struct soap*, struct omws__getLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLogResponse(struct soap*, const struct omws__getLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLogResponse(struct soap*, const char*, int, const struct omws__getLogResponse *, const char*);
SOAP_FMAC3 struct omws__getLogResponse * SOAP_FMAC4 soap_in_omws__getLogResponse(struct soap*, const char*, struct omws__getLogResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLogResponse(struct soap*, const struct omws__getLogResponse *, const char*, const char*);

#ifndef soap_write_omws__getLogResponse
#define soap_write_omws__getLogResponse(soap, data) ( omws::soap_serialize_omws__getLogResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getLogResponse(soap, data, "omws:getLogResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getLogResponse * SOAP_FMAC4 soap_get_omws__getLogResponse(struct soap*, struct omws__getLogResponse *, const char*, const char*);

#ifndef soap_read_omws__getLogResponse
#define soap_read_omws__getLogResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getLogResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getLogResponse * SOAP_FMAC2 soap_instantiate_omws__getLogResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getLogResponse * soap_new_omws__getLogResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getLogResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getLogResponse * soap_new_req_omws__getLogResponse(struct soap *soap, std::string& log) { struct omws__getLogResponse *_p = soap_instantiate_omws__getLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLogResponse(soap, _p); _p->log = log; } return _p; }

inline struct omws__getLogResponse * soap_new_set_omws__getLogResponse(struct soap *soap, std::string& log) { struct omws__getLogResponse *_p = soap_instantiate_omws__getLogResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLogResponse(soap, _p); _p->log = log; } return _p; }

inline void soap_delete_omws__getLogResponse(struct soap *soap, struct omws__getLogResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getLogResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getProgress
#define SOAP_TYPE_omws_omws__getProgress (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getProgress(struct soap*, struct omws__getProgress *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getProgress(struct soap*, const struct omws__getProgress *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getProgress(struct soap*, const char*, int, const struct omws__getProgress *, const char*);
SOAP_FMAC3 struct omws__getProgress * SOAP_FMAC4 soap_in_omws__getProgress(struct soap*, const char*, struct omws__getProgress *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getProgress(struct soap*, const struct omws__getProgress *, const char*, const char*);

#ifndef soap_write_omws__getProgress
#define soap_write_omws__getProgress(soap, data) ( omws::soap_serialize_omws__getProgress(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getProgress(soap, data, "omws:getProgress", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getProgress * SOAP_FMAC4 soap_get_omws__getProgress(struct soap*, struct omws__getProgress *, const char*, const char*);

#ifndef soap_read_omws__getProgress
#define soap_read_omws__getProgress(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getProgress(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getProgress * SOAP_FMAC2 soap_instantiate_omws__getProgress(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getProgress * soap_new_omws__getProgress(struct soap *soap, int n = -1) { return soap_instantiate_omws__getProgress(soap, n, NULL, NULL, NULL); }

inline struct omws__getProgress * soap_new_req_omws__getProgress(struct soap *soap, std::string& tickets) { struct omws__getProgress *_p = soap_instantiate_omws__getProgress(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getProgress(soap, _p); _p->tickets = tickets; } return _p; }

inline struct omws__getProgress * soap_new_set_omws__getProgress(struct soap *soap, std::string& tickets) { struct omws__getProgress *_p = soap_instantiate_omws__getProgress(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getProgress(soap, _p); _p->tickets = tickets; } return _p; }

inline void soap_delete_omws__getProgress(struct soap *soap, struct omws__getProgress *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getProgress(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getProgressResponse
#define SOAP_TYPE_omws_omws__getProgressResponse (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getProgressResponse(struct soap*, struct omws__getProgressResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getProgressResponse(struct soap*, const struct omws__getProgressResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getProgressResponse(struct soap*, const char*, int, const struct omws__getProgressResponse *, const char*);
SOAP_FMAC3 struct omws__getProgressResponse * SOAP_FMAC4 soap_in_omws__getProgressResponse(struct soap*, const char*, struct omws__getProgressResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getProgressResponse(struct soap*, const struct omws__getProgressResponse *, const char*, const char*);

#ifndef soap_write_omws__getProgressResponse
#define soap_write_omws__getProgressResponse(soap, data) ( omws::soap_serialize_omws__getProgressResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getProgressResponse(soap, data, "omws:getProgressResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getProgressResponse * SOAP_FMAC4 soap_get_omws__getProgressResponse(struct soap*, struct omws__getProgressResponse *, const char*, const char*);

#ifndef soap_read_omws__getProgressResponse
#define soap_read_omws__getProgressResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getProgressResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getProgressResponse * SOAP_FMAC2 soap_instantiate_omws__getProgressResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getProgressResponse * soap_new_omws__getProgressResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getProgressResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getProgressResponse * soap_new_req_omws__getProgressResponse(struct soap *soap, std::string& progress) { struct omws__getProgressResponse *_p = soap_instantiate_omws__getProgressResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getProgressResponse(soap, _p); _p->progress = progress; } return _p; }

inline struct omws__getProgressResponse * soap_new_set_omws__getProgressResponse(struct soap *soap, std::string& progress) { struct omws__getProgressResponse *_p = soap_instantiate_omws__getProgressResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getProgressResponse(soap, _p); _p->progress = progress; } return _p; }

inline void soap_delete_omws__getProgressResponse(struct soap *soap, struct omws__getProgressResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getProgressResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__projectModel
#define SOAP_TYPE_omws_omws__projectModel (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__projectModel(struct soap*, struct omws__projectModel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__projectModel(struct soap*, const struct omws__projectModel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__projectModel(struct soap*, const char*, int, const struct omws__projectModel *, const char*);
SOAP_FMAC3 struct omws__projectModel * SOAP_FMAC4 soap_in_omws__projectModel(struct soap*, const char*, struct omws__projectModel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__projectModel(struct soap*, const struct omws__projectModel *, const char*, const char*);

#ifndef soap_write_omws__projectModel
#define soap_write_omws__projectModel(soap, data) ( omws::soap_serialize_omws__projectModel(soap, data), soap_begin_send(soap) || omws::soap_put_omws__projectModel(soap, data, "omws:projectModel", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__projectModel * SOAP_FMAC4 soap_get_omws__projectModel(struct soap*, struct omws__projectModel *, const char*, const char*);

#ifndef soap_read_omws__projectModel
#define soap_read_omws__projectModel(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__projectModel(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__projectModel * SOAP_FMAC2 soap_instantiate_omws__projectModel(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__projectModel * soap_new_omws__projectModel(struct soap *soap, int n = -1) { return soap_instantiate_omws__projectModel(soap, n, NULL, NULL, NULL); }

inline struct omws__projectModel * soap_new_req_omws__projectModel(struct soap *soap) { struct omws__projectModel *_p = soap_instantiate_omws__projectModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__projectModel(soap, _p); } return _p; }

inline struct omws__projectModel * soap_new_set_omws__projectModel(struct soap *soap, wchar_t *om__ProjectionParameters) { struct omws__projectModel *_p = soap_instantiate_omws__projectModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__projectModel(soap, _p); _p->om__ProjectionParameters = om__ProjectionParameters; } return _p; }

inline void soap_delete_omws__projectModel(struct soap *soap, struct omws__projectModel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__projectModel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__projectModelResponse
#define SOAP_TYPE_omws_omws__projectModelResponse (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__projectModelResponse(struct soap*, struct omws__projectModelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__projectModelResponse(struct soap*, const struct omws__projectModelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__projectModelResponse(struct soap*, const char*, int, const struct omws__projectModelResponse *, const char*);
SOAP_FMAC3 struct omws__projectModelResponse * SOAP_FMAC4 soap_in_omws__projectModelResponse(struct soap*, const char*, struct omws__projectModelResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__projectModelResponse(struct soap*, const struct omws__projectModelResponse *, const char*, const char*);

#ifndef soap_write_omws__projectModelResponse
#define soap_write_omws__projectModelResponse(soap, data) ( omws::soap_serialize_omws__projectModelResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__projectModelResponse(soap, data, "omws:projectModelResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__projectModelResponse * SOAP_FMAC4 soap_get_omws__projectModelResponse(struct soap*, struct omws__projectModelResponse *, const char*, const char*);

#ifndef soap_read_omws__projectModelResponse
#define soap_read_omws__projectModelResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__projectModelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__projectModelResponse * SOAP_FMAC2 soap_instantiate_omws__projectModelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__projectModelResponse * soap_new_omws__projectModelResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__projectModelResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__projectModelResponse * soap_new_req_omws__projectModelResponse(struct soap *soap, std::string& ticket) { struct omws__projectModelResponse *_p = soap_instantiate_omws__projectModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__projectModelResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__projectModelResponse * soap_new_set_omws__projectModelResponse(struct soap *soap, std::string& ticket) { struct omws__projectModelResponse *_p = soap_instantiate_omws__projectModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__projectModelResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__projectModelResponse(struct soap *soap, struct omws__projectModelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__projectModelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getTestResult
#define SOAP_TYPE_omws_omws__getTestResult (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getTestResult(struct soap*, struct omws__getTestResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getTestResult(struct soap*, const struct omws__getTestResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getTestResult(struct soap*, const char*, int, const struct omws__getTestResult *, const char*);
SOAP_FMAC3 struct omws__getTestResult * SOAP_FMAC4 soap_in_omws__getTestResult(struct soap*, const char*, struct omws__getTestResult *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getTestResult(struct soap*, const struct omws__getTestResult *, const char*, const char*);

#ifndef soap_write_omws__getTestResult
#define soap_write_omws__getTestResult(soap, data) ( omws::soap_serialize_omws__getTestResult(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getTestResult(soap, data, "omws:getTestResult", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getTestResult * SOAP_FMAC4 soap_get_omws__getTestResult(struct soap*, struct omws__getTestResult *, const char*, const char*);

#ifndef soap_read_omws__getTestResult
#define soap_read_omws__getTestResult(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getTestResult(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getTestResult * SOAP_FMAC2 soap_instantiate_omws__getTestResult(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getTestResult * soap_new_omws__getTestResult(struct soap *soap, int n = -1) { return soap_instantiate_omws__getTestResult(soap, n, NULL, NULL, NULL); }

inline struct omws__getTestResult * soap_new_req_omws__getTestResult(struct soap *soap, std::string& ticket) { struct omws__getTestResult *_p = soap_instantiate_omws__getTestResult(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getTestResult(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__getTestResult * soap_new_set_omws__getTestResult(struct soap *soap, std::string& ticket) { struct omws__getTestResult *_p = soap_instantiate_omws__getTestResult(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getTestResult(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__getTestResult(struct soap *soap, struct omws__getTestResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getTestResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__testResponse
#define SOAP_TYPE_omws_omws__testResponse (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__testResponse(struct soap*, struct omws__testResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__testResponse(struct soap*, const struct omws__testResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__testResponse(struct soap*, const char*, int, const struct omws__testResponse *, const char*);
SOAP_FMAC3 struct omws__testResponse * SOAP_FMAC4 soap_in_omws__testResponse(struct soap*, const char*, struct omws__testResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__testResponse(struct soap*, const struct omws__testResponse *, const char*, const char*);

#ifndef soap_write_omws__testResponse
#define soap_write_omws__testResponse(soap, data) ( omws::soap_serialize_omws__testResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__testResponse(soap, data, "omws:testResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__testResponse * SOAP_FMAC4 soap_get_omws__testResponse(struct soap*, struct omws__testResponse *, const char*, const char*);

#ifndef soap_read_omws__testResponse
#define soap_read_omws__testResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__testResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__testResponse * SOAP_FMAC2 soap_instantiate_omws__testResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__testResponse * soap_new_omws__testResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__testResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__testResponse * soap_new_req_omws__testResponse(struct soap *soap) { struct omws__testResponse *_p = soap_instantiate_omws__testResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__testResponse(soap, _p); } return _p; }

inline struct omws__testResponse * soap_new_set_omws__testResponse(struct soap *soap, wchar_t *om__TestResultEnvelope) { struct omws__testResponse *_p = soap_instantiate_omws__testResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__testResponse(soap, _p); _p->om__TestResultEnvelope = om__TestResultEnvelope; } return _p; }

inline void soap_delete_omws__testResponse(struct soap *soap, struct omws__testResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__testResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__testModel
#define SOAP_TYPE_omws_omws__testModel (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__testModel(struct soap*, struct omws__testModel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__testModel(struct soap*, const struct omws__testModel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__testModel(struct soap*, const char*, int, const struct omws__testModel *, const char*);
SOAP_FMAC3 struct omws__testModel * SOAP_FMAC4 soap_in_omws__testModel(struct soap*, const char*, struct omws__testModel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__testModel(struct soap*, const struct omws__testModel *, const char*, const char*);

#ifndef soap_write_omws__testModel
#define soap_write_omws__testModel(soap, data) ( omws::soap_serialize_omws__testModel(soap, data), soap_begin_send(soap) || omws::soap_put_omws__testModel(soap, data, "omws:testModel", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__testModel * SOAP_FMAC4 soap_get_omws__testModel(struct soap*, struct omws__testModel *, const char*, const char*);

#ifndef soap_read_omws__testModel
#define soap_read_omws__testModel(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__testModel(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__testModel * SOAP_FMAC2 soap_instantiate_omws__testModel(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__testModel * soap_new_omws__testModel(struct soap *soap, int n = -1) { return soap_instantiate_omws__testModel(soap, n, NULL, NULL, NULL); }

inline struct omws__testModel * soap_new_req_omws__testModel(struct soap *soap) { struct omws__testModel *_p = soap_instantiate_omws__testModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__testModel(soap, _p); } return _p; }

inline struct omws__testModel * soap_new_set_omws__testModel(struct soap *soap, wchar_t *om__TestParameters) { struct omws__testModel *_p = soap_instantiate_omws__testModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__testModel(soap, _p); _p->om__TestParameters = om__TestParameters; } return _p; }

inline void soap_delete_omws__testModel(struct soap *soap, struct omws__testModel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__testModel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__testModelResponse
#define SOAP_TYPE_omws_omws__testModelResponse (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__testModelResponse(struct soap*, struct omws__testModelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__testModelResponse(struct soap*, const struct omws__testModelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__testModelResponse(struct soap*, const char*, int, const struct omws__testModelResponse *, const char*);
SOAP_FMAC3 struct omws__testModelResponse * SOAP_FMAC4 soap_in_omws__testModelResponse(struct soap*, const char*, struct omws__testModelResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__testModelResponse(struct soap*, const struct omws__testModelResponse *, const char*, const char*);

#ifndef soap_write_omws__testModelResponse
#define soap_write_omws__testModelResponse(soap, data) ( omws::soap_serialize_omws__testModelResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__testModelResponse(soap, data, "omws:testModelResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__testModelResponse * SOAP_FMAC4 soap_get_omws__testModelResponse(struct soap*, struct omws__testModelResponse *, const char*, const char*);

#ifndef soap_read_omws__testModelResponse
#define soap_read_omws__testModelResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__testModelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__testModelResponse * SOAP_FMAC2 soap_instantiate_omws__testModelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__testModelResponse * soap_new_omws__testModelResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__testModelResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__testModelResponse * soap_new_req_omws__testModelResponse(struct soap *soap, std::string& ticket) { struct omws__testModelResponse *_p = soap_instantiate_omws__testModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__testModelResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__testModelResponse * soap_new_set_omws__testModelResponse(struct soap *soap, std::string& ticket) { struct omws__testModelResponse *_p = soap_instantiate_omws__testModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__testModelResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__testModelResponse(struct soap *soap, struct omws__testModelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__testModelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getModel
#define SOAP_TYPE_omws_omws__getModel (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getModel(struct soap*, struct omws__getModel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getModel(struct soap*, const struct omws__getModel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getModel(struct soap*, const char*, int, const struct omws__getModel *, const char*);
SOAP_FMAC3 struct omws__getModel * SOAP_FMAC4 soap_in_omws__getModel(struct soap*, const char*, struct omws__getModel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getModel(struct soap*, const struct omws__getModel *, const char*, const char*);

#ifndef soap_write_omws__getModel
#define soap_write_omws__getModel(soap, data) ( omws::soap_serialize_omws__getModel(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getModel(soap, data, "omws:getModel", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getModel * SOAP_FMAC4 soap_get_omws__getModel(struct soap*, struct omws__getModel *, const char*, const char*);

#ifndef soap_read_omws__getModel
#define soap_read_omws__getModel(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getModel(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getModel * SOAP_FMAC2 soap_instantiate_omws__getModel(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getModel * soap_new_omws__getModel(struct soap *soap, int n = -1) { return soap_instantiate_omws__getModel(soap, n, NULL, NULL, NULL); }

inline struct omws__getModel * soap_new_req_omws__getModel(struct soap *soap, std::string& ticket) { struct omws__getModel *_p = soap_instantiate_omws__getModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getModel(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__getModel * soap_new_set_omws__getModel(struct soap *soap, std::string& ticket) { struct omws__getModel *_p = soap_instantiate_omws__getModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getModel(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__getModel(struct soap *soap, struct omws__getModel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getModel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getModelResponse
#define SOAP_TYPE_omws_omws__getModelResponse (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getModelResponse(struct soap*, struct omws__getModelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getModelResponse(struct soap*, const struct omws__getModelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getModelResponse(struct soap*, const char*, int, const struct omws__getModelResponse *, const char*);
SOAP_FMAC3 struct omws__getModelResponse * SOAP_FMAC4 soap_in_omws__getModelResponse(struct soap*, const char*, struct omws__getModelResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getModelResponse(struct soap*, const struct omws__getModelResponse *, const char*, const char*);

#ifndef soap_write_omws__getModelResponse
#define soap_write_omws__getModelResponse(soap, data) ( omws::soap_serialize_omws__getModelResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getModelResponse(soap, data, "omws:getModelResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getModelResponse * SOAP_FMAC4 soap_get_omws__getModelResponse(struct soap*, struct omws__getModelResponse *, const char*, const char*);

#ifndef soap_read_omws__getModelResponse
#define soap_read_omws__getModelResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getModelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getModelResponse * SOAP_FMAC2 soap_instantiate_omws__getModelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getModelResponse * soap_new_omws__getModelResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getModelResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getModelResponse * soap_new_req_omws__getModelResponse(struct soap *soap) { struct omws__getModelResponse *_p = soap_instantiate_omws__getModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getModelResponse(soap, _p); } return _p; }

inline struct omws__getModelResponse * soap_new_set_omws__getModelResponse(struct soap *soap, wchar_t *om__ModelEnvelope) { struct omws__getModelResponse *_p = soap_instantiate_omws__getModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getModelResponse(soap, _p); _p->om__ModelEnvelope = om__ModelEnvelope; } return _p; }

inline void soap_delete_omws__getModelResponse(struct soap *soap, struct omws__getModelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getModelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__createModel
#define SOAP_TYPE_omws_omws__createModel (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__createModel(struct soap*, struct omws__createModel *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__createModel(struct soap*, const struct omws__createModel *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__createModel(struct soap*, const char*, int, const struct omws__createModel *, const char*);
SOAP_FMAC3 struct omws__createModel * SOAP_FMAC4 soap_in_omws__createModel(struct soap*, const char*, struct omws__createModel *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__createModel(struct soap*, const struct omws__createModel *, const char*, const char*);

#ifndef soap_write_omws__createModel
#define soap_write_omws__createModel(soap, data) ( omws::soap_serialize_omws__createModel(soap, data), soap_begin_send(soap) || omws::soap_put_omws__createModel(soap, data, "omws:createModel", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__createModel * SOAP_FMAC4 soap_get_omws__createModel(struct soap*, struct omws__createModel *, const char*, const char*);

#ifndef soap_read_omws__createModel
#define soap_read_omws__createModel(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__createModel(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__createModel * SOAP_FMAC2 soap_instantiate_omws__createModel(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__createModel * soap_new_omws__createModel(struct soap *soap, int n = -1) { return soap_instantiate_omws__createModel(soap, n, NULL, NULL, NULL); }

inline struct omws__createModel * soap_new_req_omws__createModel(struct soap *soap) { struct omws__createModel *_p = soap_instantiate_omws__createModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__createModel(soap, _p); } return _p; }

inline struct omws__createModel * soap_new_set_omws__createModel(struct soap *soap, wchar_t *om__ModelParameters) { struct omws__createModel *_p = soap_instantiate_omws__createModel(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__createModel(soap, _p); _p->om__ModelParameters = om__ModelParameters; } return _p; }

inline void soap_delete_omws__createModel(struct soap *soap, struct omws__createModel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__createModel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__createModelResponse
#define SOAP_TYPE_omws_omws__createModelResponse (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__createModelResponse(struct soap*, struct omws__createModelResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__createModelResponse(struct soap*, const struct omws__createModelResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__createModelResponse(struct soap*, const char*, int, const struct omws__createModelResponse *, const char*);
SOAP_FMAC3 struct omws__createModelResponse * SOAP_FMAC4 soap_in_omws__createModelResponse(struct soap*, const char*, struct omws__createModelResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__createModelResponse(struct soap*, const struct omws__createModelResponse *, const char*, const char*);

#ifndef soap_write_omws__createModelResponse
#define soap_write_omws__createModelResponse(soap, data) ( omws::soap_serialize_omws__createModelResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__createModelResponse(soap, data, "omws:createModelResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__createModelResponse * SOAP_FMAC4 soap_get_omws__createModelResponse(struct soap*, struct omws__createModelResponse *, const char*, const char*);

#ifndef soap_read_omws__createModelResponse
#define soap_read_omws__createModelResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__createModelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__createModelResponse * SOAP_FMAC2 soap_instantiate_omws__createModelResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__createModelResponse * soap_new_omws__createModelResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__createModelResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__createModelResponse * soap_new_req_omws__createModelResponse(struct soap *soap, std::string& ticket) { struct omws__createModelResponse *_p = soap_instantiate_omws__createModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__createModelResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline struct omws__createModelResponse * soap_new_set_omws__createModelResponse(struct soap *soap, std::string& ticket) { struct omws__createModelResponse *_p = soap_instantiate_omws__createModelResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__createModelResponse(soap, _p); _p->ticket = ticket; } return _p; }

inline void soap_delete_omws__createModelResponse(struct soap *soap, struct omws__createModelResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__createModelResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getLayers
#define SOAP_TYPE_omws_omws__getLayers (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayers(struct soap*, struct omws__getLayers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayers(struct soap*, const struct omws__getLayers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayers(struct soap*, const char*, int, const struct omws__getLayers *, const char*);
SOAP_FMAC3 struct omws__getLayers * SOAP_FMAC4 soap_in_omws__getLayers(struct soap*, const char*, struct omws__getLayers *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayers(struct soap*, const struct omws__getLayers *, const char*, const char*);

#ifndef soap_write_omws__getLayers
#define soap_write_omws__getLayers(soap, data) ( omws::soap_serialize_omws__getLayers(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getLayers(soap, data, "omws:getLayers", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getLayers * SOAP_FMAC4 soap_get_omws__getLayers(struct soap*, struct omws__getLayers *, const char*, const char*);

#ifndef soap_read_omws__getLayers
#define soap_read_omws__getLayers(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getLayers(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getLayers * SOAP_FMAC2 soap_instantiate_omws__getLayers(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getLayers * soap_new_omws__getLayers(struct soap *soap, int n = -1) { return soap_instantiate_omws__getLayers(soap, n, NULL, NULL, NULL); }

inline struct omws__getLayers * soap_new_req_omws__getLayers(struct soap *soap) { struct omws__getLayers *_p = soap_instantiate_omws__getLayers(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLayers(soap, _p); } return _p; }

inline struct omws__getLayers * soap_new_set_omws__getLayers(struct soap *soap, void *_) { struct omws__getLayers *_p = soap_instantiate_omws__getLayers(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLayers(soap, _p); _p->_ = _; } return _p; }

inline void soap_delete_omws__getLayers(struct soap *soap, struct omws__getLayers *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getLayers(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getLayersResponse
#define SOAP_TYPE_omws_omws__getLayersResponse (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayersResponse(struct soap*, struct omws__getLayersResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayersResponse(struct soap*, const struct omws__getLayersResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayersResponse(struct soap*, const char*, int, const struct omws__getLayersResponse *, const char*);
SOAP_FMAC3 struct omws__getLayersResponse * SOAP_FMAC4 soap_in_omws__getLayersResponse(struct soap*, const char*, struct omws__getLayersResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayersResponse(struct soap*, const struct omws__getLayersResponse *, const char*, const char*);

#ifndef soap_write_omws__getLayersResponse
#define soap_write_omws__getLayersResponse(soap, data) ( omws::soap_serialize_omws__getLayersResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getLayersResponse(soap, data, "omws:getLayersResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getLayersResponse * SOAP_FMAC4 soap_get_omws__getLayersResponse(struct soap*, struct omws__getLayersResponse *, const char*, const char*);

#ifndef soap_read_omws__getLayersResponse
#define soap_read_omws__getLayersResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getLayersResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getLayersResponse * SOAP_FMAC2 soap_instantiate_omws__getLayersResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getLayersResponse * soap_new_omws__getLayersResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getLayersResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getLayersResponse * soap_new_req_omws__getLayersResponse(struct soap *soap) { struct omws__getLayersResponse *_p = soap_instantiate_omws__getLayersResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLayersResponse(soap, _p); } return _p; }

inline struct omws__getLayersResponse * soap_new_set_omws__getLayersResponse(struct soap *soap, wchar_t *om__AvailableLayers) { struct omws__getLayersResponse *_p = soap_instantiate_omws__getLayersResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getLayersResponse(soap, _p); _p->om__AvailableLayers = om__AvailableLayers; } return _p; }

inline void soap_delete_omws__getLayersResponse(struct soap *soap, struct omws__getLayersResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getLayersResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getAlgorithms
#define SOAP_TYPE_omws_omws__getAlgorithms (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getAlgorithms(struct soap*, struct omws__getAlgorithms *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getAlgorithms(struct soap*, const struct omws__getAlgorithms *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getAlgorithms(struct soap*, const char*, int, const struct omws__getAlgorithms *, const char*);
SOAP_FMAC3 struct omws__getAlgorithms * SOAP_FMAC4 soap_in_omws__getAlgorithms(struct soap*, const char*, struct omws__getAlgorithms *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getAlgorithms(struct soap*, const struct omws__getAlgorithms *, const char*, const char*);

#ifndef soap_write_omws__getAlgorithms
#define soap_write_omws__getAlgorithms(soap, data) ( omws::soap_serialize_omws__getAlgorithms(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getAlgorithms(soap, data, "omws:getAlgorithms", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getAlgorithms * SOAP_FMAC4 soap_get_omws__getAlgorithms(struct soap*, struct omws__getAlgorithms *, const char*, const char*);

#ifndef soap_read_omws__getAlgorithms
#define soap_read_omws__getAlgorithms(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getAlgorithms(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getAlgorithms * SOAP_FMAC2 soap_instantiate_omws__getAlgorithms(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getAlgorithms * soap_new_omws__getAlgorithms(struct soap *soap, int n = -1) { return soap_instantiate_omws__getAlgorithms(soap, n, NULL, NULL, NULL); }

inline struct omws__getAlgorithms * soap_new_req_omws__getAlgorithms(struct soap *soap) { struct omws__getAlgorithms *_p = soap_instantiate_omws__getAlgorithms(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getAlgorithms(soap, _p); } return _p; }

inline struct omws__getAlgorithms * soap_new_set_omws__getAlgorithms(struct soap *soap, void *_) { struct omws__getAlgorithms *_p = soap_instantiate_omws__getAlgorithms(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getAlgorithms(soap, _p); _p->_ = _; } return _p; }

inline void soap_delete_omws__getAlgorithms(struct soap *soap, struct omws__getAlgorithms *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getAlgorithms(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__getAlgorithmsResponse
#define SOAP_TYPE_omws_omws__getAlgorithmsResponse (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getAlgorithmsResponse(struct soap*, struct omws__getAlgorithmsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getAlgorithmsResponse(struct soap*, const struct omws__getAlgorithmsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getAlgorithmsResponse(struct soap*, const char*, int, const struct omws__getAlgorithmsResponse *, const char*);
SOAP_FMAC3 struct omws__getAlgorithmsResponse * SOAP_FMAC4 soap_in_omws__getAlgorithmsResponse(struct soap*, const char*, struct omws__getAlgorithmsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getAlgorithmsResponse(struct soap*, const struct omws__getAlgorithmsResponse *, const char*, const char*);

#ifndef soap_write_omws__getAlgorithmsResponse
#define soap_write_omws__getAlgorithmsResponse(soap, data) ( omws::soap_serialize_omws__getAlgorithmsResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__getAlgorithmsResponse(soap, data, "omws:getAlgorithmsResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getAlgorithmsResponse * SOAP_FMAC4 soap_get_omws__getAlgorithmsResponse(struct soap*, struct omws__getAlgorithmsResponse *, const char*, const char*);

#ifndef soap_read_omws__getAlgorithmsResponse
#define soap_read_omws__getAlgorithmsResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__getAlgorithmsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__getAlgorithmsResponse * SOAP_FMAC2 soap_instantiate_omws__getAlgorithmsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__getAlgorithmsResponse * soap_new_omws__getAlgorithmsResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__getAlgorithmsResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__getAlgorithmsResponse * soap_new_req_omws__getAlgorithmsResponse(struct soap *soap) { struct omws__getAlgorithmsResponse *_p = soap_instantiate_omws__getAlgorithmsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getAlgorithmsResponse(soap, _p); } return _p; }

inline struct omws__getAlgorithmsResponse * soap_new_set_omws__getAlgorithmsResponse(struct soap *soap, wchar_t *om__AvailableAlgorithms) { struct omws__getAlgorithmsResponse *_p = soap_instantiate_omws__getAlgorithmsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__getAlgorithmsResponse(soap, _p); _p->om__AvailableAlgorithms = om__AvailableAlgorithms; } return _p; }

inline void soap_delete_omws__getAlgorithmsResponse(struct soap *soap, struct omws__getAlgorithmsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__getAlgorithmsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__ping
#define SOAP_TYPE_omws_omws__ping (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__ping(struct soap*, struct omws__ping *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__ping(struct soap*, const struct omws__ping *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__ping(struct soap*, const char*, int, const struct omws__ping *, const char*);
SOAP_FMAC3 struct omws__ping * SOAP_FMAC4 soap_in_omws__ping(struct soap*, const char*, struct omws__ping *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__ping(struct soap*, const struct omws__ping *, const char*, const char*);

#ifndef soap_write_omws__ping
#define soap_write_omws__ping(soap, data) ( omws::soap_serialize_omws__ping(soap, data), soap_begin_send(soap) || omws::soap_put_omws__ping(soap, data, "omws:ping", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__ping * SOAP_FMAC4 soap_get_omws__ping(struct soap*, struct omws__ping *, const char*, const char*);

#ifndef soap_read_omws__ping
#define soap_read_omws__ping(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__ping(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__ping * SOAP_FMAC2 soap_instantiate_omws__ping(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__ping * soap_new_omws__ping(struct soap *soap, int n = -1) { return soap_instantiate_omws__ping(soap, n, NULL, NULL, NULL); }

inline struct omws__ping * soap_new_req_omws__ping(struct soap *soap) { struct omws__ping *_p = soap_instantiate_omws__ping(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__ping(soap, _p); } return _p; }

inline struct omws__ping * soap_new_set_omws__ping(struct soap *soap, void *_) { struct omws__ping *_p = soap_instantiate_omws__ping(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__ping(soap, _p); _p->_ = _; } return _p; }

inline void soap_delete_omws__ping(struct soap *soap, struct omws__ping *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__ping(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_omws_omws__pingResponse
#define SOAP_TYPE_omws_omws__pingResponse (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__pingResponse(struct soap*, struct omws__pingResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__pingResponse(struct soap*, const struct omws__pingResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__pingResponse(struct soap*, const char*, int, const struct omws__pingResponse *, const char*);
SOAP_FMAC3 struct omws__pingResponse * SOAP_FMAC4 soap_in_omws__pingResponse(struct soap*, const char*, struct omws__pingResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__pingResponse(struct soap*, const struct omws__pingResponse *, const char*, const char*);

#ifndef soap_write_omws__pingResponse
#define soap_write_omws__pingResponse(soap, data) ( omws::soap_serialize_omws__pingResponse(soap, data), soap_begin_send(soap) || omws::soap_put_omws__pingResponse(soap, data, "omws:pingResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__pingResponse * SOAP_FMAC4 soap_get_omws__pingResponse(struct soap*, struct omws__pingResponse *, const char*, const char*);

#ifndef soap_read_omws__pingResponse
#define soap_read_omws__pingResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_omws__pingResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct omws__pingResponse * SOAP_FMAC2 soap_instantiate_omws__pingResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct omws__pingResponse * soap_new_omws__pingResponse(struct soap *soap, int n = -1) { return soap_instantiate_omws__pingResponse(soap, n, NULL, NULL, NULL); }

inline struct omws__pingResponse * soap_new_req_omws__pingResponse(struct soap *soap, int status) { struct omws__pingResponse *_p = soap_instantiate_omws__pingResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__pingResponse(soap, _p); _p->status = status; } return _p; }

inline struct omws__pingResponse * soap_new_set_omws__pingResponse(struct soap *soap, int status) { struct omws__pingResponse *_p = soap_instantiate_omws__pingResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_omws__pingResponse(soap, _p); _p->status = status; } return _p; }

inline void soap_delete_omws__pingResponse(struct soap *soap, struct omws__pingResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_omws__pingResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_omws_SOAP_ENV__Header
#define SOAP_TYPE_omws_SOAP_ENV__Header (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( omws::soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || omws::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap, char *omws__version) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); _p->omws__version = omws__version; } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_omws_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_omws_PointerToSOAP_ENV__Reason (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( omws::soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_omws_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_omws_PointerToSOAP_ENV__Detail (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( omws::soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_omws_PointerToSOAP_ENV__Code
#define SOAP_TYPE_omws_PointerToSOAP_ENV__Code (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( omws::soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_omws_PointerToomws__getResultsResponse
#define SOAP_TYPE_omws_PointerToomws__getResultsResponse (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getResultsResponse(struct soap*, struct omws__getResultsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getResultsResponse(struct soap*, const char *, int, struct omws__getResultsResponse *const*, const char *);
SOAP_FMAC3 struct omws__getResultsResponse ** SOAP_FMAC4 soap_in_PointerToomws__getResultsResponse(struct soap*, const char*, struct omws__getResultsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getResultsResponse(struct soap*, struct omws__getResultsResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__getResultsResponse
#define soap_write_PointerToomws__getResultsResponse(soap, data) ( omws::soap_serialize_PointerToomws__getResultsResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__getResultsResponse(soap, data, "omws:getResultsResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getResultsResponse ** SOAP_FMAC4 soap_get_PointerToomws__getResultsResponse(struct soap*, struct omws__getResultsResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__getResultsResponse
#define soap_read_PointerToomws__getResultsResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__getResultsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_PointerToomws__runExperimentResponse
#define SOAP_TYPE_omws_PointerToomws__runExperimentResponse (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__runExperimentResponse(struct soap*, struct omws__runExperimentResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__runExperimentResponse(struct soap*, const char *, int, struct omws__runExperimentResponse *const*, const char *);
SOAP_FMAC3 struct omws__runExperimentResponse ** SOAP_FMAC4 soap_in_PointerToomws__runExperimentResponse(struct soap*, const char*, struct omws__runExperimentResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__runExperimentResponse(struct soap*, struct omws__runExperimentResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__runExperimentResponse
#define soap_write_PointerToomws__runExperimentResponse(soap, data) ( omws::soap_serialize_PointerToomws__runExperimentResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__runExperimentResponse(soap, data, "omws:runExperimentResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__runExperimentResponse ** SOAP_FMAC4 soap_get_PointerToomws__runExperimentResponse(struct soap*, struct omws__runExperimentResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__runExperimentResponse
#define soap_read_PointerToomws__runExperimentResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__runExperimentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_PointerToomws__getSamplingResultResponse
#define SOAP_TYPE_omws_PointerToomws__getSamplingResultResponse (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getSamplingResultResponse(struct soap*, struct omws__getSamplingResultResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getSamplingResultResponse(struct soap*, const char *, int, struct omws__getSamplingResultResponse *const*, const char *);
SOAP_FMAC3 struct omws__getSamplingResultResponse ** SOAP_FMAC4 soap_in_PointerToomws__getSamplingResultResponse(struct soap*, const char*, struct omws__getSamplingResultResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getSamplingResultResponse(struct soap*, struct omws__getSamplingResultResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__getSamplingResultResponse
#define soap_write_PointerToomws__getSamplingResultResponse(soap, data) ( omws::soap_serialize_PointerToomws__getSamplingResultResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__getSamplingResultResponse(soap, data, "omws:getSamplingResultResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getSamplingResultResponse ** SOAP_FMAC4 soap_get_PointerToomws__getSamplingResultResponse(struct soap*, struct omws__getSamplingResultResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__getSamplingResultResponse
#define soap_read_PointerToomws__getSamplingResultResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__getSamplingResultResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_PointerToomws__modelEvaluationResponse
#define SOAP_TYPE_omws_PointerToomws__modelEvaluationResponse (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__modelEvaluationResponse(struct soap*, struct omws__modelEvaluationResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__modelEvaluationResponse(struct soap*, const char *, int, struct omws__modelEvaluationResponse *const*, const char *);
SOAP_FMAC3 struct omws__modelEvaluationResponse ** SOAP_FMAC4 soap_in_PointerToomws__modelEvaluationResponse(struct soap*, const char*, struct omws__modelEvaluationResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__modelEvaluationResponse(struct soap*, struct omws__modelEvaluationResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__modelEvaluationResponse
#define soap_write_PointerToomws__modelEvaluationResponse(soap, data) ( omws::soap_serialize_PointerToomws__modelEvaluationResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__modelEvaluationResponse(soap, data, "omws:modelEvaluationResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__modelEvaluationResponse ** SOAP_FMAC4 soap_get_PointerToomws__modelEvaluationResponse(struct soap*, struct omws__modelEvaluationResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__modelEvaluationResponse
#define soap_read_PointerToomws__modelEvaluationResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__modelEvaluationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_PointerToomws__getProjectionMetadataResponse
#define SOAP_TYPE_omws_PointerToomws__getProjectionMetadataResponse (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getProjectionMetadataResponse(struct soap*, struct omws__getProjectionMetadataResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getProjectionMetadataResponse(struct soap*, const char *, int, struct omws__getProjectionMetadataResponse *const*, const char *);
SOAP_FMAC3 struct omws__getProjectionMetadataResponse ** SOAP_FMAC4 soap_in_PointerToomws__getProjectionMetadataResponse(struct soap*, const char*, struct omws__getProjectionMetadataResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getProjectionMetadataResponse(struct soap*, struct omws__getProjectionMetadataResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__getProjectionMetadataResponse
#define soap_write_PointerToomws__getProjectionMetadataResponse(soap, data) ( omws::soap_serialize_PointerToomws__getProjectionMetadataResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__getProjectionMetadataResponse(soap, data, "omws:getProjectionMetadataResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getProjectionMetadataResponse ** SOAP_FMAC4 soap_get_PointerToomws__getProjectionMetadataResponse(struct soap*, struct omws__getProjectionMetadataResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__getProjectionMetadataResponse
#define soap_read_PointerToomws__getProjectionMetadataResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__getProjectionMetadataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_PointerToomws__testResponse
#define SOAP_TYPE_omws_PointerToomws__testResponse (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__testResponse(struct soap*, struct omws__testResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__testResponse(struct soap*, const char *, int, struct omws__testResponse *const*, const char *);
SOAP_FMAC3 struct omws__testResponse ** SOAP_FMAC4 soap_in_PointerToomws__testResponse(struct soap*, const char*, struct omws__testResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__testResponse(struct soap*, struct omws__testResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__testResponse
#define soap_write_PointerToomws__testResponse(soap, data) ( omws::soap_serialize_PointerToomws__testResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__testResponse(soap, data, "omws:testResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__testResponse ** SOAP_FMAC4 soap_get_PointerToomws__testResponse(struct soap*, struct omws__testResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__testResponse
#define soap_read_PointerToomws__testResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__testResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_PointerToomws__getModelResponse
#define SOAP_TYPE_omws_PointerToomws__getModelResponse (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getModelResponse(struct soap*, struct omws__getModelResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getModelResponse(struct soap*, const char *, int, struct omws__getModelResponse *const*, const char *);
SOAP_FMAC3 struct omws__getModelResponse ** SOAP_FMAC4 soap_in_PointerToomws__getModelResponse(struct soap*, const char*, struct omws__getModelResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getModelResponse(struct soap*, struct omws__getModelResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__getModelResponse
#define soap_write_PointerToomws__getModelResponse(soap, data) ( omws::soap_serialize_PointerToomws__getModelResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__getModelResponse(soap, data, "omws:getModelResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getModelResponse ** SOAP_FMAC4 soap_get_PointerToomws__getModelResponse(struct soap*, struct omws__getModelResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__getModelResponse
#define soap_read_PointerToomws__getModelResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__getModelResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_PointerToomws__getLayersResponse
#define SOAP_TYPE_omws_PointerToomws__getLayersResponse (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getLayersResponse(struct soap*, struct omws__getLayersResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getLayersResponse(struct soap*, const char *, int, struct omws__getLayersResponse *const*, const char *);
SOAP_FMAC3 struct omws__getLayersResponse ** SOAP_FMAC4 soap_in_PointerToomws__getLayersResponse(struct soap*, const char*, struct omws__getLayersResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getLayersResponse(struct soap*, struct omws__getLayersResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__getLayersResponse
#define soap_write_PointerToomws__getLayersResponse(soap, data) ( omws::soap_serialize_PointerToomws__getLayersResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__getLayersResponse(soap, data, "omws:getLayersResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getLayersResponse ** SOAP_FMAC4 soap_get_PointerToomws__getLayersResponse(struct soap*, struct omws__getLayersResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__getLayersResponse
#define soap_read_PointerToomws__getLayersResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__getLayersResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_PointerToomws__getAlgorithmsResponse
#define SOAP_TYPE_omws_PointerToomws__getAlgorithmsResponse (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getAlgorithmsResponse(struct soap*, struct omws__getAlgorithmsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getAlgorithmsResponse(struct soap*, const char *, int, struct omws__getAlgorithmsResponse *const*, const char *);
SOAP_FMAC3 struct omws__getAlgorithmsResponse ** SOAP_FMAC4 soap_in_PointerToomws__getAlgorithmsResponse(struct soap*, const char*, struct omws__getAlgorithmsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getAlgorithmsResponse(struct soap*, struct omws__getAlgorithmsResponse *const*, const char*, const char*);

#ifndef soap_write_PointerToomws__getAlgorithmsResponse
#define soap_write_PointerToomws__getAlgorithmsResponse(soap, data) ( omws::soap_serialize_PointerToomws__getAlgorithmsResponse(soap, data), soap_begin_send(soap) || omws::soap_put_PointerToomws__getAlgorithmsResponse(soap, data, "omws:getAlgorithmsResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct omws__getAlgorithmsResponse ** SOAP_FMAC4 soap_get_PointerToomws__getAlgorithmsResponse(struct soap*, struct omws__getAlgorithmsResponse **, const char*, const char*);

#ifndef soap_read_PointerToomws__getAlgorithmsResponse
#define soap_read_PointerToomws__getAlgorithmsResponse(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_PointerToomws__getAlgorithmsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_wstring
#define SOAP_TYPE_omws_wstring (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap*, wchar_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap*, const char*, int, wchar_t*const*, const char*);
SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap*, const char*, wchar_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap*, wchar_t *const*, const char*, const char*);

#ifndef soap_write_wstring
#define soap_write_wstring(soap, data) ( omws::soap_serialize_wstring(soap, data), soap_begin_send(soap) || omws::soap_put_wstring(soap, data, "wchar", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap*, wchar_t **, const char*, const char*);

#ifndef soap_read_wstring
#define soap_read_wstring(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_wstring(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws__QName
#define SOAP_TYPE_omws__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( omws::soap_serialize__QName(soap, data), soap_begin_send(soap) || omws::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !omws::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_omws_string
#define SOAP_TYPE_omws_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( omws::soap_serialize_string(soap, data), soap_begin_send(soap) || omws::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !omws::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


} // namespace omws


#endif

/* End of omwsH.h */
