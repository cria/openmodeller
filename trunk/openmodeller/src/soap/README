OVERVIEW:
---------
The available SOAP interface is an initial effort to provide 
modelling services across the web. The current implementation 
is still a prototype, but has enough functionality to be used  
in production environment.

The implementation is completely based on gSOAP v2.7
(http://gsoap2.sourceforge.net) and has only been tested with 
Linux. The gSOAP library seems to be compliant with "Windows, 
Unix, Linux, Pocket PC, Mac OS X, TRU64, VxWorks, etc". However,
parts of the openModeller SOAP server code are not prepared
to run in other platforms - these parts include sigpipe 
handling (if multi-threading is enabled) and unique temporary 
file name generator (mkstemp function).

Note: although the SOAP server is already prepared to run as a
multi-threaded daemon server, openModeller is not!!

CURRENT FUNCTIONALITY:
---------------------

- Server can run as a CGI application, stand alone server (daemon), 
  or multi-threaded server.
- Server can handle getAlgorithms requests (returning metadata 
  about all available algorithms).
- Server can handle getLayers requests (returning all available 
  layers).
- Server can handle createModel requests.
- Server can handle getModel requests.
- Server can handle projectModel requests.
- Server can handle getProgress requests (althugh only using 0% and 
  100%).
- Server can handle getLog requests.
- Server can handle getLayerAsUrl requests for distribution maps.
- Server can handle getLayerAsAttachment requests for distribution
  maps (returning maps as DIME attachments).
- Server can handle getProjectionMetadata requests.
- A simple command line perl client is available (depends on 
  SOAP::Lite version >= 0.67). It can invoke all methods, but
  occurrence points are still hard coded and projectModel parameters 
  are also hard coded.


COMPILING THE SERVER:
---------------------

By default the SOAP server is not compiled. To enable it:

 ./configure --enable-soap
 make

Note: gSOAP doesn't need to be installed to run openModeller's 
SOAP server - all necessary files are included in the distribution.


USE INSTRUCTIONS:
----------------

- To run the server as a CGI application, just put it inside an 
  accessible cgi-bin directory:

  cp om_soap_server /var/www/cgi-bin/om_soap_server.cgi

- To run the server as a stand alone non-multi-threaded service,
  just start it passing as a parameter the port number and then
  another parameter indicating the number of threads (=1):

  ./om_soap_server 8085 1 &

- To run the server as a stand alone multi-threaded service, just
  start it passing as a parameter the port number and then another
  parameter indicating the number of threads (>1). 

  ./om_soap_server 8085 10 &

- To configure the server copy the "server.conf" file provided to a 
  into directory called "config" (paralell to the directory where the 
  server is going to run). Edit the file and make all necessary changes. 
  You'll probably need to create a directory that will store all job 
  tickets and another one to store all distribution maps. Bear in mind 
  that these directories will need to be writtable by the user running 
  the server (eg. apache, or www-data if running as a CGI under apache).

  For instance, if running as a CGI:

  # Create config dir
  mkdir /var/www/config

  # Ensure that web server user has read permissions
  chown root.apache /var/www/config

  # Copy sample conf file
  cp server.conf /var/www/config

  # Edit file
  vim /var/www/config/server.conf

- Add a cron job to run scheduler.sh every minute (or more frequently)
  passing as parameters to the script the ticket directory and the 
  distribution map directory.

- Run the client to test your server (you'll need Perl and the 
  SOAP::Lite module):

  perl sampleClient.pl --server=http://localhost:8085/

  For more options, use:

  perl sampleClient.pl --help


TODO-LIST:
----------

- Find a way to track progress of model and map generation in a more 
  refined way on the server side.
- Find a way to check if a job finished correctly or not.
- Create new "cancelJob" request (need to change the library first).
- Include option to generate Condor job requests.
- Include option to read maps from TerraLib databases on the server side.
- Improve Perl client to read occurrences from species files.
- Improve Perl client to store models in the current directory
  and use them as parameters in projectModel requests.
- Improve Perl client to specify projection environment and output parameters
  in projectModel requests.
- Improve Perl client to store maps in current directory after calling getMap 
  requests (but first SOAP::lite needs to support dime attachments).
- Improve server to also return environmental layers in getLayerAsUrl and
  getLayerAsAttachment.
- Implement garbage collecttion for distribution maps on the server side.
- Implement sigpipe handler.
- Find portable and better solution to unique temporary files.


MAINTENANCE:
-----------

- To change anything in the SOAP interface it is necessary
  to have gSOAP installed.

- To generate the SOAP stubs and skeletons use:
 
  soapcpp2 om_soap.hh

- To activate server debug logging, add -DDEBUG in the
  beginning of om_soap_server_CPPFLAGS in Makefile.am
