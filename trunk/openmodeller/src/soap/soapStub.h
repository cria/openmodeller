/* soapStub.h
   Generated by gSOAP 2.5.2 from om_soap.hh
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under the gSOAP public license and GPL.
   See README.txt for further details.
*/
#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

SOAP_BEGIN_NAMESPACE(soap)

/* Enumerations */

/* Classes and Structs */

/* SOAP Header: */
struct SOAP_ENV__Header
{
	char *om__version;
};

/* soap-AlgorithmParameter: */
struct soap_AlgorithmParameter
{
	char *om_id;	/* attribute */
	char *name;
	char *data_type;
	char *overview;
	char *description;
	int has_min;
	double min;
	int has_max;
	double max;
	char *typical_value;
};

/* soap-AlgorithmMetadata: */
struct soap_AlgorithmMetadata
{
	char *om_id;	/* attribute */
	char *name;
	char *version;
	char *overview;
	char *description;
	char *creator;
	char *bibliography;
	char *developer;
	char *contact;
	int accepts_categorical_maps;
	int accepts_absence_points;
	int __size;	/* sequence of elements <parameter> */
	struct soap_AlgorithmParameter *__ptrparameter;
};

/* soap-Algorithms: */
struct soap_Algorithms
{
	int __size;	/* sequence of elements <algorithm> */
	struct soap_AlgorithmMetadata *__ptralgorithm;
};

/* om:getAlgorithmsResponse: */
struct om__getAlgorithmsResponse
{
	struct soap_Algorithms _return;	/* return */
};

/* om:getAlgorithms: */
struct om__getAlgorithms
{
	void *_;	/* transient */
};

/* soap-Point: */
struct soap_Point
{
	double latitude;	/* attribute */
	double longitude;	/* attribute */
};

/* soap-PresencePoints: */
struct soap_PresencePoints
{
	int __size;	/* sequence of elements <point> */
	struct soap_Point *__ptrpoint;
};

/* soap-AbsencePoints: */
struct soap_AbsencePoints
{
	int __size;	/* sequence of elements <point> */
	struct soap_Point *__ptrpoint;
};

/* soap-Points: */
struct soap_Points
{
	char *coordsystem;
	struct soap_PresencePoints *__ptrpresences;
	struct soap_AbsencePoints *__ptrabsences;
};

/* soap-Map: */
struct soap_Map
{
	char *location;	/* attribute */
	int categorical;	/* attribute */
};

/* soap-Maps: */
struct soap_Maps
{
	int __size;	/* sequence of elements <map> */
	struct soap_Map *__ptrmap;
};

/* soap-Mask: */
struct soap_Mask
{
	char *location;	/* attribute */
};

/* soap-Parameter: */
struct soap_Parameter
{
	char *om_id;	/* attribute */
	char *value;	/* attribute */
};

/* soap-Algorithm: */
struct soap_Algorithm
{
	char *om_id;	/* attribute */
	int __size;	/* sequence of elements <parameter> */
	struct soap_Parameter *__ptrparameter;
};

/* soap-Output: */
struct soap_Output
{
	char *header;
	int scale;
	char *format;
};

/* om:createModelResponse: */
struct om__createModelResponse
{
	char **ticket;	/* return */
};

/* om:createModel: */
struct om__createModel
{
	struct soap_Points *points;
	struct soap_Maps *maps;
	struct soap_Mask *mask;
	struct soap_Algorithm *algorithm;
	struct soap_Output *output;
};



/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;	/* sequence of elements <id> */
	char *id;
	char *type;
	char *options;
	xsd__base64Binary();
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } // = unique id SOAP_TYPE_xsd__base64Binary
	virtual void soap_default(struct soap*); 
	virtual void soap_serialize(struct soap*) const;
	virtual void soap_mark(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*); 
};

/* om:getDistributionMapResponse: */
struct om__getDistributionMapResponse
{
	xsd__base64Binary file;	/* return */
};

/* om:getDistributionMap: */
struct om__getDistributionMap
{
	char *ticket;
};

/* om:pingResponse: */
struct om__pingResponse
{
	int *status;	/* return */
};

/* om:ping: */
struct om__ping
{
	void *_;	/* transient */
};

/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;
	char *SOAP_ENV__Node;
	char *SOAP_ENV__Role;
};

/* SOAP-ENV:Detail: */
struct SOAP_ENV__Detail
{
	int __type;	/* any type of element <value> */
	void *value;	/* transient */
	char *__any;
};

/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;
	char *faultstring;
	char *faultactor;
	struct SOAP_ENV__Detail *detail;
	struct SOAP_ENV__Code *SOAP_ENV__Code;
	char *SOAP_ENV__Reason;
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;
};

/* Types With Custom (De)serializers: */

/* Typedefs */
typedef char *_XML;
typedef char *_QName;
typedef char *xsd__string;
typedef double xsd__double;
typedef int xsd__int;
typedef struct soap_AlgorithmParameter om__AlgorithmParameter;
typedef struct soap_AlgorithmMetadata om__AlgorithmMetadata;
typedef struct soap_Algorithms om__Algorithms;
typedef struct soap_Point om__Point;
typedef struct soap_PresencePoints om__PresencePoints;
typedef struct soap_AbsencePoints om__AbsencePoints;
typedef struct soap_Points om__Points;
typedef struct soap_Map om__Map;
typedef struct soap_Maps om__Maps;
typedef struct soap_Mask om__Mask;
typedef struct soap_Parameter om__Parameter;
typedef struct soap_Algorithm om__Algorithm;
typedef struct soap_Output om__Output;

/* Extern */

/* Remote Methods */

SOAP_FMAC5 int SOAP_FMAC6 om__getAlgorithms(struct soap*, void *, struct om__getAlgorithmsResponse &);

SOAP_FMAC5 int SOAP_FMAC6 om__createModel(struct soap*, struct soap_Points *, struct soap_Maps *, struct soap_Mask *, struct soap_Algorithm *, struct soap_Output *, char **);

SOAP_FMAC5 int SOAP_FMAC6 om__getDistributionMap(struct soap*, char *, xsd__base64Binary &);

SOAP_FMAC5 int SOAP_FMAC6 om__ping(struct soap*, void *, int *);

/* Stubs */

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__getAlgorithms(struct soap*, const char*, const char*, void *, struct om__getAlgorithmsResponse &);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__createModel(struct soap*, const char*, const char*, struct soap_Points *, struct soap_Maps *, struct soap_Mask *, struct soap_Algorithm *, struct soap_Output *, char **);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__getDistributionMap(struct soap*, const char*, const char*, char *, xsd__base64Binary &);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__ping(struct soap*, const char*, const char*, void *, int *);

/* Skeletons */

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__getAlgorithms(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__createModel(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__getDistributionMap(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__ping(struct soap*);

SOAP_END_NAMESPACE(soap)

#endif

/* end of soapStub.h */
