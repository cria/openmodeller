The openModeller Web Service
Renato De Giovanni
Last updated: 18th January 2012
%! target       : html
%! style        : w3c_main.css
%! style        : w3c_examples.css
%! Options      : --toc --toc-level 3 --enum-title --css-sugar
%! preproc      : OM_URL   http://openmodeller.sf.net/
%! PostProc(html): '(?i)(<pre>)' '<div class="exampleInner">\1'
%! PostProc(html): '(?i)(</pre>)' '\1</div>'
%! encoding: iso-8859-1

% These are comments and will not be generated in any output
% -------------------
%
% This document is in text2tags format. You can generate html, plain text and
% moinmoin formatted documentation by running txt2tags on this document. See the
% txt2tags home page for more details. Please insert manual line breaks in this
% document as it makes diffing for changes much easier. To do this in vim 
% automatically, select a section then issue (gq) command. Please dont
% apply vim formatting to the whole document as it screws up some formatting
% rather apply it selectively to paragraphs where needed.
%
% To generate the text version of this document:
% python t2t.py -t txt --toc --enum-title -o web_service.txt web_service.t2t
% To generate the moinmoin version of this document
% python t2t.py -t moin --toc --enum-title -o web_service.moin web_service.t2t
% To generate the html version of this document
% python t2t.py -t html --toc --enum-title -o web_service.html web_service.t2t
%
% End of comments
% -------------------

= Introduction =

This document describes the openModeller web service interface
(OMWS). This interface was created so that the main ecological niche
modelling functionalities provided by openModeller could be available
in a standardized way over the web to other programs. Therefore the
target audience for this document are developers who want to write
programs that will interact with instances of the openModeller web
service. It is assumed that readers have basic understanding about
ecological niche modelling (for more information:
http://en.wikipedia.org/wiki/Environmental_niche_modelling), basic
understanding of openModeller (for more information:
http://openmodeller.sf.net) and knowledge about web services.

= Technical details =

OMWS is based on SOAP following the document/literal style. The whole
interface is programatically defined in a WSDL file and contains the
main operations to run ecological niche modelling experiments:

http://openmodeller.cria.org.br/ws/1.0/openModeller.wsdl

All XML elements, attributes, structure and data types are defined in
a separate XML Schema compatible with all openModeller serializable
objects:

http://openmodeller.cria.org.br/xml/1.0/openModeller.xsd

= Overview of the implementations =

So far there is only one implementation of the server developed in C++
using gSOAP. This implementation is available as part of the
openModeller code under the src/soap directory. The server can run as
a CGI application, a stand alone server (daemon) or a multi-threaded
server in the future (until now openModeller is not known to be
thread-safe). By using gSOAP, stubs are also available for developers
willing to write clients in C++ (openModeller Desktop, for example,
uses those stubs). There is also a simple command-line client written
in Perl that depends on the SOAPLite Perl module. This client is also
available under the same directory in the openModeller source code
(src/soap/sampleClient.pl). Finally, there is code in Java to interact
with the service. This is available in the GBIF code base and is being
used by the GBIF portal to generate niche models:
http://code.google.com/p/gbif-dataportal/source/browse/trunk/portal-web/src/main/java/org/gbif/portal/web/controller/openmodeller/

= Service instances =

Currently the following instances are publicly available:

http://modeller.cria.org.br/cgi-bin/om_soap_server.cgi

http://modeller.cria.org.br/ws1/om

Note: you need a SOAP client to interact with these URLs! If you click on the links using your browser you may get an error.

= Interaction with the service =

Although the number of operations available on the service is
relatively small, there are many different ways to use them. Figure 1
shows a typical workflow as an example. Some people may be interested
only in the models - without even testing of projecting them. Others
may want to project only if a test indicates that the results are good
enough. This can actually be done in different ways, since the model
result also includes statistics for the training dataset, while
"testModel" requests are usually performed with an external
dataset. Even model creation may be conditioned by previous tests
involving preliminary models created with different subsets of the
input data (through n-fold cross validation, for instance). Multiple
projections can also be requested when there is more than one
environmental scenario available.

[ws_diagram_small.png]
**Figure 1:** Typical workflow to interact with the service. Boxes with solid lines indicate calls to service operations. Boxes with dashed lines indicate external tasks, except those indicating the whole "getProgress" procedure. 

To better understand the functionality, it is important to note that a
"model" for openModeller is the mathemathical representation of the
ecological niche. If we take a simple algorithm like Bioclim for
example, the model will be the bioclimatic envelopes and the logic
that says that inside the inner envelope the environmental conditions
are suitable (corresponding to the numerical value 1), inside the
marginal envelope the environmental conditions can still be considered
acceptable (corresponding to 0.5) and outiside the marginal envelope
the environmental conditions are unsuitable (corresponding to
0). Therefore, the operation "createModel" will request the creation
of that kind of model - not a map! The result of "getModel" will be
the serialized model, which in the case of Bioclim will be just the
bioclimatic envelopes (minimum, maximum, average and standard
deviation cutoff for each variable). Two things can be done with a
model in OMWS: it can be tested as many times as necessary (getting
back statistical results as a confusion matrix and/or ROC curve) or it
can be projected into a geographic region given an environmental
scenario. This can also be done as many times as necessary. The result
of model projection is finally the potential distribution map in the
form of a georeferenced raster.

As can be seen, OMWS is centered around a few core operations for
ecological niche modelling, not covering other related things such as
data cleaning, splitting points into test/training, pre-analysis on
input data, post processing distribution maps, etc. Nevertheless,
these core operations can still be used and combined in many different
ways, keeping the interface simple and effective.

= Operations =

== ping ==

Indicates service availability. In a broader sense, service
availability is not just related with connectivity. It also involves
correct configuration on the server side. Server implementations can
therefore use this method to check as much as possible that the server
is prepared to properly handle all requests. Clients must get a
<status>1</status> if the service is available, or a SOAP fault. Additionally,
server implementations may use the <version> element in the header to
indicate their name and version.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
               xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
               soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <omws:ping xsi:nil="true" xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" />
  </soap:Body>
</soap:Envelope>
```
**Example 1:** ping request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Header>
    <omws:version>oM Server 1.0 (openModeller 1.2.0)</omws:version>
  </SOAP-ENV:Header>
  <SOAP-ENV:Body>
    <omws:pingResponse>
      <status>1</status>
    </omws:pingResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 2:** ping response.

== getAlgorithms ==

Returns metadata about all modelling algorithms available.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
               xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
               soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <omws:getAlgorithms xsi:nil="true" xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" />
  </soap:Body>
</soap:Envelope>
```
**Example 3:** getAlgorithms request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:getAlgorithmsResponse>
      <AvailableAlgorithms>
        <Algorithms>
          <Algorithm Id="SVM" Version="0.4">
          <Name>SVM (Support Vector Machines)</Name>
          <Overview>Support vector machines (SVMs) are a set of related supervised learning methods that belong to 
a family of generalized linear classifiers. They can also be considered a special case of Tikhonov regularization. 
A special property of SVMs is that they simultaneously minimize the empirical classification error and maximize the 
geometric margin; hence they are also known as maximum margin classifiers. Content retrieved from Wikipedia on the 
13th of June, 2007: http://en.wikipedia.org/w/index.php?title=Support_vector_machine&amp;oldid=136646498.
          </Overview>
          <Description>Support vector machines map input vectors to a higher dimensional space where a maximal 
separating hyperplane is constructed. Two parallel hyperplanes are constructed on each side of the hyperplane that 
separates the data. The separating hyperplane is the hyperplane that maximises the distance between the two parallel 
hyperplanes. An assumption is made that the larger the margin or distance between these parallel hyperplanes the 
better the generalisation error of the classifier will be. The model produced by support vector classification only 
depends on a subset of the training data, because the cost function for building the model does not care about 
training points that lie beyond the margin. Content retrieved from Wikipedia on the 13th of June, 2007: 
http://en.wikipedia.org/w/index.php?title=Support_vector_machine&amp;oldid=136646498. The openModeller implementation 
of SVMs makes use of the libsvm library version 2.85: Chih-Chung Chang and Chih-Jen Lin, LIBSVM: a library for support 
vector machines, 2001. Software available at http://www.csie.ntu.edu.tw/~cjlin/libsvm.

Release history:
 version 0.1: initial release
 version 0.2: New parameter to specify the number of pseudo-absences to be generated; 
              Upgraded to libsvm 2.85; 
              Fixed memory leaks
          </Description>
          <Designers>
            <Designer Name="Vladimir N. Vapnik"/>
          </Designers>
          <Bibliography>
1) Vapnik, V. (1995) The Nature of Statistical Learning Theory. SpringerVerlag. 
2) Sch&#246;lkopf, B., Smola, A., Williamson, R. and Bartlett, P.L.(2000). New support vector algorithms. Neural Computation, 
   12, 1207-1245. 
3) Sch&#246;lkopf, B., Platt, J.C., Shawe-Taylor, J., Smola A.J. and Williamson, R.C. (2001). Estimating the support of a 
   high-dimensional distribution. Neural Computation, 13, 1443-1471. 
4) Cristianini, N. &amp; Shawe-Taylor, J. (2000). An Introduction to Support Vector Machines and other kernel-based learning 
   methods. Cambridge University Press.
          </Bibliography>
          <Developers>
            <Developer Name="Renato De Giovanni in collaboration with Ana Carolina Lorena" 
                       Contact="renato [at] cria . org . br"/>
          </Developers>
          <AcceptsCategoricalMaps>0</AcceptsCategoricalMaps>
          <RequiresAbsencePoints>0</RequiresAbsencePoints>
          <Parameters>
            <Parameter Id="SvmType">
              <Name>SVM type</Name>
              <Type>Integer</Type>
              <Overview>Type of SVM: 0 = C-SVC, 1 = Nu-SVC, 2 = one-class SVM</Overview>
              <Description>Type of SVM: 0 = C-SVC, 1 = Nu-SVC, 2 = one-class SVM</Description>
              <AcceptedRange Min="0" Max="2"/>
              <Default>0</Default>
            </Parameter>
            <Parameter Id="KernelType">
              <Name>Kernel type</Name>
              <Type>Integer</Type>
              <Overview>Type of kernel function: 0 = linear: u'*v , 1 = polynomial: (gamma*u'*v + coef0)^degree , 
2 = radial basis function: exp(-gamma*|u-v|^2)
              </Overview>
              <Description>Type of kernel function: 0 = linear: u'*v , 1 = polynomial: (gamma*u'*v + coef0)^degree , 
2 = radial basis function: exp(-gamma*|u-v|^2)</Description>
              <AcceptedRange Min="0" Max="4"/>
              <Default>2</Default>
            </Parameter>
            <Parameter Id="Degree">
              <Name>Degree</Name>
              <Type>Integer</Type>
              <Overview>Degree in kernel function (only for polynomial kernels).</Overview>
              <Description>Degree in kernel function (only for polynomial kernels).</Description>
              <AcceptedRange Min="0"/>
              <Default>3</Default>
            </Parameter>
            <Parameter Id="Gamma">
              <Name>Gamma</Name>
              <Type>Real</Type>
              <Overview>Gamma in kernel function (only for polynomial and radial basis kernels). When set to zero, the 
default value will actually be 1/k, where k is the number of layers.</Overview>
              <Description>Gamma in kernel function (only for polynomial and radial basis kernels). When set to zero, the 
default value will actually be 1/k, where k is the number of layers.</Description>
               <Default>0</Default>
             </Parameter>
             <Parameter Id="Coef0">
               <Name>Coef0</Name>
               <Type>Real</Type>
               <Overview>Coef0 in kernel function (only for polynomial kernels).</Overview>
               <Description>Coef0 in kernel function (only for polynomial kernels).</Description>
               <Default>0</Default>
             </Parameter>
             <Parameter Id="C">
                <Name>Cost</Name>
                <Type>Real</Type>
                <Overview>Cost (only for C-SVC types).</Overview>
                <Description>Cost (only for C-SVC types).</Description>
                <AcceptedRange Min="0.001"/>
                <Default>1</Default>
              </Parameter>
              <Parameter Id="Nu">
                <Name>Nu</Name>
                <Type>Real</Type>
                <Overview>Nu (only for Nu-SVC and one-class SVM).</Overview>
                <Description>Nu (only for Nu-SVC and one-class SVM).</Description>
                <AcceptedRange Min="0.001" Max="1"/>
                <Default>0.5</Default>
              </Parameter>
              <Parameter Id="ProbabilisticOutput">
                <Name>Probabilistic output</Name>
                <Type>Integer</Type>
                <Overview>Indicates if the output should be a probability instead of a binary response (only available for 
C-SVC and Nu-SVC).</Overview>
                <Description>Indicates if the output should be a probability instead of a binary response (only available for 
C-SVC and Nu-SVC).</Description>
                <AcceptedRange Min="0" Max="1"/>
                <Default>1</Default>
              </Parameter>
              <Parameter Id="NumberOfPseudoAbsences">
                <Name>Number of pseudo-absences</Name>
                <Type>Integer</Type>
                <Overview>Number of pseudo-absences to be generated (only for C-SVC and Nu-SVC when no absences have 
been provided). When absences are needed, a zero parameter will default to the same number of presences.</Overview>
                <Description>Number of pseudo-absences to be generated (only for C-SVC and Nu-SVC when no absences have 
been provided). When absences are needed, a zero parameter will default to the same number of presences.</Description>
                <AcceptedRange Min="0"/>
                <Default>0</Default>
              </Parameter>
            </Parameters>
          </Algorithm>
          <Algorithm Id="ENVSCORE" Version="0.1">
            <Name>Envelope Score</Name>
            <Overview>Uses the minimum and maximum observed value for each environmental variable to define bioclimatic 
envelopes. Probability of occurrence for a point is determined by the number of environmental variables within which the 
environmental values at the point fall into the min/max criteria.</Overview>
            <Description>Implements a lax Bioclimatic Envelope Algorithm. For each given environmental variable the 
algorithm finds the minimum and maximum at all occurrence sites. During model projection, the probability of occurrences 
is determined as:

 p = layers within min-max threshold / number of layers

 Thus choosing a threshold of p=1 gives you the same model output as the original Bioclim model taking both the Suitable 
&amp; Marginal classes as predicted presences. The Envelope Score algorithm is equivalent to the inclusive 'OR' implementation 
of Bioclim described in Pineiro et al (2007).
            </Description>
            <Designers>
              <Designer Name="Nix, H. A."/>
            </Designers>
            <Bibliography>Nix, H.A. (1986) A biogeographic analysis of Australian elapid snakes. In: Atlas of Elapid Snakes of 
Australia. (Ed.) R. Longmore, pp. 4-15. Australian Flora and Fauna Series Number 7. Australian Government Publishing Service: 
Canberra.

 Pi&#241;eiro, R., Aguilar, J. F., Munt, D. D. &amp; Feliner, G. N. (2007) Ecology matters: Atlantic-Mediterranean disjunction 
in the sand-dune shrub Armeria pungens (Plumbaginaceae). Molecular Ecology. 16, 2155-2171.
            </Bibliography>
            <Developers>
              <Developer Name="Tim Sutton and Chris Yesson" Contact="tim [at] linfiniti.com"/>
            </Developers>
            <AcceptsCategoricalMaps>0</AcceptsCategoricalMaps>
            <RequiresAbsencePoints>0</RequiresAbsencePoints>
            <Parameters/>
          </Algorithm>
        </Algorithms>
      </AvailableAlgorithms>
    </omws:getAlgorithmsResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 4:** getAlgorithms response.

== getLayers ==

Returns all environmental layers available.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
               xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
               soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <omws:getLayers xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" />
  </soap:Body>
</soap:Envelope>
```
**Example 5:** getLayers request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:getLayersResponse>
      <AvailableLayers xmlns="http://openmodeller.cria.org.br/xml/1.0">
        <LayersGroup Id="1"><Label>layers</Label>
          <LayersGroup Id="2"><Label>climate</Label>
            <LayersGroup Id="3"><Label>terrestrial</Label>
              <LayersGroup Id="4"><Label>global</Label>
                <LayersGroup Id="5"><Label>worldclim</Label>
                  <LayersGroup Id="6"><Label>present</Label>
                    <LayersGroup Id="7"><Label>bioclim</Label>
                      <LayersGroup Id="8"><Label>10arc-minutes</Label>
                        <Layer Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66" HasProjection="0">
                          <Label>bio 01 - Annual Mean Temperature</Label></Layer>
                        <Layer Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/bf441530-04d9-11e1-be50-0800200c9a66" HasProjection="0">
                          <Label>bio 02 - Mean Diurnal Range (Mean of monthly (max temp - min temp))</Label></Layer>
                      </LayersGroup>
                    </LayersGroup>
                  </LayersGroup>
                </LayersGroup>
              </LayersGroup>
            </LayersGroup>
          </LayersGroup>
          <LayersGroup Id="9"><Label>marine</Label>
            <LayersGroup Id="10"><Label>global</Label>
              <LayersGroup Id="11"><Label>incofish</Label>
                <LayersGroup Id="12"><Label>HCAFv4</Label>
                  <LayersGroup Id="13"><Label>present</Label>
                    <LayersGroup Id="14"><Label>30arc-minutes</Label>
                      <Layer Id="/layers/en/marine/global/incofish/HCAFv4/present/30arc-minutes/61e7a060-04bf-11e1-be50-0800200c9a66" HasProjection="0">
                        <Label>Mean annual sea ice concentration</Label></Layer>
                      <Layer Id="/layers/en/marine/global/incofish/HCAFv4/present/30arc-minutes/9602dc20-04bf-11e1-be50-0800200c9a66" HasProjection="0">
                        <Label>Mean annual primary production (chlorophyll A) in mgC per square meter per day</Label></Layer>
                    </LayersGroup>
                  </LayersGroup>
                </LayersGroup>
              </LayersGroup>
            </LayersGroup>
          </LayersGroup>
        </LayersGroup>
      </AvailableLayers>
    </omws:getLayersResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 6:** getLayers response.

== createModel ==

Starts a new model creation job.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <SOAP-ENV:Body>
    <omws:createModel xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                      SOAP-ENV:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <ModelParameters xmlns="http://openmodeller.cria.org.br/xml/1.0">
        <Sampler>
          <Environment>
            <Map Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66" IsCategorical="0"/>
            <Map Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/bf441530-04d9-11e1-be50-0800200c9a66" IsCategorical="0"/>
            <Mask Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66"/>
          </Environment>
          <Presence Label="Test species">
            <CoordinateSystem>GEOGCS['1924 ellipsoid',DATUM['Not_specified',SPHEROID['International 1924',6378388,297,
AUTHORITY['EPSG','7022']],AUTHORITY['EPSG','6022']],PRIMEM['Greenwich',0,AUTHORITY['EPSG','8901']],UNIT['degree',
0.0174532925199433,AUTHORITY['EPSG','9108']],AUTHORITY['EPSG','4022']]</CoordinateSystem>
            <Point Id="1" X="-68.85" Y="-11.15"/>
            <Point Id="2" X="-67.38" Y="-14.32"/>
            <Point Id="3" X="-67.15" Y="-15.52"/>
            <Point Id="4" X="-65.12" Y="-16.73"/>
            <Point Id="5" X="-63.17" Y="-17.8"/>
          </Presence>
        </Sampler>
        <Algorithm Version="0.2" Id="BIOCLIM">
          <Parameters>
            <Parameter Value="0.8" Id="StandardDeviationCutoff"/>
          </Parameters>
        </Algorithm>
      </ModelParameters>
    </omws:createModel>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 7:** createModel request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:createModelResponse>
      <ticket>FXPAHp</ticket>
    </omws:createModelResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 8:** createModel response.

== getProgress ==

Returns the progress of a job (model creation, model testing or model projection).

```
<?xml version="1.0" encoding="iso-8859-1"?>
<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <SOAP-ENV:Body>
    <omws:getProgress xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                      SOAP-ENV:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <ticket xsi:type="xsd:string">FXPAHp</ticket>
    </omws:getProgress>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 9:** getProgress request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:getProgressResponse>
      <progress>100</progress>
    </omws:getProgressResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 10:** getProgress response.

== getLog ==

Returns the log of a job.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <SOAP-ENV:Body>
    <omws:getLog xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                 SOAP-ENV:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <ticket xsi:type="xsd:string">FXPAHp</ticket>
    </omws:getLog>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 11:** getLog request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:getLogResponse>
      <log>
[Info] Creating model
[Info] Reading 2-dimensional occurrence points.
[Info] Using 5 points to find the bioclimatic envelope.
[Info] Finished creating model
[Info] Calculating ROC curve
[Info] Generating 10000 background points
      </log>
    </omws:getLogResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 12:** getLog response.

== getModel ==

Returns a created model.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <SOAP-ENV:Body>
    <omws:getModel xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                   SOAP-ENV:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <ticket xsi:type="xsd:string">FXPAHp</ticket>
    </omws:getModel>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 13:** getModel request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:getModelResponse>
      <ModelEnvelope xmlns="http://openmodeller.cria.org.br/xml/1.0">
        <SerializedModel>
          <Sampler>
            <Environment NumLayers="2">
              <Map Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66" IsCategorical="0" Min="-281" Max="310"/>
              <Map Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/bf441530-04d9-11e1-be50-0800200c9a66" IsCategorical="0" Min="9" Max="211"/>
              <Mask Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66"/>
            </Environment>
            <Presence Label="Test species" Count="5">
              <CoordinateSystem>GEOGCS['1924 ellipsoid',DATUM['Not_specified',SPHEROID['International 1924',6378388,297,
AUTHORITY['EPSG','7022']],AUTHORITY['EPSG','6022']],PRIMEM['Greenwich',0,AUTHORITY['EPSG','8901']],UNIT['degree',
0.0174532925199433,AUTHORITY['EPSG','9108']],AUTHORITY['EPSG','4022']]</CoordinateSystem>
              <Point Id="1" X="-68.85" Y="-11.15" Sample="250 107"/>
              <Point Id="2" X="-67.38" Y="-14.32" Sample="260 114"/>
              <Point Id="3" X="-67.15" Y="-15.52" Sample="225 112"/>
              <Point Id="4" X="-65.12" Y="-16.73" Sample="254 112"/>
              <Point Id="5" X="-63.17" Y="-17.80" Sample="241 103"/>
            </Presence>
          </Sampler>
          <Algorithm Id="BIOCLIM" Version="0.2">
            <Parameters>
              <Parameter Id="StandardDeviationCutoff" Value="0.8"/>
            </Parameters>
            <Model>
              <Bioclim Mean="246 109.6" StdDev="10.9 3.60" Minimum="225 103" Maximum="260 114"/>
            </Model>
          </Algorithm>
          <Statistics>
            <ConfusionMatrix Threshold="0.5" Accuracy="100" OmissionError="0" CommissionError="-100" 
                             TruePositives="5" FalsePositives="0" TrueNegatives="0" FalseNegatives="0"/>
            <RocCurve Auc="0.99" NumBackgroundPoints="10000" Points="0 0 0.0087 0.40 0.0087 0.40 0.0087 0.40 0.0087 0.40 
0.0087 0.40 0.0087 0.40 0.0087 0.40 0.021 1 0.021 1 0.021 1 0.021 1 0.021 1 0.021 1 0.021 1 1 1"/>
          </Statistics>
        </SerializedModel>
      </ModelEnvelope>
    </omws:getModelResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 14:** getModel response.

== testModel ==

Starts a new model test job.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:xsd="http://www.w3.org/1999/XMLSchema" 
                   SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <SOAP-ENV:Body>
    <omws:testModel xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                    SOAP-ENV:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <TestParameters xmlns="http://openmodeller.cria.org.br/xml/1.0">
        <Sampler>
          <Environment NumLayers="2">
            <Map Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66" IsCategorical="0"/>
            <Map Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/bf441530-04d9-11e1-be50-0800200c9a66" IsCategorical="0"/>
            <Mask Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66"/>
          </Environment>
          <Presence Label="Test species">
            <CoordinateSystem>GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,
AUTHORITY["EPSG","7030"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],
UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9108"]],AXIS["Lat",NORTH],AXIS["Long",EAST],AUTHORITY["EPSG","4326"]]
            </CoordinateSystem>
            <Point Id="1" X="-67.845739" Y="-11.327340" />
            <Point Id="2" X="-69.549969" Y="-12.350801" />
          </Presence>
          <Absence Label="Test species">
            <CoordinateSystem>GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,
AUTHORITY["EPSG","7030"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],
UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9108"]],AXIS["Lat",NORTH],AXIS["Long",EAST],AUTHORITY["EPSG","4326"]]
            </CoordinateSystem>
            <Point Id="3" X="-68.245959" Y="-12.060403" />
            <Point Id="4" X="-74.534959" Y="-15.340201" />
          </Absence>
        </Sampler>
        <Algorithm Id="BIOCLIM" Version="0.2">
          <Parameters>
            <Parameter Id="StandardDeviationCutoff" Value="0.8"/>
          </Parameters>
          <Model>
            <Bioclim Mean="246 109.6" StdDev="10.9 3.60" Minimum="225 103" Maximum="260 114"/>
          </Model>
        </Algorithm>
        <Statistics>
          <ConfusionMatrix Threshold="0.5"/>
          <RocCurve Resolution="15" BackgroundPoints="10000"/>
        </Statistics>
      </TestParameters>
    </omws:testModel>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 15:** testModel request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:testModelResponse>
      <ticket>9HhPVc</ticket>
    </omws:testModelResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 16:** testModel response.

== getTestResult ==

Returns the result of a model test.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
               xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
               soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <omws:getTestResult xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                        soap:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <ticket xsi:type="xsd:string">9HhPVc</ticket>
    </omws:getTestResult>
  </soap:Body>
</soap:Envelope>
```
**Example 17:** getTestResult request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:testResponse>
      <TestResultEnvelope xmlns="http://openmodeller.cria.org.br/xml/1.0">
        <Statistics>
          <ConfusionMatrix Threshold="0.5" Accuracy="75" OmissionError="0" CommissionError="50" 
                           TruePositives="2" FalsePositives="0" TrueNegatives="1" FalseNegatives="1"/>
          <RocCurve Auc="0.875" Points="0 0 0 0.5 0 0.5 0 0.5 0 0.5 0 0.5 0 0.5 0 0.5 0.5 1 0.5 1 0.5 1 0.5 1 0.5 1 
0.5 1 0.5 1 1 1 1 1"/>
        </Statistics>
      </TestResultEnvelope>
    </omws:testResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 18:** getTestResult response.

== projectModel ==

Starts a new model projection job.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
               xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
               soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <omws:projectModel xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                       soap:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <ProjectionParameters xmlns="http://openmodeller.cria.org.br/xml/1.0">
        <Algorithm Id="BIOCLIM" Version="0.2">
          <Parameters>
            <Parameter Id="StandardDeviationCutoff" Value="0.8"/>
          </Parameters>
          <Model>
            <Bioclim Mean="246 109.6" StdDev="10.9 3.60" Minimum="225 103" Maximum="260 114"/>
          </Model>
        </Algorithm>
        <Environment NumLayers="2">
          <Map Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66"/>
          <Map Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/bf441530-04d9-11e1-be50-0800200c9a66"/>
          <Mask Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66"/>
        </Environment>
        <OutputParameters FileType="ByteHFA">
          <TemplateLayer Id="/layers/en/terrestrial/climate/global/worldclim/present/bioclim/10arc-minutes/14aecd40-04d9-11e1-be50-0800200c9a66"/>
        </OutputParameters>
      </ProjectionParameters>
    </omws:projectModel>
  </soap:Body>
</soap:Envelope>
```
**Example 19:** projectModel request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:projectModelResponse>
      <ticket>Umz5UR</ticket>
    </omws:projectModelResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 20:** projectModel response.

== getLayerAsUrl ==

Returns the URL of a projected model.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
               xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
               soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <omws:getLayerAsUrl xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                        soap:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <id xsi:type="xsd:string">xvQD6d</id>
    </omws:getLayerAsUrl>
  </soap:Body>
</soap:Envelope>
```
**Example 21:** getLayerAsUrl request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:getLayerAsUrlResponse>
      <url>http://modeller.cria.org.br/maps/xvQD6d.img</url>
    </omws:getLayerAsUrlResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 22:** getLayerAsUrl response.

== getProjectionMetadata ==

Returns metadata about a model projection.

```
<?xml version="1.0" encoding="iso-8859-1"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
               xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
               soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" 
               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <omws:getProjectionMetadata xmlns:omws="http://openmodeller.cria.org.br/ws/1.0" 
                                soap:encodingStyle="http://xml.apache.org/xml-soap/literalxml">
      <ticket xsi:type="xsd:string">xvQD6d</ticket>
    </omws:getProjectionMetadata>
  </soap:Body>
</soap:Envelope>
```
**Example 23:** getProjectionMetadata request.

```
<?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
                   xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" 
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                   xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                   xmlns:om="http://openmodeller.cria.org.br/xml/1.0" 
                   xmlns:omws="http://openmodeller.cria.org.br/ws/1.0">
  <SOAP-ENV:Body>
    <omws:getProjectionMetadataResponse FileSize="81786">
      <ProjectionEnvelope xmlns="http://openmodeller.cria.org.br/xml/1.0">
        <AreaStatistics TotalCells="585176" CellsPredicted="13064" PredictionThreshold="0.5"/>
      </ProjectionEnvelope>
    </omws:getProjectionMetadataResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
```
**Example 24:** getProjectionMetadata response.

