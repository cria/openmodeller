<?xml version="1.0" encoding="UTF-8"?>
<definitions name="openModeller"
 targetNamespace="http://openmodeller.cria.org.br/ws/2.0"
 xmlns:tns="http://openmodeller.cria.org.br/ws/2.0"
 xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
 xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:om="http://openmodeller.cria.org.br/xml/2.0"
 xmlns:omws="http://openmodeller.cria.org.br/ws/2.0"
 xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:MIME="http://schemas.xmlsoap.org/wsdl/mime/"
 xmlns:DIME="http://schemas.xmlsoap.org/ws/2002/04/dime/wsdl/"
 xmlns:WSDL="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">

<types>

 <schema targetNamespace="http://openmodeller.cria.org.br/ws/2.0"
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:om="http://openmodeller.cria.org.br/xml/2.0"
  xmlns:omws="http://openmodeller.cria.org.br/ws/2.0"
  xmlns="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="unqualified"
  attributeFormDefault="unqualified">
  <import namespace="http://openmodeller.cria.org.br/xml/2.0" schemaLocation="http://openmodeller.cria.org.br/xml/2.0/openModeller.xsd"/>
  <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>
  <complexType name="createModel"><!-- omws__createModel -->

   <sequence>
     <element ref="om:ModelParameters" minOccurs="0" maxOccurs="1"/><!-- omws__createModel::om__ModelParameters -->
   </sequence>
  </complexType>
  <complexType name="testModel"><!-- omws__testModel -->

   <sequence>
     <element ref="om:TestParameters" minOccurs="0" maxOccurs="1"/><!-- omws__testModel::om__TestParameters -->
   </sequence>
  </complexType>
  <complexType name="projectModel"><!-- omws__projectModel -->

   <sequence>
     <element ref="om:ProjectionParameters" minOccurs="0" maxOccurs="1"/><!-- omws__projectModel::om__ProjectionParameters -->
   </sequence>
  </complexType>
  <complexType name="evaluateModel"><!-- omws__evaluateModel -->

   <sequence>
     <element ref="om:ModelEvaluationParameters" minOccurs="0" maxOccurs="1"/><!-- omws__evaluateModel::om__ModelEvaluationParameters -->
   </sequence>
  </complexType>
  <complexType name="samplePoints"><!-- omws__samplePoints -->

   <sequence>
     <element ref="om:SamplingParameters" minOccurs="0" maxOccurs="1"/><!-- omws__samplePoints::om__SamplingParameters -->
   </sequence>
  </complexType>
  <complexType name="runExperiment"><!-- omws__runExperiment -->

   <sequence>
     <element ref="om:ExperimentParameters" minOccurs="0" maxOccurs="1"/><!-- omws__runExperiment::om__ExperimentParameters -->
   </sequence>
  </complexType>
  <element name="version" type="xsd:string"/>
  <!-- operation request element -->
  <element name="ping">
   <complexType>
    <sequence>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="pingResponse">
   <complexType>
    <sequence>
     <element name="status" type="xsd:int" minOccurs="1" maxOccurs="1"/><!-- omws__ping::status -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getAlgorithms">
   <complexType>
    <sequence>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getAlgorithmsResponse">
   <complexType>
    <sequence>
     <element ref="om:AvailableAlgorithms" minOccurs="0" maxOccurs="1"/><!-- omws__getAlgorithmsResponse::om__AvailableAlgorithms -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getLayers">
   <complexType>
    <sequence>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getLayersResponse">
   <complexType>
    <sequence>
     <element ref="om:AvailableLayers" minOccurs="0" maxOccurs="1"/><!-- omws__getLayersResponse::om__AvailableLayers -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="createModel">
   <complexType>
    <sequence>
     <element ref="om:ModelParameters" minOccurs="0" maxOccurs="1"/><!-- omws__createModel::om__ModelParameters -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="createModelResponse">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__createModel::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getModel">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getModel::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getModelResponse">
   <complexType>
    <sequence>
     <element ref="om:ModelEnvelope" minOccurs="0" maxOccurs="1"/><!-- omws__getModelResponse::om__ModelEnvelope -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="testModel">
   <complexType>
    <sequence>
     <element ref="om:TestParameters" minOccurs="0" maxOccurs="1"/><!-- omws__testModel::om__TestParameters -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="testModelResponse">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__testModel::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getTestResult">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getTestResult::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="testResponse">
   <complexType>
    <sequence>
     <element ref="om:TestResultEnvelope" minOccurs="0" maxOccurs="1"/><!-- omws__testResponse::om__TestResultEnvelope -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="projectModel">
   <complexType>
    <sequence>
     <element ref="om:ProjectionParameters" minOccurs="0" maxOccurs="1"/><!-- omws__projectModel::om__ProjectionParameters -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="projectModelResponse">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__projectModel::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getProgress">
   <complexType>
    <sequence>
     <element name="tickets" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getProgress::tickets -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getProgressResponse">
   <complexType>
    <sequence>
     <element name="progress" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__getProgress::progress -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getLog">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getLog::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getLogResponse">
   <complexType>
    <sequence>
     <element name="log" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__getLog::log -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getLayerAsUrl">
   <complexType>
    <sequence>
     <element name="id" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getLayerAsUrl::id -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getLayerAsUrlResponse">
   <complexType>
    <sequence>
     <element name="url" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__getLayerAsUrl::url -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getProjectionMetadata">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getProjectionMetadata::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getProjectionMetadataResponse">
   <complexType>
    <sequence>
     <element ref="om:ProjectionEnvelope" minOccurs="0" maxOccurs="1"/><!-- omws__getProjectionMetadataResponse::om__ProjectionEnvelope -->
    </sequence>
     <attribute name="FileSize" type="xsd:int" use="required"/><!-- omws__getProjectionMetadataResponse::FileSize -->
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="evaluateModel">
   <complexType>
    <sequence>
     <element ref="om:ModelEvaluationParameters" minOccurs="0" maxOccurs="1"/><!-- omws__evaluateModel::om__ModelEvaluationParameters -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="evaluateModelResponse">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__evaluateModel::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getModelEvaluation">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getModelEvaluation::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="modelEvaluationResponse">
   <complexType>
    <sequence>
     <element ref="om:ModelEvaluation" minOccurs="0" maxOccurs="1"/><!-- omws__modelEvaluationResponse::om__ModelEvaluation -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="samplePoints">
   <complexType>
    <sequence>
     <element ref="om:SamplingParameters" minOccurs="0" maxOccurs="1"/><!-- omws__samplePoints::om__SamplingParameters -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="samplePointsResponse">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__samplePoints::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getSamplingResult">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getSamplingResult::ticket -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getSamplingResultResponse">
   <complexType>
    <sequence>
     <element ref="om:Sampler" minOccurs="0" maxOccurs="1"/><!-- omws__getSamplingResultResponse::om__Sampler -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="runExperiment">
   <complexType>
    <sequence>
     <element ref="om:ExperimentParameters" minOccurs="0" maxOccurs="1"/><!-- omws__runExperiment::om__ExperimentParameters -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="runExperimentResponse">
   <complexType>
    <sequence>
     <element ref="om:ExperimentTickets" minOccurs="0" maxOccurs="1"/><!-- omws__runExperimentResponse::om__ExperimentTickets -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getResults">
   <complexType>
    <sequence>
     <element name="tickets" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__getResults::tickets -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getResultsResponse">
   <complexType>
    <sequence>
     <element ref="om:ResultSet" minOccurs="0" maxOccurs="1"/><!-- omws__getResultsResponse::om__ResultSet -->
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="cancel">
   <complexType>
    <sequence>
     <element name="tickets" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/><!-- omws__cancel::tickets -->
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="cancelResponse">
   <complexType>
    <sequence>
     <element name="cancelledTickets" type="xsd:string" minOccurs="1" maxOccurs="1"/><!-- omws__cancel::cancelledTickets -->
    </sequence>
   </complexType>
  </element>
 </schema>

</types>

<message name="pingRequest">
 <part name="parameters" element="omws:ping"/><!-- omws__ping::omws__ping -->
</message>

<message name="pingResponse">
 <part name="parameters" element="omws:pingResponse"/>
</message>

<message name="getAlgorithms">
 <part name="parameters" element="omws:getAlgorithms"/><!-- omws__getAlgorithms::omws__getAlgorithms -->
</message>

<message name="getAlgorithmsResponse">
 <part name="parameters" element="omws:getAlgorithmsResponse"/><!-- omws__getAlgorithms::out -->
</message>

<message name="getLayers">
 <part name="parameters" element="omws:getLayers"/><!-- omws__getLayers::omws__getLayers -->
</message>

<message name="getLayersResponse">
 <part name="parameters" element="omws:getLayersResponse"/><!-- omws__getLayers::out -->
</message>

<message name="createModelRequest">
 <part name="parameters" element="omws:createModel"/><!-- omws__createModel::omws__createModel -->
</message>

<message name="createModelResponse">
 <part name="parameters" element="omws:createModelResponse"/>
</message>

<message name="getModel">
 <part name="parameters" element="omws:getModel"/><!-- omws__getModel::omws__getModel -->
</message>

<message name="getModelResponse">
 <part name="parameters" element="omws:getModelResponse"/><!-- omws__getModel::out -->
</message>

<message name="testModelRequest">
 <part name="parameters" element="omws:testModel"/><!-- omws__testModel::omws__testModel -->
</message>

<message name="testModelResponse">
 <part name="parameters" element="omws:testModelResponse"/>
</message>

<message name="getTestResult">
 <part name="parameters" element="omws:getTestResult"/><!-- omws__getTestResult::omws__getTestResult -->
</message>

<message name="testResponse">
 <part name="parameters" element="omws:testResponse"/><!-- omws__getTestResult::out -->
</message>

<message name="projectModelRequest">
 <part name="parameters" element="omws:projectModel"/><!-- omws__projectModel::omws__projectModel -->
</message>

<message name="projectModelResponse">
 <part name="parameters" element="omws:projectModelResponse"/>
</message>

<message name="getProgressRequest">
 <part name="parameters" element="omws:getProgress"/><!-- omws__getProgress::omws__getProgress -->
</message>

<message name="getProgressResponse">
 <part name="parameters" element="omws:getProgressResponse"/>
</message>

<message name="getLogRequest">
 <part name="parameters" element="omws:getLog"/><!-- omws__getLog::omws__getLog -->
</message>

<message name="getLogResponse">
 <part name="parameters" element="omws:getLogResponse"/>
</message>

<message name="getLayerAsUrlRequest">
 <part name="parameters" element="omws:getLayerAsUrl"/><!-- omws__getLayerAsUrl::omws__getLayerAsUrl -->
</message>

<message name="getLayerAsUrlResponse">
 <part name="parameters" element="omws:getLayerAsUrlResponse"/>
</message>

<message name="getProjectionMetadata">
 <part name="parameters" element="omws:getProjectionMetadata"/><!-- omws__getProjectionMetadata::omws__getProjectionMetadata -->
</message>

<message name="getProjectionMetadataResponse">
 <part name="parameters" element="omws:getProjectionMetadataResponse"/><!-- omws__getProjectionMetadata::out -->
</message>

<message name="evaluateModelRequest">
 <part name="parameters" element="omws:evaluateModel"/><!-- omws__evaluateModel::omws__evaluateModel -->
</message>

<message name="evaluateModelResponse">
 <part name="parameters" element="omws:evaluateModelResponse"/>
</message>

<message name="getModelEvaluation">
 <part name="parameters" element="omws:getModelEvaluation"/><!-- omws__getModelEvaluation::omws__getModelEvaluation -->
</message>

<message name="modelEvaluationResponse">
 <part name="parameters" element="omws:modelEvaluationResponse"/><!-- omws__getModelEvaluation::out -->
</message>

<message name="samplePointsRequest">
 <part name="parameters" element="omws:samplePoints"/><!-- omws__samplePoints::omws__samplePoints -->
</message>

<message name="samplePointsResponse">
 <part name="parameters" element="omws:samplePointsResponse"/>
</message>

<message name="getSamplingResult">
 <part name="parameters" element="omws:getSamplingResult"/><!-- omws__getSamplingResult::omws__getSamplingResult -->
</message>

<message name="getSamplingResultResponse">
 <part name="parameters" element="omws:getSamplingResultResponse"/><!-- omws__getSamplingResult::out -->
</message>

<message name="runExperiment">
 <part name="parameters" element="omws:runExperiment"/><!-- omws__runExperiment::omws__runExperiment -->
</message>

<message name="runExperimentResponse">
 <part name="parameters" element="omws:runExperimentResponse"/><!-- omws__runExperiment::out -->
</message>

<message name="getResults">
 <part name="parameters" element="omws:getResults"/><!-- omws__getResults::omws__getResults -->
</message>

<message name="getResultsResponse">
 <part name="parameters" element="omws:getResultsResponse"/><!-- omws__getResults::out -->
</message>

<message name="cancelRequest">
 <part name="parameters" element="omws:cancel"/><!-- omws__cancel::omws__cancel -->
</message>

<message name="cancelResponse">
 <part name="parameters" element="omws:cancelResponse"/>
</message>

<message name="openModellerHeader">
 <part name="version" element="omws:version"/>
</message>

<portType name="openModellerPortType">
 <operation name="ping">
  <documentation>Simple method to monitor service availability.</documentation>
  <input message="tns:pingRequest"/>
  <output message="tns:pingResponse"/>
 </operation>
 <operation name="getAlgorithms">
  <documentation>Returns metadata about all available algorithms.</documentation>
  <input message="tns:getAlgorithms"/>
  <output message="tns:getAlgorithmsResponse"/>
 </operation>
 <operation name="getLayers">
  <documentation>Returns all available layers on the server side.</documentation>
  <input message="tns:getLayers"/>
  <output message="tns:getLayersResponse"/>
 </operation>
 <operation name="createModel">
  <documentation>Service definition of function omws__createModel</documentation>
  <input message="tns:createModelRequest"/>
  <output message="tns:createModelResponse"/>
 </operation>
 <operation name="getModel">
  <documentation>Service definition of function omws__getModel</documentation>
  <input message="tns:getModel"/>
  <output message="tns:getModelResponse"/>
 </operation>
 <operation name="testModel">
  <documentation>Service definition of function omws__testModel</documentation>
  <input message="tns:testModelRequest"/>
  <output message="tns:testModelResponse"/>
 </operation>
 <operation name="getTestResult">
  <documentation>Service definition of function omws__getTestResult</documentation>
  <input message="tns:getTestResult"/>
  <output message="tns:testResponse"/>
 </operation>
 <operation name="projectModel">
  <documentation>Service definition of function omws__projectModel</documentation>
  <input message="tns:projectModelRequest"/>
  <output message="tns:projectModelResponse"/>
 </operation>
 <operation name="getProgress">
  <documentation>Service definition of function omws__getProgress</documentation>
  <input message="tns:getProgressRequest"/>
  <output message="tns:getProgressResponse"/>
 </operation>
 <operation name="getLog">
  <documentation>Service definition of function omws__getLog</documentation>
  <input message="tns:getLogRequest"/>
  <output message="tns:getLogResponse"/>
 </operation>
 <operation name="getLayerAsUrl">
  <documentation>Service definition of function omws__getLayerAsUrl</documentation>
  <input message="tns:getLayerAsUrlRequest"/>
  <output message="tns:getLayerAsUrlResponse"/>
 </operation>
 <operation name="getProjectionMetadata">
  <documentation>Service definition of function omws__getProjectionMetadata</documentation>
  <input message="tns:getProjectionMetadata"/>
  <output message="tns:getProjectionMetadataResponse"/>
 </operation>
 <operation name="evaluateModel">
  <documentation>Service definition of function omws__evaluateModel</documentation>
  <input message="tns:evaluateModelRequest"/>
  <output message="tns:evaluateModelResponse"/>
 </operation>
 <operation name="getModelEvaluation">
  <documentation>Service definition of function omws__getModelEvaluation</documentation>
  <input message="tns:getModelEvaluation"/>
  <output message="tns:modelEvaluationResponse"/>
 </operation>
 <operation name="samplePoints">
  <documentation>Service definition of function omws__samplePoints</documentation>
  <input message="tns:samplePointsRequest"/>
  <output message="tns:samplePointsResponse"/>
 </operation>
 <operation name="getSamplingResult">
  <documentation>Service definition of function omws__getSamplingResult</documentation>
  <input message="tns:getSamplingResult"/>
  <output message="tns:getSamplingResultResponse"/>
 </operation>
 <operation name="runExperiment">
  <documentation>Service definition of function omws__runExperiment</documentation>
  <input message="tns:runExperiment"/>
  <output message="tns:runExperimentResponse"/>
 </operation>
 <operation name="getResults">
  <documentation>Service definition of function omws__getResults</documentation>
  <input message="tns:getResults"/>
  <output message="tns:getResultsResponse"/>
 </operation>
 <operation name="cancel">
  <documentation>Service definition of function omws__cancel</documentation>
  <input message="tns:cancelRequest"/>
  <output message="tns:cancelResponse"/>
 </operation>
</portType>

<binding name="openModeller" type="tns:openModellerPortType">
 <SOAP:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
 <operation name="ping">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getAlgorithms">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getLayers">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="createModel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getModel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="testModel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getTestResult">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="projectModel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getProgress">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getLog">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getLayerAsUrl">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getProjectionMetadata">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="evaluateModel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getModelEvaluation">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="samplePoints">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getSamplingResult">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="runExperiment">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getResults">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="cancel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
</binding>

<service name="openModeller">
 <documentation>Web Services interface for remote invocation of openModeller</documentation>
 <port name="openModeller" binding="tns:openModeller">
  <SOAP:address location="http://modeller.cria.org.br/ws2/om"/>
 </port>
</service>

</definitions>
