namespace om {
/* openModeller.h
   Generated by wsdl2h 2.8.15 from openModeller.xsd and om.nsmap
   2014-03-07 18:01:52 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2013 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on openModeller.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://openmodeller.cria.org.br/xml/2.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// dom.h declares the DOM xsd__anyType object (compiler and link with dom.cpp)
#import "dom.h"

// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

om = "http://openmodeller.cria.org.br/xml/2.0"

*/

/// @brief XML Schema with all basic element and type definitions used by openModeller and OMWS 2.0
#define SOAP_NAMESPACE_OF_om	"http://openmodeller.cria.org.br/xml/2.0"
//gsoap om    schema namespace:	http://openmodeller.cria.org.br/xml/2.0
//gsoap om    schema elementForm:	qualified
//gsoap om    schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:ID"
typedef std::string xsd__ID;

/// Primitive built-in type "xs:IDREF"
typedef std::string xsd__IDREF;

/// Primitive built-in type "xs:anyURI"
typedef std::string xsd__anyURI;

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class om__AvailableAlgorithmsType.
class om__AvailableAlgorithmsType;

//  Forward declaration of class om__AlgorithmsMetadataType.
class om__AlgorithmsMetadataType;

//  Forward declaration of class om__AlgorithmMetadataType.
class om__AlgorithmMetadataType;

//  Forward declaration of class om__BasicAlgorithmDefinitionType.
class om__BasicAlgorithmDefinitionType;

//  Forward declaration of class om__SerializedAlgorithmType.
class om__SerializedAlgorithmType;

//  Forward declaration of class om__AvailableLayersType.
class om__AvailableLayersType;

//  Forward declaration of class om__BasicLayerType.
class om__BasicLayerType;

//  Forward declaration of class om__ModellingLayerType.
class om__ModellingLayerType;

//  Forward declaration of class om__LayerMetadataType.
class om__LayerMetadataType;

//  Forward declaration of class om__LayersGroupType.
class om__LayersGroupType;

//  Forward declaration of class om__EnvironmentType.
class om__EnvironmentType;

//  Forward declaration of class om__OccurrencesType.
class om__OccurrencesType;

//  Forward declaration of class om__SamplerType.
class om__SamplerType;

//  Forward declaration of class om__NormalizationType.
class om__NormalizationType;

//  Forward declaration of class om__TestOptionsType.
class om__TestOptionsType;

//  Forward declaration of class om__TestResultType.
class om__TestResultType;

//  Forward declaration of class om__ProjectionStatisticsParametersType.
class om__ProjectionStatisticsParametersType;

//  Forward declaration of class om__ProjectionEnvelopeType.
class om__ProjectionEnvelopeType;

//  Forward declaration of class om__AreaStatisticsType.
class om__AreaStatisticsType;

//  Forward declaration of class om__MapOutputParametersType.
class om__MapOutputParametersType;

//  Forward declaration of class om__ModelParametersType.
class om__ModelParametersType;

//  Forward declaration of class om__OccurrencesFilterType.
class om__OccurrencesFilterType;

//  Forward declaration of class om__ModelOptionsType.
class om__ModelOptionsType;

//  Forward declaration of class om__ModelEnvelopeType.
class om__ModelEnvelopeType;

//  Forward declaration of class om__SerializedModelType.
class om__SerializedModelType;

//  Forward declaration of class om__TestParametersType.
class om__TestParametersType;

//  Forward declaration of class om__TestResultEnvelopeType.
class om__TestResultEnvelopeType;

//  Forward declaration of class om__ProjectionParametersType.
class om__ProjectionParametersType;

//  Forward declaration of class om__ModelEvaluationParametersType.
class om__ModelEvaluationParametersType;

//  Forward declaration of class om__ModelEvaluationResultType.
class om__ModelEvaluationResultType;

//  Forward declaration of class om__SamplingOptionsType.
class om__SamplingOptionsType;

//  Forward declaration of class om__SamplingParametersType.
class om__SamplingParametersType;

//  Forward declaration of class om__ExperimentParametersType.
class om__ExperimentParametersType;

//  Forward declaration of class om__ReferenceType.
class om__ReferenceType;

//  Forward declaration of class om__IdentifiedType.
class om__IdentifiedType;

//  Forward declaration of class om__SamplingJobType.
class om__SamplingJobType;

//  Forward declaration of class om__CreateModelJobType.
class om__CreateModelJobType;

//  Forward declaration of class om__TestModelJobType.
class om__TestModelJobType;

//  Forward declaration of class om__ProjectModelJobType.
class om__ProjectModelJobType;

//  Forward declaration of class om__EvaluateModelJobType.
class om__EvaluateModelJobType;

//  Forward declaration of class om__JobTicketsType.
class om__JobTicketsType;

//  Forward declaration of class om__ResultSetType.
class om__ResultSetType;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://openmodeller.cria.org.br/xml/2.0                                  *
 *                                                                            *
\******************************************************************************/


/// union of values "ZeroOneIntervalType ThresholdCalculationType"
typedef std::string om__ThresholdParameterType;

/// "http://openmodeller.cria.org.br/xml/2.0":ZeroOneIntervalType is a simpleType restriction of xs:double.
/// Value range is [0.0..1.0]
typedef double om__ZeroOneIntervalType;

/// "http://openmodeller.cria.org.br/xml/2.0":ThresholdCalculationType is a simpleType restriction of xs:string.
/// Note: enum values are prefixed with 'om__ThresholdCalculationType' to avoid name clashes, please use wsdl2h option -e to omit this prefix
enum om__ThresholdCalculationType
{
/// @brief Non-zero Lowest Presence Threshold for training points (presences)
	om__ThresholdCalculationType__lpt,	///< xs:string value="lpt"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://openmodeller.cria.org.br/xml/2.0                                  *
 *                                                                            *
\******************************************************************************/


/// "http://openmodeller.cria.org.br/xml/2.0":AvailableAlgorithmsType is a complexType.
/// class om__AvailableAlgorithmsType operations:
/// - soap_new_om__AvailableAlgorithmsType(soap*) allocate
/// - soap_new_om__AvailableAlgorithmsType(soap*, int num) allocate array
/// - soap_new_req_om__AvailableAlgorithmsType(soap*, ...) allocate, set required members
/// - soap_new_set_om__AvailableAlgorithmsType(soap*, ...) allocate, set all public members
/// - int soap_read_om__AvailableAlgorithmsType(soap*, om__AvailableAlgorithmsType*) deserialize from a stream
/// - int soap_write_om__AvailableAlgorithmsType(soap, om__AvailableAlgorithmsType*) serialize to a stream
class om__AvailableAlgorithmsType
{ public:
/// Element reference "http://openmodeller.cria.org.br/xml/2.0":Algorithms.
    om__AlgorithmsMetadataType*          Algorithms                     1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":AlgorithmsMetadataType is a complexType.
/// class om__AlgorithmsMetadataType operations:
/// - soap_new_om__AlgorithmsMetadataType(soap*) allocate
/// - soap_new_om__AlgorithmsMetadataType(soap*, int num) allocate array
/// - soap_new_req_om__AlgorithmsMetadataType(soap*, ...) allocate, set required members
/// - soap_new_set_om__AlgorithmsMetadataType(soap*, ...) allocate, set all public members
/// - int soap_read_om__AlgorithmsMetadataType(soap*, om__AlgorithmsMetadataType*) deserialize from a stream
/// - int soap_write_om__AlgorithmsMetadataType(soap, om__AlgorithmsMetadataType*) serialize to a stream
class om__AlgorithmsMetadataType
{ public:
/// Vector of om__AlgorithmMetadataType* with length 0..unbounded
    std::vector<om__AlgorithmMetadataType*> Algorithm                      0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":AlgorithmMetadataType is a complexType.
/// class om__AlgorithmMetadataType operations:
/// - soap_new_om__AlgorithmMetadataType(soap*) allocate
/// - soap_new_om__AlgorithmMetadataType(soap*, int num) allocate array
/// - soap_new_req_om__AlgorithmMetadataType(soap*, ...) allocate, set required members
/// - soap_new_set_om__AlgorithmMetadataType(soap*, ...) allocate, set all public members
/// - int soap_read_om__AlgorithmMetadataType(soap*, om__AlgorithmMetadataType*) deserialize from a stream
/// - int soap_write_om__AlgorithmMetadataType(soap, om__AlgorithmMetadataType*) serialize to a stream
class om__AlgorithmMetadataType
{ public:
/// Element Name of type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element Overview of type xs:string.
    std::string                          Overview                       1;	///< Required element.
/// Element Description of type xs:string.
    std::string                          Description                    1;	///< Required element.
/// class _om__AlgorithmMetadataType_Designers operations:
/// - soap_new__om__AlgorithmMetadataType_Designers(soap*) allocate
/// - soap_new__om__AlgorithmMetadataType_Designers(soap*, int num) allocate array
/// - soap_new_req__om__AlgorithmMetadataType_Designers(soap*, ...) allocate, set required members
/// - soap_new_set__om__AlgorithmMetadataType_Designers(soap*, ...) allocate, set all public members
/// - int soap_read__om__AlgorithmMetadataType_Designers(soap*, _om__AlgorithmMetadataType_Designers*) deserialize from a stream
/// - int soap_write__om__AlgorithmMetadataType_Designers(soap, _om__AlgorithmMetadataType_Designers*) serialize to a stream
    class _om__AlgorithmMetadataType_Designers
    {
/// Vector of Designer with length 1..unbounded
    std::vector<
/// class _om__AlgorithmMetadataType_Designers_Designer operations:
/// - soap_new__om__AlgorithmMetadataType_Designers_Designer(soap*) allocate
/// - soap_new__om__AlgorithmMetadataType_Designers_Designer(soap*, int num) allocate array
/// - soap_new_req__om__AlgorithmMetadataType_Designers_Designer(soap*, ...) allocate, set required members
/// - soap_new_set__om__AlgorithmMetadataType_Designers_Designer(soap*, ...) allocate, set all public members
/// - int soap_read__om__AlgorithmMetadataType_Designers_Designer(soap*, _om__AlgorithmMetadataType_Designers_Designer*) deserialize from a stream
/// - int soap_write__om__AlgorithmMetadataType_Designers_Designer(soap, _om__AlgorithmMetadataType_Designers_Designer*) serialize to a stream
    class _om__AlgorithmMetadataType_Designers_Designer
    {
/// Attribute Name of type xs:string.
   @std::string                          Name                           1;	///< Required attribute.
/// Attribute Contact of type xs:string.
   @std::string*                         Contact                        0;	///< Optional attribute.
    }>                                   Designer                       1;
    }                                    Designers                      1;	///< Required element.
/// Element Bibliography of type xs:string.
    std::string*                         Bibliography                   0;	///< Optional element.
/// class _om__AlgorithmMetadataType_Developers operations:
/// - soap_new__om__AlgorithmMetadataType_Developers(soap*) allocate
/// - soap_new__om__AlgorithmMetadataType_Developers(soap*, int num) allocate array
/// - soap_new_req__om__AlgorithmMetadataType_Developers(soap*, ...) allocate, set required members
/// - soap_new_set__om__AlgorithmMetadataType_Developers(soap*, ...) allocate, set all public members
/// - int soap_read__om__AlgorithmMetadataType_Developers(soap*, _om__AlgorithmMetadataType_Developers*) deserialize from a stream
/// - int soap_write__om__AlgorithmMetadataType_Developers(soap, _om__AlgorithmMetadataType_Developers*) serialize to a stream
    class _om__AlgorithmMetadataType_Developers
    {
/// Vector of Developer with length 1..unbounded
    std::vector<
/// class _om__AlgorithmMetadataType_Developers_Developer operations:
/// - soap_new__om__AlgorithmMetadataType_Developers_Developer(soap*) allocate
/// - soap_new__om__AlgorithmMetadataType_Developers_Developer(soap*, int num) allocate array
/// - soap_new_req__om__AlgorithmMetadataType_Developers_Developer(soap*, ...) allocate, set required members
/// - soap_new_set__om__AlgorithmMetadataType_Developers_Developer(soap*, ...) allocate, set all public members
/// - int soap_read__om__AlgorithmMetadataType_Developers_Developer(soap*, _om__AlgorithmMetadataType_Developers_Developer*) deserialize from a stream
/// - int soap_write__om__AlgorithmMetadataType_Developers_Developer(soap, _om__AlgorithmMetadataType_Developers_Developer*) serialize to a stream
    class _om__AlgorithmMetadataType_Developers_Developer
    {
/// Attribute Name of type xs:string.
   @std::string                          Name                           1;	///< Required attribute.
/// Attribute Contact of type xs:string.
   @std::string*                         Contact                        0;	///< Optional attribute.
    }>                                   Developer                      1;
    }                                    Developers                     1;	///< Required element.
/// Element AcceptsCategoricalMaps of type xs:boolean.
    bool                                 AcceptsCategoricalMaps         1;	///< Required element.
/// Element RequiresAbsencePoints of type xs:boolean.
    bool                                 RequiresAbsencePoints          1;	///< Required element.
/// class _om__AlgorithmMetadataType_Parameters operations:
/// - soap_new__om__AlgorithmMetadataType_Parameters(soap*) allocate
/// - soap_new__om__AlgorithmMetadataType_Parameters(soap*, int num) allocate array
/// - soap_new_req__om__AlgorithmMetadataType_Parameters(soap*, ...) allocate, set required members
/// - soap_new_set__om__AlgorithmMetadataType_Parameters(soap*, ...) allocate, set all public members
/// - int soap_read__om__AlgorithmMetadataType_Parameters(soap*, _om__AlgorithmMetadataType_Parameters*) deserialize from a stream
/// - int soap_write__om__AlgorithmMetadataType_Parameters(soap, _om__AlgorithmMetadataType_Parameters*) serialize to a stream
    class _om__AlgorithmMetadataType_Parameters
    {
/// Vector of Parameter with length 0..unbounded
    std::vector<
/// class _om__AlgorithmMetadataType_Parameters_Parameter operations:
/// - soap_new__om__AlgorithmMetadataType_Parameters_Parameter(soap*) allocate
/// - soap_new__om__AlgorithmMetadataType_Parameters_Parameter(soap*, int num) allocate array
/// - soap_new_req__om__AlgorithmMetadataType_Parameters_Parameter(soap*, ...) allocate, set required members
/// - soap_new_set__om__AlgorithmMetadataType_Parameters_Parameter(soap*, ...) allocate, set all public members
/// - int soap_read__om__AlgorithmMetadataType_Parameters_Parameter(soap*, _om__AlgorithmMetadataType_Parameters_Parameter*) deserialize from a stream
/// - int soap_write__om__AlgorithmMetadataType_Parameters_Parameter(soap, _om__AlgorithmMetadataType_Parameters_Parameter*) serialize to a stream
    class _om__AlgorithmMetadataType_Parameters_Parameter
    {
/// Element Name of type xs:string.
    std::string                          Name                           1;	///< Required element.
/// Element Type of type xs:string.
    std::string                          Type                           1;	///< Required element.
/// Element Overview of type xs:string.
    std::string                          Overview                       1;	///< Required element.
/// Element Description of type xs:string.
    std::string                          Description                    1;	///< Required element.
/// class _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange operations:
/// - soap_new__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap*) allocate
/// - soap_new__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap*, int num) allocate array
/// - soap_new_req__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap*, ...) allocate, set required members
/// - soap_new_set__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap*, ...) allocate, set all public members
/// - int soap_read__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange*) deserialize from a stream
/// - int soap_write__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange*) serialize to a stream
    class _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange
    {
/// Attribute Min of type xs:double.
   @double*                              Min                            0;	///< Optional attribute.
/// Attribute Max of type xs:double.
   @double*                              Max                            0;	///< Optional attribute.
    }                                   *AcceptedRange                  0;	///< Optional element.
/// class _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues operations:
/// - soap_new__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap*) allocate
/// - soap_new__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap*, int num) allocate array
/// - soap_new_req__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap*, ...) allocate, set required members
/// - soap_new_set__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap*, ...) allocate, set all public members
/// - int soap_read__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues*) deserialize from a stream
/// - int soap_write__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues*) serialize to a stream
    class _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues
    {
/// Vector of std::string with length 1..unbounded
    std::vector<std::string            > Value                          1;
    }                                   *AcceptedValues                 0;	///< Optional element.
/// Element Default of type xs:string.
    std::string*                         Default                        0;	///< Optional element.
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
    }>                                  *Parameter                      0;
    }                                    Parameters                     1;	///< Required element.
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
/// Attribute Version of type xs:string.
   @std::string                          Version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":BasicAlgorithmDefinitionType is a complexType.
/// class om__BasicAlgorithmDefinitionType operations:
/// - soap_new_om__BasicAlgorithmDefinitionType(soap*) allocate
/// - soap_new_om__BasicAlgorithmDefinitionType(soap*, int num) allocate array
/// - soap_new_req_om__BasicAlgorithmDefinitionType(soap*, ...) allocate, set required members
/// - soap_new_set_om__BasicAlgorithmDefinitionType(soap*, ...) allocate, set all public members
/// - int soap_read_om__BasicAlgorithmDefinitionType(soap*, om__BasicAlgorithmDefinitionType*) deserialize from a stream
/// - int soap_write_om__BasicAlgorithmDefinitionType(soap, om__BasicAlgorithmDefinitionType*) serialize to a stream
class om__BasicAlgorithmDefinitionType
{ public:
/// class _om__BasicAlgorithmDefinitionType_Parameters operations:
/// - soap_new__om__BasicAlgorithmDefinitionType_Parameters(soap*) allocate
/// - soap_new__om__BasicAlgorithmDefinitionType_Parameters(soap*, int num) allocate array
/// - soap_new_req__om__BasicAlgorithmDefinitionType_Parameters(soap*, ...) allocate, set required members
/// - soap_new_set__om__BasicAlgorithmDefinitionType_Parameters(soap*, ...) allocate, set all public members
/// - int soap_read__om__BasicAlgorithmDefinitionType_Parameters(soap*, _om__BasicAlgorithmDefinitionType_Parameters*) deserialize from a stream
/// - int soap_write__om__BasicAlgorithmDefinitionType_Parameters(soap, _om__BasicAlgorithmDefinitionType_Parameters*) serialize to a stream
    class _om__BasicAlgorithmDefinitionType_Parameters
    {
/// Vector of Parameter with length 0..unbounded
    std::vector<
/// class _om__BasicAlgorithmDefinitionType_Parameters_Parameter operations:
/// - soap_new__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap*) allocate
/// - soap_new__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap*, int num) allocate array
/// - soap_new_req__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap*, ...) allocate, set required members
/// - soap_new_set__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap*, ...) allocate, set all public members
/// - int soap_read__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap*, _om__BasicAlgorithmDefinitionType_Parameters_Parameter*) deserialize from a stream
/// - int soap_write__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, _om__BasicAlgorithmDefinitionType_Parameters_Parameter*) serialize to a stream
    class _om__BasicAlgorithmDefinitionType_Parameters_Parameter
    {
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
/// Attribute Value of type xs:string.
   @std::string                          Value                          1;	///< Required attribute.
    }>                                  *Parameter                      0;
    }                                    Parameters                     1;	///< Required element.
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
/// Attribute Version of type xs:string.
   @std::string                          Version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":SerializedAlgorithmType is a complexType.
/// class om__SerializedAlgorithmType operations:
/// - soap_new_om__SerializedAlgorithmType(soap*) allocate
/// - soap_new_om__SerializedAlgorithmType(soap*, int num) allocate array
/// - soap_new_req_om__SerializedAlgorithmType(soap*, ...) allocate, set required members
/// - soap_new_set_om__SerializedAlgorithmType(soap*, ...) allocate, set all public members
/// - int soap_read_om__SerializedAlgorithmType(soap*, om__SerializedAlgorithmType*) deserialize from a stream
/// - int soap_write_om__SerializedAlgorithmType(soap, om__SerializedAlgorithmType*) serialize to a stream
class om__SerializedAlgorithmType
{ public:
/// class _om__SerializedAlgorithmType_Parameters operations:
/// - soap_new__om__SerializedAlgorithmType_Parameters(soap*) allocate
/// - soap_new__om__SerializedAlgorithmType_Parameters(soap*, int num) allocate array
/// - soap_new_req__om__SerializedAlgorithmType_Parameters(soap*, ...) allocate, set required members
/// - soap_new_set__om__SerializedAlgorithmType_Parameters(soap*, ...) allocate, set all public members
/// - int soap_read__om__SerializedAlgorithmType_Parameters(soap*, _om__SerializedAlgorithmType_Parameters*) deserialize from a stream
/// - int soap_write__om__SerializedAlgorithmType_Parameters(soap, _om__SerializedAlgorithmType_Parameters*) serialize to a stream
    class _om__SerializedAlgorithmType_Parameters
    {
/// Vector of Parameter with length 0..unbounded
    std::vector<
/// class _om__SerializedAlgorithmType_Parameters_Parameter operations:
/// - soap_new__om__SerializedAlgorithmType_Parameters_Parameter(soap*) allocate
/// - soap_new__om__SerializedAlgorithmType_Parameters_Parameter(soap*, int num) allocate array
/// - soap_new_req__om__SerializedAlgorithmType_Parameters_Parameter(soap*, ...) allocate, set required members
/// - soap_new_set__om__SerializedAlgorithmType_Parameters_Parameter(soap*, ...) allocate, set all public members
/// - int soap_read__om__SerializedAlgorithmType_Parameters_Parameter(soap*, _om__SerializedAlgorithmType_Parameters_Parameter*) deserialize from a stream
/// - int soap_write__om__SerializedAlgorithmType_Parameters_Parameter(soap, _om__SerializedAlgorithmType_Parameters_Parameter*) serialize to a stream
    class _om__SerializedAlgorithmType_Parameters_Parameter
    {
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
/// Attribute Value of type xs:string.
   @std::string                          Value                          1;	///< Required attribute.
    }>                                  *Parameter                      0;
    }                                    Parameters                     1;	///< Required element.
/// Element Normalization of type "http://openmodeller.cria.org.br/xml/2.0":NormalizationType.
    om__NormalizationType*               Normalization                  0;	///< Optional element.
/// class _om__SerializedAlgorithmType_Model operations:
/// - soap_new__om__SerializedAlgorithmType_Model(soap*) allocate
/// - soap_new__om__SerializedAlgorithmType_Model(soap*, int num) allocate array
/// - soap_new_req__om__SerializedAlgorithmType_Model(soap*, ...) allocate, set required members
/// - soap_new_set__om__SerializedAlgorithmType_Model(soap*, ...) allocate, set all public members
/// - int soap_read__om__SerializedAlgorithmType_Model(soap*, _om__SerializedAlgorithmType_Model*) deserialize from a stream
/// - int soap_write__om__SerializedAlgorithmType_Model(soap, _om__SerializedAlgorithmType_Model*) serialize to a stream
    class _om__SerializedAlgorithmType_Model
    {
/// TODO: <any namespace="##any">
/// TODO: Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    xsd__anyType                         __any                         0;	///< Catch any element content in DOM.
    }                                    Model                          1;	///< Required element.
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
/// Attribute Version of type xs:string.
   @std::string                          Version                        1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":AvailableLayersType is a complexType.
/// class om__AvailableLayersType operations:
/// - soap_new_om__AvailableLayersType(soap*) allocate
/// - soap_new_om__AvailableLayersType(soap*, int num) allocate array
/// - soap_new_req_om__AvailableLayersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__AvailableLayersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__AvailableLayersType(soap*, om__AvailableLayersType*) deserialize from a stream
/// - int soap_write_om__AvailableLayersType(soap, om__AvailableLayersType*) serialize to a stream
class om__AvailableLayersType
{ public:
/// Element LayersGroup of type "http://openmodeller.cria.org.br/xml/2.0":LayersGroupType.
    om__LayersGroupType*                 LayersGroup                    1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":BasicLayerType is a complexType.
/// class om__BasicLayerType operations:
/// - soap_new_om__BasicLayerType(soap*) allocate
/// - soap_new_om__BasicLayerType(soap*, int num) allocate array
/// - soap_new_req_om__BasicLayerType(soap*, ...) allocate, set required members
/// - soap_new_set_om__BasicLayerType(soap*, ...) allocate, set all public members
/// - int soap_read_om__BasicLayerType(soap*, om__BasicLayerType*) deserialize from a stream
/// - int soap_write_om__BasicLayerType(soap, om__BasicLayerType*) serialize to a stream
class om__BasicLayerType
{ public:
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":LayersGroupType is a complexType.
/// class om__LayersGroupType operations:
/// - soap_new_om__LayersGroupType(soap*) allocate
/// - soap_new_om__LayersGroupType(soap*, int num) allocate array
/// - soap_new_req_om__LayersGroupType(soap*, ...) allocate, set required members
/// - soap_new_set_om__LayersGroupType(soap*, ...) allocate, set all public members
/// - int soap_read_om__LayersGroupType(soap*, om__LayersGroupType*) deserialize from a stream
/// - int soap_write_om__LayersGroupType(soap, om__LayersGroupType*) serialize to a stream
class om__LayersGroupType
{ public:
/// Element Label of type xs:string.
    std::string                          Label                          1;	///< Required element.
/// Vector of om__LayersGroupType* with length 0..unbounded
    std::vector<om__LayersGroupType*   > LayersGroup                    0;
/// Vector of om__LayerMetadataType* with length 0..unbounded
    std::vector<om__LayerMetadataType* > Layer                          0;
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":EnvironmentType is a complexType.
/// class om__EnvironmentType operations:
/// - soap_new_om__EnvironmentType(soap*) allocate
/// - soap_new_om__EnvironmentType(soap*, int num) allocate array
/// - soap_new_req_om__EnvironmentType(soap*, ...) allocate, set required members
/// - soap_new_set_om__EnvironmentType(soap*, ...) allocate, set all public members
/// - int soap_read_om__EnvironmentType(soap*, om__EnvironmentType*) deserialize from a stream
/// - int soap_write_om__EnvironmentType(soap, om__EnvironmentType*) serialize to a stream
class om__EnvironmentType
{ public:
/// Vector of om__ModellingLayerType* with length 1..unbounded
    std::vector<om__ModellingLayerType*> Map                            1;
/// Element Mask of type "http://openmodeller.cria.org.br/xml/2.0":BasicLayerType.
    om__BasicLayerType*                  Mask                           1;	///< Required element.
/// Attribute NumLayers of type xs:int.
   @int*                                 NumLayers                      0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":OccurrencesType is a complexType.
/// class om__OccurrencesType operations:
/// - soap_new_om__OccurrencesType(soap*) allocate
/// - soap_new_om__OccurrencesType(soap*, int num) allocate array
/// - soap_new_req_om__OccurrencesType(soap*, ...) allocate, set required members
/// - soap_new_set_om__OccurrencesType(soap*, ...) allocate, set all public members
/// - int soap_read_om__OccurrencesType(soap*, om__OccurrencesType*) deserialize from a stream
/// - int soap_write_om__OccurrencesType(soap, om__OccurrencesType*) serialize to a stream
class om__OccurrencesType
{ public:
/// Element CoordinateSystem of type xs:string.
    std::string*                         CoordinateSystem               0;	///< Optional element.
/// Vector of Point with length 1..unbounded
    std::vector<
/// class _om__OccurrencesType_Point operations:
/// - soap_new__om__OccurrencesType_Point(soap*) allocate
/// - soap_new__om__OccurrencesType_Point(soap*, int num) allocate array
/// - soap_new_req__om__OccurrencesType_Point(soap*, ...) allocate, set required members
/// - soap_new_set__om__OccurrencesType_Point(soap*, ...) allocate, set all public members
/// - int soap_read__om__OccurrencesType_Point(soap*, _om__OccurrencesType_Point*) deserialize from a stream
/// - int soap_write__om__OccurrencesType_Point(soap, _om__OccurrencesType_Point*) serialize to a stream
    class _om__OccurrencesType_Point
    {
/// Attribute Id of type xs:string.
   @std::string*                         Id                             0;	///< Optional attribute.
/// Attribute X of type xs:string.
   @std::string                          X                              1;	///< Required attribute.
/// Attribute Y of type xs:string.
   @std::string                          Y                              1;	///< Required attribute.
/// Attribute Sample of type xs:string.
   @std::string*                         Sample                         0;	///< Optional attribute.
    }>                                   Point                          1;
/// Attribute Count of type xs:int.
   @int*                                 Count                          0;	///< Optional attribute.
/// Attribute Label of type xs:string.
   @std::string*                         Label                          0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":SamplerType is a complexType.
/// class om__SamplerType operations:
/// - soap_new_om__SamplerType(soap*) allocate
/// - soap_new_om__SamplerType(soap*, int num) allocate array
/// - soap_new_req_om__SamplerType(soap*, ...) allocate, set required members
/// - soap_new_set_om__SamplerType(soap*, ...) allocate, set all public members
/// - int soap_read_om__SamplerType(soap*, om__SamplerType*) deserialize from a stream
/// - int soap_write_om__SamplerType(soap, om__SamplerType*) serialize to a stream
class om__SamplerType
{ public:
/// Element Environment of type "http://openmodeller.cria.org.br/xml/2.0":EnvironmentType.
    om__EnvironmentType*                 Environment                    1;	///< Required element.
/// CHOICE <xs:choice>
/// Note: <xs:choice> with embedded <xs:sequence> or <xs:group> prevents the use of a union
/// SEQUENCE <xs:sequence>
/// Element Presence of type "http://openmodeller.cria.org.br/xml/2.0":OccurrencesType.
    om__OccurrencesType*                 Presence                      ;
/// Element Absence of type "http://openmodeller.cria.org.br/xml/2.0":OccurrencesType.
    om__OccurrencesType*                 Absence                       ;
//  END OF SEQUENCE
/// Element Absence of type "http://openmodeller.cria.org.br/xml/2.0":OccurrencesType.
    om__OccurrencesType*                 Absence                       ;
;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":NormalizationType is a complexType.
/// class om__NormalizationType operations:
/// - soap_new_om__NormalizationType(soap*) allocate
/// - soap_new_om__NormalizationType(soap*, int num) allocate array
/// - soap_new_req_om__NormalizationType(soap*, ...) allocate, set required members
/// - soap_new_set_om__NormalizationType(soap*, ...) allocate, set all public members
/// - int soap_read_om__NormalizationType(soap*, om__NormalizationType*) deserialize from a stream
/// - int soap_write_om__NormalizationType(soap, om__NormalizationType*) serialize to a stream
class om__NormalizationType
{ public:
/// Attribute Class of type xs:string.
   @std::string*                         Class                          0;	///< Optional attribute.
/// Attribute UseLayerAsRef of type xs:boolean.
   @bool*                                UseLayerAsRef                  0;	///< Optional attribute.
/// Attribute Min of type xs:double.
   @double*                              Min                            0;	///< Optional attribute.
/// Attribute Max of type xs:double.
   @double*                              Max                            0;	///< Optional attribute.
/// Attribute Scales of type xs:string.
   @std::string*                         Scales                         0;	///< Optional attribute.
/// Attribute Offsets of type xs:string.
   @std::string*                         Offsets                        0;	///< Optional attribute.
/// Attribute Mean of type xs:string.
   @std::string*                         Mean                           0;	///< Optional attribute.
/// Attribute StdDev of type xs:string.
   @std::string*                         StdDev                         0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":TestOptionsType is a complexType.
/// class om__TestOptionsType operations:
/// - soap_new_om__TestOptionsType(soap*) allocate
/// - soap_new_om__TestOptionsType(soap*, int num) allocate array
/// - soap_new_req_om__TestOptionsType(soap*, ...) allocate, set required members
/// - soap_new_set_om__TestOptionsType(soap*, ...) allocate, set all public members
/// - int soap_read_om__TestOptionsType(soap*, om__TestOptionsType*) deserialize from a stream
/// - int soap_write_om__TestOptionsType(soap, om__TestOptionsType*) serialize to a stream
class om__TestOptionsType
{ public:
/// class _om__TestOptionsType_ConfusionMatrix operations:
/// - soap_new__om__TestOptionsType_ConfusionMatrix(soap*) allocate
/// - soap_new__om__TestOptionsType_ConfusionMatrix(soap*, int num) allocate array
/// - soap_new_req__om__TestOptionsType_ConfusionMatrix(soap*, ...) allocate, set required members
/// - soap_new_set__om__TestOptionsType_ConfusionMatrix(soap*, ...) allocate, set all public members
/// - int soap_read__om__TestOptionsType_ConfusionMatrix(soap*, _om__TestOptionsType_ConfusionMatrix*) deserialize from a stream
/// - int soap_write__om__TestOptionsType_ConfusionMatrix(soap, _om__TestOptionsType_ConfusionMatrix*) serialize to a stream
    class _om__TestOptionsType_ConfusionMatrix
    {
/// Attribute Threshold of type "http://openmodeller.cria.org.br/xml/2.0":ThresholdParameterType.
   @om__ThresholdParameterType*          Threshold                      0;	///< Optional attribute.
/// Attribute IgnoreAbsences of type xs:boolean.
   @bool*                                IgnoreAbsences                 0;	///< Optional attribute.
    }                                   *ConfusionMatrix                0;	///< Optional element.
/// class _om__TestOptionsType_RocCurve operations:
/// - soap_new__om__TestOptionsType_RocCurve(soap*) allocate
/// - soap_new__om__TestOptionsType_RocCurve(soap*, int num) allocate array
/// - soap_new_req__om__TestOptionsType_RocCurve(soap*, ...) allocate, set required members
/// - soap_new_set__om__TestOptionsType_RocCurve(soap*, ...) allocate, set all public members
/// - int soap_read__om__TestOptionsType_RocCurve(soap*, _om__TestOptionsType_RocCurve*) deserialize from a stream
/// - int soap_write__om__TestOptionsType_RocCurve(soap, _om__TestOptionsType_RocCurve*) serialize to a stream
    class _om__TestOptionsType_RocCurve
    {
/// Attribute Resolution of type xs:int.
   @int*                                 Resolution                     0;	///< Optional attribute.
/// Attribute BackgroundPoints of type xs:int.
   @int*                                 BackgroundPoints               0;	///< Optional attribute.
/// Attribute MaxOmission of type "http://openmodeller.cria.org.br/xml/2.0":ZeroOneIntervalType.
   @om__ZeroOneIntervalType*             MaxOmission                    0;	///< Optional attribute.
/// Attribute UseAbsencesAsBackground of type xs:boolean.
   @bool*                                UseAbsencesAsBackground        0;	///< Optional attribute.
    }                                   *RocCurve                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":TestResultType is a complexType.
/// class om__TestResultType operations:
/// - soap_new_om__TestResultType(soap*) allocate
/// - soap_new_om__TestResultType(soap*, int num) allocate array
/// - soap_new_req_om__TestResultType(soap*, ...) allocate, set required members
/// - soap_new_set_om__TestResultType(soap*, ...) allocate, set all public members
/// - int soap_read_om__TestResultType(soap*, om__TestResultType*) deserialize from a stream
/// - int soap_write_om__TestResultType(soap, om__TestResultType*) serialize to a stream
class om__TestResultType
{ public:
/// class _om__TestResultType_ConfusionMatrix operations:
/// - soap_new__om__TestResultType_ConfusionMatrix(soap*) allocate
/// - soap_new__om__TestResultType_ConfusionMatrix(soap*, int num) allocate array
/// - soap_new_req__om__TestResultType_ConfusionMatrix(soap*, ...) allocate, set required members
/// - soap_new_set__om__TestResultType_ConfusionMatrix(soap*, ...) allocate, set all public members
/// - int soap_read__om__TestResultType_ConfusionMatrix(soap*, _om__TestResultType_ConfusionMatrix*) deserialize from a stream
/// - int soap_write__om__TestResultType_ConfusionMatrix(soap, _om__TestResultType_ConfusionMatrix*) serialize to a stream
    class _om__TestResultType_ConfusionMatrix
    {
/// Attribute Threshold of type "http://openmodeller.cria.org.br/xml/2.0":ZeroOneIntervalType.
   @om__ZeroOneIntervalType              Threshold                      1;	///< Required attribute.
/// Attribute Accuracy of type xs:double.
   @double                               Accuracy                       1;	///< Required attribute.
/// Attribute OmissionError of type xs:double.
   @double                               OmissionError                  1;	///< Required attribute.
/// Attribute CommissionError of type xs:double.
   @double                               CommissionError                1;	///< Required attribute.
/// Attribute TruePositives of type xs:int.
   @int                                  TruePositives                  1;	///< Required attribute.
/// Attribute FalsePositives of type xs:int.
   @int                                  FalsePositives                 1;	///< Required attribute.
/// Attribute TrueNegatives of type xs:int.
   @int                                  TrueNegatives                  1;	///< Required attribute.
/// Attribute FalseNegatives of type xs:int.
   @int                                  FalseNegatives                 1;	///< Required attribute.
    }                                   *ConfusionMatrix                0;	///< Optional element.
/// class _om__TestResultType_RocCurve operations:
/// - soap_new__om__TestResultType_RocCurve(soap*) allocate
/// - soap_new__om__TestResultType_RocCurve(soap*, int num) allocate array
/// - soap_new_req__om__TestResultType_RocCurve(soap*, ...) allocate, set required members
/// - soap_new_set__om__TestResultType_RocCurve(soap*, ...) allocate, set all public members
/// - int soap_read__om__TestResultType_RocCurve(soap*, _om__TestResultType_RocCurve*) deserialize from a stream
/// - int soap_write__om__TestResultType_RocCurve(soap, _om__TestResultType_RocCurve*) serialize to a stream
    class _om__TestResultType_RocCurve
    {
/// class _om__TestResultType_RocCurve_Ratio operations:
/// - soap_new__om__TestResultType_RocCurve_Ratio(soap*) allocate
/// - soap_new__om__TestResultType_RocCurve_Ratio(soap*, int num) allocate array
/// - soap_new_req__om__TestResultType_RocCurve_Ratio(soap*, ...) allocate, set required members
/// - soap_new_set__om__TestResultType_RocCurve_Ratio(soap*, ...) allocate, set all public members
/// - int soap_read__om__TestResultType_RocCurve_Ratio(soap*, _om__TestResultType_RocCurve_Ratio*) deserialize from a stream
/// - int soap_write__om__TestResultType_RocCurve_Ratio(soap, _om__TestResultType_RocCurve_Ratio*) serialize to a stream
    class _om__TestResultType_RocCurve_Ratio
    {
/// Attribute E of type xs:double.
   @double                               E                              1;	///< Required attribute.
/// Attribute Value of type xs:double.
   @double                               Value                          1;	///< Required attribute.
    }                                   *Ratio                          0;	///< Optional element.
/// Attribute Auc of type "http://openmodeller.cria.org.br/xml/2.0":ZeroOneIntervalType.
   @om__ZeroOneIntervalType              Auc                            1;	///< Required attribute.
/// Attribute Points of type xs:string.
   @std::string                          Points                         1;	///< Required attribute.
/// Attribute NumBackgroundPoints of type xs:int.
   @int*                                 NumBackgroundPoints            0;	///< Optional attribute.
    }                                   *RocCurve                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ProjectionStatisticsParametersType is a complexType.
/// class om__ProjectionStatisticsParametersType operations:
/// - soap_new_om__ProjectionStatisticsParametersType(soap*) allocate
/// - soap_new_om__ProjectionStatisticsParametersType(soap*, int num) allocate array
/// - soap_new_req_om__ProjectionStatisticsParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ProjectionStatisticsParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ProjectionStatisticsParametersType(soap*, om__ProjectionStatisticsParametersType*) deserialize from a stream
/// - int soap_write_om__ProjectionStatisticsParametersType(soap, om__ProjectionStatisticsParametersType*) serialize to a stream
class om__ProjectionStatisticsParametersType
{ public:
/// class _om__ProjectionStatisticsParametersType_AreaStatistics operations:
/// - soap_new__om__ProjectionStatisticsParametersType_AreaStatistics(soap*) allocate
/// - soap_new__om__ProjectionStatisticsParametersType_AreaStatistics(soap*, int num) allocate array
/// - soap_new_req__om__ProjectionStatisticsParametersType_AreaStatistics(soap*, ...) allocate, set required members
/// - soap_new_set__om__ProjectionStatisticsParametersType_AreaStatistics(soap*, ...) allocate, set all public members
/// - int soap_read__om__ProjectionStatisticsParametersType_AreaStatistics(soap*, _om__ProjectionStatisticsParametersType_AreaStatistics*) deserialize from a stream
/// - int soap_write__om__ProjectionStatisticsParametersType_AreaStatistics(soap, _om__ProjectionStatisticsParametersType_AreaStatistics*) serialize to a stream
    class _om__ProjectionStatisticsParametersType_AreaStatistics
    {
/// Attribute PredictionThreshold of type "http://openmodeller.cria.org.br/xml/2.0":ThresholdParameterType.
   @om__ThresholdParameterType           PredictionThreshold            1;	///< Required attribute.
    }                                   *AreaStatistics                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ProjectionEnvelopeType is a complexType.
/// class om__ProjectionEnvelopeType operations:
/// - soap_new_om__ProjectionEnvelopeType(soap*) allocate
/// - soap_new_om__ProjectionEnvelopeType(soap*, int num) allocate array
/// - soap_new_req_om__ProjectionEnvelopeType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ProjectionEnvelopeType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ProjectionEnvelopeType(soap*, om__ProjectionEnvelopeType*) deserialize from a stream
/// - int soap_write_om__ProjectionEnvelopeType(soap, om__ProjectionEnvelopeType*) serialize to a stream
class om__ProjectionEnvelopeType
{ public:
/// Element AreaStatistics of type "http://openmodeller.cria.org.br/xml/2.0":AreaStatisticsType.
    om__AreaStatisticsType*              AreaStatistics                 1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":AreaStatisticsType is a complexType.
/// class om__AreaStatisticsType operations:
/// - soap_new_om__AreaStatisticsType(soap*) allocate
/// - soap_new_om__AreaStatisticsType(soap*, int num) allocate array
/// - soap_new_req_om__AreaStatisticsType(soap*, ...) allocate, set required members
/// - soap_new_set_om__AreaStatisticsType(soap*, ...) allocate, set all public members
/// - int soap_read_om__AreaStatisticsType(soap*, om__AreaStatisticsType*) deserialize from a stream
/// - int soap_write_om__AreaStatisticsType(soap, om__AreaStatisticsType*) serialize to a stream
class om__AreaStatisticsType
{ public:
/// Attribute TotalCells of type xs:int.
   @int                                  TotalCells                     1;	///< Required attribute.
/// Attribute CellsPredicted of type xs:int.
   @int                                  CellsPredicted                 1;	///< Required attribute.
/// Attribute PredictionThreshold of type "http://openmodeller.cria.org.br/xml/2.0":ZeroOneIntervalType.
   @om__ZeroOneIntervalType              PredictionThreshold            1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":MapOutputParametersType is a complexType.
/// class om__MapOutputParametersType operations:
/// - soap_new_om__MapOutputParametersType(soap*) allocate
/// - soap_new_om__MapOutputParametersType(soap*, int num) allocate array
/// - soap_new_req_om__MapOutputParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__MapOutputParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__MapOutputParametersType(soap*, om__MapOutputParametersType*) deserialize from a stream
/// - int soap_write_om__MapOutputParametersType(soap, om__MapOutputParametersType*) serialize to a stream
class om__MapOutputParametersType
{ public:
/// Element TemplateLayer of type "http://openmodeller.cria.org.br/xml/2.0":BasicLayerType.
    om__BasicLayerType*                  TemplateLayer                  1;	///< Required element.
/// Attribute FileType of type xs:string.
   @std::string*                         FileType                       0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ModelParametersType is a complexType.
/// class om__ModelParametersType operations:
/// - soap_new_om__ModelParametersType(soap*) allocate
/// - soap_new_om__ModelParametersType(soap*, int num) allocate array
/// - soap_new_req_om__ModelParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ModelParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ModelParametersType(soap*, om__ModelParametersType*) deserialize from a stream
/// - int soap_write_om__ModelParametersType(soap, om__ModelParametersType*) serialize to a stream
class om__ModelParametersType
{ public:
/// Element Sampler of type "http://openmodeller.cria.org.br/xml/2.0":SamplerType.
    om__SamplerType*                     Sampler                        1;	///< Required element.
/// Element Algorithm of type "http://openmodeller.cria.org.br/xml/2.0":BasicAlgorithmDefinitionType.
    om__BasicAlgorithmDefinitionType*    Algorithm                      1;	///< Required element.
/// Element Options of type "http://openmodeller.cria.org.br/xml/2.0":ModelOptionsType.
    om__ModelOptionsType*                Options                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":OccurrencesFilterType is a complexType.
/// class om__OccurrencesFilterType operations:
/// - soap_new_om__OccurrencesFilterType(soap*) allocate
/// - soap_new_om__OccurrencesFilterType(soap*, int num) allocate array
/// - soap_new_req_om__OccurrencesFilterType(soap*, ...) allocate, set required members
/// - soap_new_set_om__OccurrencesFilterType(soap*, ...) allocate, set all public members
/// - int soap_read_om__OccurrencesFilterType(soap*, om__OccurrencesFilterType*) deserialize from a stream
/// - int soap_write_om__OccurrencesFilterType(soap, om__OccurrencesFilterType*) serialize to a stream
class om__OccurrencesFilterType
{ public:
/// CHOICE <xs:choice>
   $int                                  __union_OccurrencesFilterType ;	///< Union _om__union_OccurrencesFilterType selector: set to SOAP_UNION__om__union_OccurrencesFilterType_<fieldname>
/// Union for choice in type om__OccurrencesFilterType
    union _om__union_OccurrencesFilterType
    {
/// class _om__OccurrencesFilterType_SpatiallyUnique operations:
/// - soap_new__om__OccurrencesFilterType_SpatiallyUnique(soap*) allocate
/// - soap_new__om__OccurrencesFilterType_SpatiallyUnique(soap*, int num) allocate array
/// - soap_new_req__om__OccurrencesFilterType_SpatiallyUnique(soap*, ...) allocate, set required members
/// - soap_new_set__om__OccurrencesFilterType_SpatiallyUnique(soap*, ...) allocate, set all public members
/// - int soap_read__om__OccurrencesFilterType_SpatiallyUnique(soap*, _om__OccurrencesFilterType_SpatiallyUnique*) deserialize from a stream
/// - int soap_write__om__OccurrencesFilterType_SpatiallyUnique(soap, _om__OccurrencesFilterType_SpatiallyUnique*) serialize to a stream
    class _om__OccurrencesFilterType_SpatiallyUnique
    {
    }                                   *SpatiallyUnique                1;	///< Required element.
/// class _om__OccurrencesFilterType_EnvironmentallyUnique operations:
/// - soap_new__om__OccurrencesFilterType_EnvironmentallyUnique(soap*) allocate
/// - soap_new__om__OccurrencesFilterType_EnvironmentallyUnique(soap*, int num) allocate array
/// - soap_new_req__om__OccurrencesFilterType_EnvironmentallyUnique(soap*, ...) allocate, set required members
/// - soap_new_set__om__OccurrencesFilterType_EnvironmentallyUnique(soap*, ...) allocate, set all public members
/// - int soap_read__om__OccurrencesFilterType_EnvironmentallyUnique(soap*, _om__OccurrencesFilterType_EnvironmentallyUnique*) deserialize from a stream
/// - int soap_write__om__OccurrencesFilterType_EnvironmentallyUnique(soap, _om__OccurrencesFilterType_EnvironmentallyUnique*) serialize to a stream
    class _om__OccurrencesFilterType_EnvironmentallyUnique
    {
    }                                   *EnvironmentallyUnique          1;	///< Required element.
    }                                    union_OccurrencesFilterType   ;
//  END OF CHOICE
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ModelOptionsType is a complexType.
/// class om__ModelOptionsType operations:
/// - soap_new_om__ModelOptionsType(soap*) allocate
/// - soap_new_om__ModelOptionsType(soap*, int num) allocate array
/// - soap_new_req_om__ModelOptionsType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ModelOptionsType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ModelOptionsType(soap*, om__ModelOptionsType*) deserialize from a stream
/// - int soap_write_om__ModelOptionsType(soap, om__ModelOptionsType*) serialize to a stream
class om__ModelOptionsType
{ public:
/// Element OccurrencesFilter of type "http://openmodeller.cria.org.br/xml/2.0":OccurrencesFilterType.
    om__OccurrencesFilterType*           OccurrencesFilter              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ModelEnvelopeType is a complexType.
/// class om__ModelEnvelopeType operations:
/// - soap_new_om__ModelEnvelopeType(soap*) allocate
/// - soap_new_om__ModelEnvelopeType(soap*, int num) allocate array
/// - soap_new_req_om__ModelEnvelopeType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ModelEnvelopeType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ModelEnvelopeType(soap*, om__ModelEnvelopeType*) deserialize from a stream
/// - int soap_write_om__ModelEnvelopeType(soap, om__ModelEnvelopeType*) serialize to a stream
class om__ModelEnvelopeType
{ public:
/// Element reference "http://openmodeller.cria.org.br/xml/2.0":SerializedModel.
    om__SerializedModelType*             SerializedModel                1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":SerializedModelType is a complexType.
/// class om__SerializedModelType operations:
/// - soap_new_om__SerializedModelType(soap*) allocate
/// - soap_new_om__SerializedModelType(soap*, int num) allocate array
/// - soap_new_req_om__SerializedModelType(soap*, ...) allocate, set required members
/// - soap_new_set_om__SerializedModelType(soap*, ...) allocate, set all public members
/// - int soap_read_om__SerializedModelType(soap*, om__SerializedModelType*) deserialize from a stream
/// - int soap_write_om__SerializedModelType(soap, om__SerializedModelType*) serialize to a stream
class om__SerializedModelType
{ public:
/// Element Sampler of type "http://openmodeller.cria.org.br/xml/2.0":SamplerType.
    om__SamplerType*                     Sampler                        1;	///< Required element.
/// Element Algorithm of type "http://openmodeller.cria.org.br/xml/2.0":SerializedAlgorithmType.
    om__SerializedAlgorithmType*         Algorithm                      1;	///< Required element.
/// Element Statistics of type "http://openmodeller.cria.org.br/xml/2.0":TestResultType.
    om__TestResultType*                  Statistics                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":TestParametersType is a complexType.
/// class om__TestParametersType operations:
/// - soap_new_om__TestParametersType(soap*) allocate
/// - soap_new_om__TestParametersType(soap*, int num) allocate array
/// - soap_new_req_om__TestParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__TestParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__TestParametersType(soap*, om__TestParametersType*) deserialize from a stream
/// - int soap_write_om__TestParametersType(soap, om__TestParametersType*) serialize to a stream
class om__TestParametersType
{ public:
/// Element Sampler of type "http://openmodeller.cria.org.br/xml/2.0":SamplerType.
    om__SamplerType*                     Sampler                        1;	///< Required element.
/// Element Algorithm of type "http://openmodeller.cria.org.br/xml/2.0":SerializedAlgorithmType.
    om__SerializedAlgorithmType*         Algorithm                      1;	///< Required element.
/// Element Statistics of type "http://openmodeller.cria.org.br/xml/2.0":TestOptionsType.
    om__TestOptionsType*                 Statistics                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":TestResultEnvelopeType is a complexType.
/// class om__TestResultEnvelopeType operations:
/// - soap_new_om__TestResultEnvelopeType(soap*) allocate
/// - soap_new_om__TestResultEnvelopeType(soap*, int num) allocate array
/// - soap_new_req_om__TestResultEnvelopeType(soap*, ...) allocate, set required members
/// - soap_new_set_om__TestResultEnvelopeType(soap*, ...) allocate, set all public members
/// - int soap_read_om__TestResultEnvelopeType(soap*, om__TestResultEnvelopeType*) deserialize from a stream
/// - int soap_write_om__TestResultEnvelopeType(soap, om__TestResultEnvelopeType*) serialize to a stream
class om__TestResultEnvelopeType
{ public:
/// Element Statistics of type "http://openmodeller.cria.org.br/xml/2.0":TestResultType.
    om__TestResultType*                  Statistics                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ProjectionParametersType is a complexType.
/// class om__ProjectionParametersType operations:
/// - soap_new_om__ProjectionParametersType(soap*) allocate
/// - soap_new_om__ProjectionParametersType(soap*, int num) allocate array
/// - soap_new_req_om__ProjectionParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ProjectionParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ProjectionParametersType(soap*, om__ProjectionParametersType*) deserialize from a stream
/// - int soap_write_om__ProjectionParametersType(soap, om__ProjectionParametersType*) serialize to a stream
class om__ProjectionParametersType
{ public:
/// Element Algorithm of type "http://openmodeller.cria.org.br/xml/2.0":SerializedAlgorithmType.
    om__SerializedAlgorithmType*         Algorithm                      1;	///< Required element.
/// Element Environment of type "http://openmodeller.cria.org.br/xml/2.0":EnvironmentType.
    om__EnvironmentType*                 Environment                    1;	///< Required element.
/// Element OutputParameters of type "http://openmodeller.cria.org.br/xml/2.0":MapOutputParametersType.
    om__MapOutputParametersType*         OutputParameters               0;	///< Optional element.
/// Element Statistics of type "http://openmodeller.cria.org.br/xml/2.0":ProjectionStatisticsParametersType.
    om__ProjectionStatisticsParametersType*  Statistics                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ModelEvaluationParametersType is a complexType.
/// class om__ModelEvaluationParametersType operations:
/// - soap_new_om__ModelEvaluationParametersType(soap*) allocate
/// - soap_new_om__ModelEvaluationParametersType(soap*, int num) allocate array
/// - soap_new_req_om__ModelEvaluationParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ModelEvaluationParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ModelEvaluationParametersType(soap*, om__ModelEvaluationParametersType*) deserialize from a stream
/// - int soap_write_om__ModelEvaluationParametersType(soap, om__ModelEvaluationParametersType*) serialize to a stream
class om__ModelEvaluationParametersType
{ public:
/// Element Sampler of type "http://openmodeller.cria.org.br/xml/2.0":SamplerType.
    om__SamplerType*                     Sampler                        1;	///< Required element.
/// Element Algorithm of type "http://openmodeller.cria.org.br/xml/2.0":SerializedAlgorithmType.
    om__SerializedAlgorithmType*         Algorithm                      1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ModelEvaluationResultType is a complexType.
/// @brief Values are returned in the V attribute as a sequence of values separated by space in the same order as the points in the request (first presences then absences). Each value is expected to be in the range [0,1.0], but if the point is masked out, -1.0 is returned.
/// class om__ModelEvaluationResultType operations:
/// - soap_new_om__ModelEvaluationResultType(soap*) allocate
/// - soap_new_om__ModelEvaluationResultType(soap*, int num) allocate array
/// - soap_new_req_om__ModelEvaluationResultType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ModelEvaluationResultType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ModelEvaluationResultType(soap*, om__ModelEvaluationResultType*) deserialize from a stream
/// - int soap_write_om__ModelEvaluationResultType(soap, om__ModelEvaluationResultType*) serialize to a stream
class om__ModelEvaluationResultType
{ public:
/// class _om__ModelEvaluationResultType_Values operations:
/// - soap_new__om__ModelEvaluationResultType_Values(soap*) allocate
/// - soap_new__om__ModelEvaluationResultType_Values(soap*, int num) allocate array
/// - soap_new_req__om__ModelEvaluationResultType_Values(soap*, ...) allocate, set required members
/// - soap_new_set__om__ModelEvaluationResultType_Values(soap*, ...) allocate, set all public members
/// - int soap_read__om__ModelEvaluationResultType_Values(soap*, _om__ModelEvaluationResultType_Values*) deserialize from a stream
/// - int soap_write__om__ModelEvaluationResultType_Values(soap, _om__ModelEvaluationResultType_Values*) serialize to a stream
    class _om__ModelEvaluationResultType_Values
    {
/// Attribute V of type xs:string.
   @std::string                          V                              1;	///< Required attribute.
    }                                    Values                         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":SamplingOptionsType is a complexType.
/// class om__SamplingOptionsType operations:
/// - soap_new_om__SamplingOptionsType(soap*) allocate
/// - soap_new_om__SamplingOptionsType(soap*, int num) allocate array
/// - soap_new_req_om__SamplingOptionsType(soap*, ...) allocate, set required members
/// - soap_new_set_om__SamplingOptionsType(soap*, ...) allocate, set all public members
/// - int soap_read_om__SamplingOptionsType(soap*, om__SamplingOptionsType*) deserialize from a stream
/// - int soap_write_om__SamplingOptionsType(soap, om__SamplingOptionsType*) serialize to a stream
class om__SamplingOptionsType
{ public:
/// Element OccurrencesFilter of type "http://openmodeller.cria.org.br/xml/2.0":OccurrencesFilterType.
    om__OccurrencesFilterType*           OccurrencesFilter              0;	///< Optional element.
/// Attribute NumPoints of type xs:int.
   @int                                  NumPoints                      1;	///< Required attribute.
/// Attribute Label of type xs:string.
   @std::string*                         Label                          0;	///< Optional attribute.
/// Attribute ProportionOfAbsences of type "http://openmodeller.cria.org.br/xml/2.0":ZeroOneIntervalType.
   @om__ZeroOneIntervalType*             ProportionOfAbsences           0;	///< Optional attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":SamplingParametersType is a complexType.
/// class om__SamplingParametersType operations:
/// - soap_new_om__SamplingParametersType(soap*) allocate
/// - soap_new_om__SamplingParametersType(soap*, int num) allocate array
/// - soap_new_req_om__SamplingParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__SamplingParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__SamplingParametersType(soap*, om__SamplingParametersType*) deserialize from a stream
/// - int soap_write_om__SamplingParametersType(soap, om__SamplingParametersType*) serialize to a stream
class om__SamplingParametersType
{ public:
/// Element Environment of type "http://openmodeller.cria.org.br/xml/2.0":EnvironmentType.
    om__EnvironmentType*                 Environment                    1;	///< Required element.
/// Element Options of type "http://openmodeller.cria.org.br/xml/2.0":SamplingOptionsType.
    om__SamplingOptionsType*             Options                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ExperimentParametersType is a complexType.
/// class om__ExperimentParametersType operations:
/// - soap_new_om__ExperimentParametersType(soap*) allocate
/// - soap_new_om__ExperimentParametersType(soap*, int num) allocate array
/// - soap_new_req_om__ExperimentParametersType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ExperimentParametersType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ExperimentParametersType(soap*, om__ExperimentParametersType*) deserialize from a stream
/// - int soap_write_om__ExperimentParametersType(soap, om__ExperimentParametersType*) serialize to a stream
class om__ExperimentParametersType
{ public:
/// Vector of Environment with length 1..unbounded
    std::vector<
/// class _om__ExperimentParametersType_Environment operations:
/// - soap_new__om__ExperimentParametersType_Environment(soap*) allocate
/// - soap_new__om__ExperimentParametersType_Environment(soap*, int num) allocate array
/// - soap_new_req__om__ExperimentParametersType_Environment(soap*, ...) allocate, set required members
/// - soap_new_set__om__ExperimentParametersType_Environment(soap*, ...) allocate, set all public members
/// - int soap_read__om__ExperimentParametersType_Environment(soap*, _om__ExperimentParametersType_Environment*) deserialize from a stream
/// - int soap_write__om__ExperimentParametersType_Environment(soap, _om__ExperimentParametersType_Environment*) serialize to a stream
    class _om__ExperimentParametersType_Environment
    {
/// INHERITED FROM om__EnvironmentType:
/// Vector of om__ModellingLayerType* with length 1..unbounded
    std::vector<om__ModellingLayerType*> Map                            1;
/// Element Mask of type "http://openmodeller.cria.org.br/xml/2.0":BasicLayerType.
    om__BasicLayerType*                  Mask                           1;	///< Required element.
/// Attribute NumLayers of type xs:int.
   @int*                                 NumLayers                      0;	///< Optional attribute.
//  END OF INHERITED FROM om__EnvironmentType
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    }>                                   Environment                    1;
/// Vector of Presence with length 0..unbounded
    std::vector<
/// class _om__ExperimentParametersType_Presence operations:
/// - soap_new__om__ExperimentParametersType_Presence(soap*) allocate
/// - soap_new__om__ExperimentParametersType_Presence(soap*, int num) allocate array
/// - soap_new_req__om__ExperimentParametersType_Presence(soap*, ...) allocate, set required members
/// - soap_new_set__om__ExperimentParametersType_Presence(soap*, ...) allocate, set all public members
/// - int soap_read__om__ExperimentParametersType_Presence(soap*, _om__ExperimentParametersType_Presence*) deserialize from a stream
/// - int soap_write__om__ExperimentParametersType_Presence(soap, _om__ExperimentParametersType_Presence*) serialize to a stream
    class _om__ExperimentParametersType_Presence
    {
/// INHERITED FROM om__OccurrencesType:
/// Element CoordinateSystem of type xs:string.
    std::string*                         CoordinateSystem               0;	///< Optional element.
/// Vector of Point with length 1..unbounded
    std::vector<
/// class _om__ExperimentParametersType_Presence_Point operations:
/// - soap_new__om__ExperimentParametersType_Presence_Point(soap*) allocate
/// - soap_new__om__ExperimentParametersType_Presence_Point(soap*, int num) allocate array
/// - soap_new_req__om__ExperimentParametersType_Presence_Point(soap*, ...) allocate, set required members
/// - soap_new_set__om__ExperimentParametersType_Presence_Point(soap*, ...) allocate, set all public members
/// - int soap_read__om__ExperimentParametersType_Presence_Point(soap*, _om__ExperimentParametersType_Presence_Point*) deserialize from a stream
/// - int soap_write__om__ExperimentParametersType_Presence_Point(soap, _om__ExperimentParametersType_Presence_Point*) serialize to a stream
    class _om__ExperimentParametersType_Presence_Point
    {
/// Attribute Id of type xs:string.
   @std::string*                         Id                             0;	///< Optional attribute.
/// Attribute X of type xs:string.
   @std::string                          X                              1;	///< Required attribute.
/// Attribute Y of type xs:string.
   @std::string                          Y                              1;	///< Required attribute.
/// Attribute Sample of type xs:string.
   @std::string*                         Sample                         0;	///< Optional attribute.
    }>                                   Point                          1;
/// Attribute Count of type xs:int.
   @int*                                 Count                          0;	///< Optional attribute.
/// Attribute Label of type xs:string.
   @std::string*                         Label                          0;	///< Optional attribute.
//  END OF INHERITED FROM om__OccurrencesType
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    }>                                  *Presence                       0;
/// Vector of Absence with length 0..unbounded
    std::vector<
/// class _om__ExperimentParametersType_Absence operations:
/// - soap_new__om__ExperimentParametersType_Absence(soap*) allocate
/// - soap_new__om__ExperimentParametersType_Absence(soap*, int num) allocate array
/// - soap_new_req__om__ExperimentParametersType_Absence(soap*, ...) allocate, set required members
/// - soap_new_set__om__ExperimentParametersType_Absence(soap*, ...) allocate, set all public members
/// - int soap_read__om__ExperimentParametersType_Absence(soap*, _om__ExperimentParametersType_Absence*) deserialize from a stream
/// - int soap_write__om__ExperimentParametersType_Absence(soap, _om__ExperimentParametersType_Absence*) serialize to a stream
    class _om__ExperimentParametersType_Absence
    {
/// INHERITED FROM om__OccurrencesType:
/// Element CoordinateSystem of type xs:string.
    std::string*                         CoordinateSystem               0;	///< Optional element.
/// Vector of Point with length 1..unbounded
    std::vector<
/// class _om__ExperimentParametersType_Absence_Point operations:
/// - soap_new__om__ExperimentParametersType_Absence_Point(soap*) allocate
/// - soap_new__om__ExperimentParametersType_Absence_Point(soap*, int num) allocate array
/// - soap_new_req__om__ExperimentParametersType_Absence_Point(soap*, ...) allocate, set required members
/// - soap_new_set__om__ExperimentParametersType_Absence_Point(soap*, ...) allocate, set all public members
/// - int soap_read__om__ExperimentParametersType_Absence_Point(soap*, _om__ExperimentParametersType_Absence_Point*) deserialize from a stream
/// - int soap_write__om__ExperimentParametersType_Absence_Point(soap, _om__ExperimentParametersType_Absence_Point*) serialize to a stream
    class _om__ExperimentParametersType_Absence_Point
    {
/// Attribute Id of type xs:string.
   @std::string*                         Id                             0;	///< Optional attribute.
/// Attribute X of type xs:string.
   @std::string                          X                              1;	///< Required attribute.
/// Attribute Y of type xs:string.
   @std::string                          Y                              1;	///< Required attribute.
/// Attribute Sample of type xs:string.
   @std::string*                         Sample                         0;	///< Optional attribute.
    }>                                   Point                          1;
/// Attribute Count of type xs:int.
   @int*                                 Count                          0;	///< Optional attribute.
/// Attribute Label of type xs:string.
   @std::string*                         Label                          0;	///< Optional attribute.
//  END OF INHERITED FROM om__OccurrencesType
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    }>                                  *Absence                        0;
/// Vector of AlgorithmSettings with length 0..unbounded
    std::vector<
/// class _om__ExperimentParametersType_AlgorithmSettings operations:
/// - soap_new__om__ExperimentParametersType_AlgorithmSettings(soap*) allocate
/// - soap_new__om__ExperimentParametersType_AlgorithmSettings(soap*, int num) allocate array
/// - soap_new_req__om__ExperimentParametersType_AlgorithmSettings(soap*, ...) allocate, set required members
/// - soap_new_set__om__ExperimentParametersType_AlgorithmSettings(soap*, ...) allocate, set all public members
/// - int soap_read__om__ExperimentParametersType_AlgorithmSettings(soap*, _om__ExperimentParametersType_AlgorithmSettings*) deserialize from a stream
/// - int soap_write__om__ExperimentParametersType_AlgorithmSettings(soap, _om__ExperimentParametersType_AlgorithmSettings*) serialize to a stream
    class _om__ExperimentParametersType_AlgorithmSettings
    {
/// Element Algorithm of type "http://openmodeller.cria.org.br/xml/2.0":BasicAlgorithmDefinitionType.
    om__BasicAlgorithmDefinitionType*    Algorithm                      1;	///< Required element.
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    }>                                  *AlgorithmSettings              0;
/// Vector of SerializedAlgorithm with length 0..unbounded
    std::vector<
/// class _om__ExperimentParametersType_SerializedAlgorithm operations:
/// - soap_new__om__ExperimentParametersType_SerializedAlgorithm(soap*) allocate
/// - soap_new__om__ExperimentParametersType_SerializedAlgorithm(soap*, int num) allocate array
/// - soap_new_req__om__ExperimentParametersType_SerializedAlgorithm(soap*, ...) allocate, set required members
/// - soap_new_set__om__ExperimentParametersType_SerializedAlgorithm(soap*, ...) allocate, set all public members
/// - int soap_read__om__ExperimentParametersType_SerializedAlgorithm(soap*, _om__ExperimentParametersType_SerializedAlgorithm*) deserialize from a stream
/// - int soap_write__om__ExperimentParametersType_SerializedAlgorithm(soap, _om__ExperimentParametersType_SerializedAlgorithm*) serialize to a stream
    class _om__ExperimentParametersType_SerializedAlgorithm
    {
/// Element Algorithm of type "http://openmodeller.cria.org.br/xml/2.0":SerializedAlgorithmType.
    om__SerializedAlgorithmType*         Algorithm                      1;	///< Required element.
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    }>                                  *SerializedAlgorithm            0;
/// class _om__ExperimentParametersType_Jobs operations:
/// - soap_new__om__ExperimentParametersType_Jobs(soap*) allocate
/// - soap_new__om__ExperimentParametersType_Jobs(soap*, int num) allocate array
/// - soap_new_req__om__ExperimentParametersType_Jobs(soap*, ...) allocate, set required members
/// - soap_new_set__om__ExperimentParametersType_Jobs(soap*, ...) allocate, set all public members
/// - int soap_read__om__ExperimentParametersType_Jobs(soap*, _om__ExperimentParametersType_Jobs*) deserialize from a stream
/// - int soap_write__om__ExperimentParametersType_Jobs(soap, _om__ExperimentParametersType_Jobs*) serialize to a stream
    class _om__ExperimentParametersType_Jobs
    {
/// Reference "http://openmodeller.cria.org.br/xml/2.0":AbstractJob to abstract element.
/// CHOICE OF SUBSTITUTIONS <xs:element substitutionGroup="AbstractJob" maxOccurs="unbounded"> with elements <SamplingJob> <CreateModelJob> <TestModelJob> <ProjectModelJob> <EvaluateModelJob>
   $int                                  __sizeAbstractJob              0;
    class __om__union_ExperimentParametersType_Jobs
    {
   $int                                  __unionAbstractJob             0;	///< Union _om__union_ExperimentParametersType_Jobs selector: set to SOAP_UNION__om__union_ExperimentParametersType_Jobs_<fieldname>
/// Union for substitutionGroup="AbstractJob"
    union _om__union_ExperimentParametersType_Jobs
    {
/// Element SamplingJob of type "http://openmodeller.cria.org.br/xml/2.0":SamplingJobType.
    om__SamplingJobType*                 SamplingJob                    1;	///< Required element.
/// Element CreateModelJob of type "http://openmodeller.cria.org.br/xml/2.0":CreateModelJobType.
    om__CreateModelJobType*              CreateModelJob                 1;	///< Required element.
/// Element TestModelJob of type "http://openmodeller.cria.org.br/xml/2.0":TestModelJobType.
    om__TestModelJobType*                TestModelJob                   1;	///< Required element.
/// Element ProjectModelJob of type "http://openmodeller.cria.org.br/xml/2.0":ProjectModelJobType.
    om__ProjectModelJobType*             ProjectModelJob                1;	///< Required element.
/// Element EvaluateModelJob of type "http://openmodeller.cria.org.br/xml/2.0":EvaluateModelJobType.
    om__EvaluateModelJobType*            EvaluateModelJob               1;	///< Required element.
    }                                    __union_ExperimentParametersType_Jobs;
;
    }                                   *__union_ExperimentParametersType_Jobs;
//  END OF CHOICE OF SUBSTITUTIONS
    }                                    Jobs                           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ReferenceType is a complexType.
/// class om__ReferenceType operations:
/// - soap_new_om__ReferenceType(soap*) allocate
/// - soap_new_om__ReferenceType(soap*, int num) allocate array
/// - soap_new_req_om__ReferenceType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ReferenceType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ReferenceType(soap*, om__ReferenceType*) deserialize from a stream
/// - int soap_write_om__ReferenceType(soap, om__ReferenceType*) serialize to a stream
class om__ReferenceType
{ public:
/// Attribute idref of type xs:IDREF.
   @xsd__IDREF                           idref                          1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":IdentifiedType is an abstract complexType.
/// class om__IdentifiedType operations:
/// - soap_new_om__IdentifiedType(soap*) allocate
/// - soap_new_om__IdentifiedType(soap*, int num) allocate array
/// - soap_new_req_om__IdentifiedType(soap*, ...) allocate, set required members
/// - soap_new_set_om__IdentifiedType(soap*, ...) allocate, set all public members
/// - int soap_read_om__IdentifiedType(soap*, om__IdentifiedType*) deserialize from a stream
/// - int soap_write_om__IdentifiedType(soap, om__IdentifiedType*) serialize to a stream
class om__IdentifiedType
{ public:
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":JobTicketsType is a complexType.
/// class om__JobTicketsType operations:
/// - soap_new_om__JobTicketsType(soap*) allocate
/// - soap_new_om__JobTicketsType(soap*, int num) allocate array
/// - soap_new_req_om__JobTicketsType(soap*, ...) allocate, set required members
/// - soap_new_set_om__JobTicketsType(soap*, ...) allocate, set all public members
/// - int soap_read_om__JobTicketsType(soap*, om__JobTicketsType*) deserialize from a stream
/// - int soap_write_om__JobTicketsType(soap, om__JobTicketsType*) serialize to a stream
class om__JobTicketsType
{ public:
/// Vector of Job with length 1..unbounded
    std::vector<
/// class _om__JobTicketsType_Job operations:
/// - soap_new__om__JobTicketsType_Job(soap*) allocate
/// - soap_new__om__JobTicketsType_Job(soap*, int num) allocate array
/// - soap_new_req__om__JobTicketsType_Job(soap*, ...) allocate, set required members
/// - soap_new_set__om__JobTicketsType_Job(soap*, ...) allocate, set all public members
/// - int soap_read__om__JobTicketsType_Job(soap*, _om__JobTicketsType_Job*) deserialize from a stream
/// - int soap_write__om__JobTicketsType_Job(soap, _om__JobTicketsType_Job*) serialize to a stream
    class _om__JobTicketsType_Job
    {
/// INHERITED FROM om__IdentifiedType:
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
//  END OF INHERITED FROM om__IdentifiedType
/// Attribute Ticket of type xs:string.
   @std::string                          Ticket                         1;	///< Required attribute.
    }>                                   Job                            1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ResultSetType is a complexType.
/// class om__ResultSetType operations:
/// - soap_new_om__ResultSetType(soap*) allocate
/// - soap_new_om__ResultSetType(soap*, int num) allocate array
/// - soap_new_req_om__ResultSetType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ResultSetType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ResultSetType(soap*, om__ResultSetType*) deserialize from a stream
/// - int soap_write_om__ResultSetType(soap, om__ResultSetType*) serialize to a stream
class om__ResultSetType
{ public:
/// Vector of Job with length 1..unbounded
    std::vector<
/// class _om__ResultSetType_Job operations:
/// - soap_new__om__ResultSetType_Job(soap*) allocate
/// - soap_new__om__ResultSetType_Job(soap*, int num) allocate array
/// - soap_new_req__om__ResultSetType_Job(soap*, ...) allocate, set required members
/// - soap_new_set__om__ResultSetType_Job(soap*, ...) allocate, set all public members
/// - int soap_read__om__ResultSetType_Job(soap*, _om__ResultSetType_Job*) deserialize from a stream
/// - int soap_write__om__ResultSetType_Job(soap, _om__ResultSetType_Job*) serialize to a stream
    class _om__ResultSetType_Job
    {
/// CHOICE <xs:choice>
   $int                                  __union_ResultSetType_Job     ;	///< Union _om__union_ResultSetType_Job selector: set to SOAP_UNION__om__union_ResultSetType_Job_<fieldname>
    union _om__union_ResultSetType_Job
    {
/// Element Sampler of type "http://openmodeller.cria.org.br/xml/2.0":SamplerType.
    om__SamplerType*                     Sampler                        1;	///< Required element.
/// Element ModelEnvelope of type "http://openmodeller.cria.org.br/xml/2.0":ModelEnvelopeType.
    om__ModelEnvelopeType*               ModelEnvelope                  1;	///< Required element.
/// Element TestResultEnvelope of type "http://openmodeller.cria.org.br/xml/2.0":TestResultEnvelopeType.
    om__TestResultEnvelopeType*          TestResultEnvelope             1;	///< Required element.
/// class _om__ResultSetType_Job_ProjectionEnvelope operations:
/// - soap_new__om__ResultSetType_Job_ProjectionEnvelope(soap*) allocate
/// - soap_new__om__ResultSetType_Job_ProjectionEnvelope(soap*, int num) allocate array
/// - soap_new_req__om__ResultSetType_Job_ProjectionEnvelope(soap*, ...) allocate, set required members
/// - soap_new_set__om__ResultSetType_Job_ProjectionEnvelope(soap*, ...) allocate, set all public members
/// - int soap_read__om__ResultSetType_Job_ProjectionEnvelope(soap*, _om__ResultSetType_Job_ProjectionEnvelope*) deserialize from a stream
/// - int soap_write__om__ResultSetType_Job_ProjectionEnvelope(soap, _om__ResultSetType_Job_ProjectionEnvelope*) serialize to a stream
    class _om__ResultSetType_Job_ProjectionEnvelope
    {
/// Element Statistics of type "http://openmodeller.cria.org.br/xml/2.0":ProjectionEnvelopeType.
    om__ProjectionEnvelopeType*          Statistics                     0;	///< Optional element.
/// Attribute url of type xs:anyURI.
   @xsd__anyURI                          url                            1;	///< Required attribute.
    }                                   *ProjectionEnvelope             1;	///< Required element.
/// class _om__ResultSetType_Job_Values operations:
/// - soap_new__om__ResultSetType_Job_Values(soap*) allocate
/// - soap_new__om__ResultSetType_Job_Values(soap*, int num) allocate array
/// - soap_new_req__om__ResultSetType_Job_Values(soap*, ...) allocate, set required members
/// - soap_new_set__om__ResultSetType_Job_Values(soap*, ...) allocate, set all public members
/// - int soap_read__om__ResultSetType_Job_Values(soap*, _om__ResultSetType_Job_Values*) deserialize from a stream
/// - int soap_write__om__ResultSetType_Job_Values(soap, _om__ResultSetType_Job_Values*) serialize to a stream
    class _om__ResultSetType_Job_Values
    {
/// Attribute V of type xs:string.
   @std::string                          V                              1;	///< Required attribute.
    }                                   *Values                         1;	///< Required element.
    }                                    union_ResultSetType_Job       ;
//  END OF CHOICE
/// Attribute Ticket of type xs:string.
   @std::string                          Ticket                         1;	///< Required attribute.
    }>                                   Job                            1;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://openmodeller.cria.org.br/xml/2.0":ModellingLayerType is a complexType with complexContent extension of "http://openmodeller.cria.org.br/xml/2.0":BasicLayerType.
/// class om__ModellingLayerType operations:
/// - soap_new_om__ModellingLayerType(soap*) allocate
/// - soap_new_om__ModellingLayerType(soap*, int num) allocate array
/// - soap_new_req_om__ModellingLayerType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ModellingLayerType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ModellingLayerType(soap*, om__ModellingLayerType*) deserialize from a stream
/// - int soap_write_om__ModellingLayerType(soap, om__ModellingLayerType*) serialize to a stream
class om__ModellingLayerType : public om__BasicLayerType
{ public:
/*  INHERITED FROM om__BasicLayerType:
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
    END OF INHERITED FROM om__BasicLayerType */
/// Attribute IsCategorical of type xs:boolean.
   @bool*                                IsCategorical                  0;	///< Optional attribute.
/// Attribute Min of type xs:double.
   @double*                              Min                            0;	///< Optional attribute.
/// Attribute Max of type xs:double.
   @double*                              Max                            0;	///< Optional attribute.
};

/// "http://openmodeller.cria.org.br/xml/2.0":SamplingJobType is a complexType with complexContent extension of "http://openmodeller.cria.org.br/xml/2.0":IdentifiedType.
/// class om__SamplingJobType operations:
/// - soap_new_om__SamplingJobType(soap*) allocate
/// - soap_new_om__SamplingJobType(soap*, int num) allocate array
/// - soap_new_req_om__SamplingJobType(soap*, ...) allocate, set required members
/// - soap_new_set_om__SamplingJobType(soap*, ...) allocate, set all public members
/// - int soap_read_om__SamplingJobType(soap*, om__SamplingJobType*) deserialize from a stream
/// - int soap_write_om__SamplingJobType(soap, om__SamplingJobType*) serialize to a stream
class om__SamplingJobType : public om__IdentifiedType
{ public:
/*  INHERITED FROM om__IdentifiedType:
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM om__IdentifiedType */
/// Element EnvironmentRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   EnvironmentRef                 1;	///< Required element.
/// Element Options of type "http://openmodeller.cria.org.br/xml/2.0":SamplingOptionsType.
    om__SamplingOptionsType*             Options                        1;	///< Required element.
};

/// "http://openmodeller.cria.org.br/xml/2.0":CreateModelJobType is a complexType with complexContent extension of "http://openmodeller.cria.org.br/xml/2.0":IdentifiedType.
/// class om__CreateModelJobType operations:
/// - soap_new_om__CreateModelJobType(soap*) allocate
/// - soap_new_om__CreateModelJobType(soap*, int num) allocate array
/// - soap_new_req_om__CreateModelJobType(soap*, ...) allocate, set required members
/// - soap_new_set_om__CreateModelJobType(soap*, ...) allocate, set all public members
/// - int soap_read_om__CreateModelJobType(soap*, om__CreateModelJobType*) deserialize from a stream
/// - int soap_write_om__CreateModelJobType(soap, om__CreateModelJobType*) serialize to a stream
class om__CreateModelJobType : public om__IdentifiedType
{ public:
/*  INHERITED FROM om__IdentifiedType:
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM om__IdentifiedType */
/// Element EnvironmentRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   EnvironmentRef                 1;	///< Required element.
/// Element PresenceRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   PresenceRef                    1;	///< Required element.
/// Element AbsenceRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   AbsenceRef                     0;	///< Optional element.
/// Element AlgorithmRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   AlgorithmRef                   1;	///< Required element.
/// Element Options of type "http://openmodeller.cria.org.br/xml/2.0":ModelOptionsType.
    om__ModelOptionsType*                Options                        0;	///< Optional element.
};

/// "http://openmodeller.cria.org.br/xml/2.0":TestModelJobType is a complexType with complexContent extension of "http://openmodeller.cria.org.br/xml/2.0":IdentifiedType.
/// class om__TestModelJobType operations:
/// - soap_new_om__TestModelJobType(soap*) allocate
/// - soap_new_om__TestModelJobType(soap*, int num) allocate array
/// - soap_new_req_om__TestModelJobType(soap*, ...) allocate, set required members
/// - soap_new_set_om__TestModelJobType(soap*, ...) allocate, set all public members
/// - int soap_read_om__TestModelJobType(soap*, om__TestModelJobType*) deserialize from a stream
/// - int soap_write_om__TestModelJobType(soap, om__TestModelJobType*) serialize to a stream
class om__TestModelJobType : public om__IdentifiedType
{ public:
/*  INHERITED FROM om__IdentifiedType:
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM om__IdentifiedType */
/// Element EnvironmentRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   EnvironmentRef                 1;	///< Required element.
/// Element PresenceRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   PresenceRef                    1;	///< Required element.
/// Element AbsenceRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   AbsenceRef                     0;	///< Optional element.
/// Element ModelRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   ModelRef                       1;	///< Required element.
/// Element Statistics of type "http://openmodeller.cria.org.br/xml/2.0":TestOptionsType.
    om__TestOptionsType*                 Statistics                     0;	///< Optional element.
};

/// "http://openmodeller.cria.org.br/xml/2.0":ProjectModelJobType is a complexType with complexContent extension of "http://openmodeller.cria.org.br/xml/2.0":IdentifiedType.
/// class om__ProjectModelJobType operations:
/// - soap_new_om__ProjectModelJobType(soap*) allocate
/// - soap_new_om__ProjectModelJobType(soap*, int num) allocate array
/// - soap_new_req_om__ProjectModelJobType(soap*, ...) allocate, set required members
/// - soap_new_set_om__ProjectModelJobType(soap*, ...) allocate, set all public members
/// - int soap_read_om__ProjectModelJobType(soap*, om__ProjectModelJobType*) deserialize from a stream
/// - int soap_write_om__ProjectModelJobType(soap, om__ProjectModelJobType*) serialize to a stream
class om__ProjectModelJobType : public om__IdentifiedType
{ public:
/*  INHERITED FROM om__IdentifiedType:
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM om__IdentifiedType */
/// Element EnvironmentRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   EnvironmentRef                 1;	///< Required element.
/// Element ModelRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   ModelRef                       1;	///< Required element.
/// Element OutputParameters of type "http://openmodeller.cria.org.br/xml/2.0":MapOutputParametersType.
    om__MapOutputParametersType*         OutputParameters               0;	///< Optional element.
/// Element Statistics of type "http://openmodeller.cria.org.br/xml/2.0":ProjectionStatisticsParametersType.
    om__ProjectionStatisticsParametersType*  Statistics                     0;	///< Optional element.
};

/// "http://openmodeller.cria.org.br/xml/2.0":EvaluateModelJobType is a complexType with complexContent extension of "http://openmodeller.cria.org.br/xml/2.0":IdentifiedType.
/// class om__EvaluateModelJobType operations:
/// - soap_new_om__EvaluateModelJobType(soap*) allocate
/// - soap_new_om__EvaluateModelJobType(soap*, int num) allocate array
/// - soap_new_req_om__EvaluateModelJobType(soap*, ...) allocate, set required members
/// - soap_new_set_om__EvaluateModelJobType(soap*, ...) allocate, set all public members
/// - int soap_read_om__EvaluateModelJobType(soap*, om__EvaluateModelJobType*) deserialize from a stream
/// - int soap_write_om__EvaluateModelJobType(soap, om__EvaluateModelJobType*) serialize to a stream
class om__EvaluateModelJobType : public om__IdentifiedType
{ public:
/*  INHERITED FROM om__IdentifiedType:
/// Attribute id of type xs:ID.
   @xsd__ID                              id                             1;	///< Required attribute.
    END OF INHERITED FROM om__IdentifiedType */
/// Element EnvironmentRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   EnvironmentRef                 1;	///< Required element.
/// Element PresenceRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   PresenceRef                    1;	///< Required element.
/// Element AbsenceRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   AbsenceRef                     0;	///< Optional element.
/// Element ModelRef of type "http://openmodeller.cria.org.br/xml/2.0":ReferenceType.
    om__ReferenceType*                   ModelRef                       1;	///< Required element.
};

/// "http://openmodeller.cria.org.br/xml/2.0":LayerMetadataType is a complexType with complexContent extension of "http://openmodeller.cria.org.br/xml/2.0":ModellingLayerType.
/// class om__LayerMetadataType operations:
/// - soap_new_om__LayerMetadataType(soap*) allocate
/// - soap_new_om__LayerMetadataType(soap*, int num) allocate array
/// - soap_new_req_om__LayerMetadataType(soap*, ...) allocate, set required members
/// - soap_new_set_om__LayerMetadataType(soap*, ...) allocate, set all public members
/// - int soap_read_om__LayerMetadataType(soap*, om__LayerMetadataType*) deserialize from a stream
/// - int soap_write_om__LayerMetadataType(soap, om__LayerMetadataType*) serialize to a stream
class om__LayerMetadataType : public om__ModellingLayerType
{ public:
/*  INHERITED FROM om__BasicLayerType:
/// Attribute Id of type xs:string.
   @std::string                          Id                             1;	///< Required attribute.
    END OF INHERITED FROM om__BasicLayerType */
/*  INHERITED FROM om__ModellingLayerType:
/// Attribute IsCategorical of type xs:boolean.
   @bool*                                IsCategorical                  0;	///< Optional attribute.
/// Attribute Min of type xs:double.
   @double*                              Min                            0;	///< Optional attribute.
/// Attribute Max of type xs:double.
   @double*                              Max                            0;	///< Optional attribute.
    END OF INHERITED FROM om__ModellingLayerType */
/// Element Label of type xs:string.
    std::string*                         Label                          0;	///< Optional element.
/// Attribute HasProjection of type xs:boolean.
   @bool*                                HasProjection                  0;	///< Optional attribute.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://openmodeller.cria.org.br/xml/2.0                                  *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":AvailableAlgorithms of type "http://openmodeller.cria.org.br/xml/2.0":AvailableAlgorithmsType.
typedef om__AvailableAlgorithmsType _om__AvailableAlgorithms;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":Algorithms of type "http://openmodeller.cria.org.br/xml/2.0":AlgorithmsMetadataType.
typedef om__AlgorithmsMetadataType _om__Algorithms;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":AvailableLayers of type "http://openmodeller.cria.org.br/xml/2.0":AvailableLayersType.
typedef om__AvailableLayersType _om__AvailableLayers;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ModelParameters of type "http://openmodeller.cria.org.br/xml/2.0":ModelParametersType.
typedef om__ModelParametersType _om__ModelParameters;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ModelEnvelope of type "http://openmodeller.cria.org.br/xml/2.0":ModelEnvelopeType.
typedef om__ModelEnvelopeType _om__ModelEnvelope;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":TestParameters of type "http://openmodeller.cria.org.br/xml/2.0":TestParametersType.
typedef om__TestParametersType _om__TestParameters;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":TestResultEnvelope of type "http://openmodeller.cria.org.br/xml/2.0":TestResultEnvelopeType.
typedef om__TestResultEnvelopeType _om__TestResultEnvelope;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":SerializedModel of type "http://openmodeller.cria.org.br/xml/2.0":SerializedModelType.
typedef om__SerializedModelType _om__SerializedModel;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ProjectionParameters of type "http://openmodeller.cria.org.br/xml/2.0":ProjectionParametersType.
typedef om__ProjectionParametersType _om__ProjectionParameters;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ProjectionEnvelope of type "http://openmodeller.cria.org.br/xml/2.0":ProjectionEnvelopeType.
typedef om__ProjectionEnvelopeType _om__ProjectionEnvelope;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ModelEvaluationParameters of type "http://openmodeller.cria.org.br/xml/2.0":ModelEvaluationParametersType.
typedef om__ModelEvaluationParametersType _om__ModelEvaluationParameters;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ModelEvaluation of type "http://openmodeller.cria.org.br/xml/2.0":ModelEvaluationResultType.
typedef om__ModelEvaluationResultType _om__ModelEvaluation;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":SamplingParameters of type "http://openmodeller.cria.org.br/xml/2.0":SamplingParametersType.
typedef om__SamplingParametersType _om__SamplingParameters;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":Sampler of type "http://openmodeller.cria.org.br/xml/2.0":SamplerType.
typedef om__SamplerType _om__Sampler;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ExperimentParameters of type "http://openmodeller.cria.org.br/xml/2.0":ExperimentParametersType.
typedef om__ExperimentParametersType _om__ExperimentParameters;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ExperimentTickets of type "http://openmodeller.cria.org.br/xml/2.0":JobTicketsType.
typedef om__JobTicketsType _om__ExperimentTickets;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ResultSet of type "http://openmodeller.cria.org.br/xml/2.0":ResultSetType.
typedef om__ResultSetType _om__ResultSet;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":SamplingJob of type "http://openmodeller.cria.org.br/xml/2.0":SamplingJobType.
typedef om__SamplingJobType _om__SamplingJob;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":CreateModelJob of type "http://openmodeller.cria.org.br/xml/2.0":CreateModelJobType.
typedef om__CreateModelJobType _om__CreateModelJob;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":TestModelJob of type "http://openmodeller.cria.org.br/xml/2.0":TestModelJobType.
typedef om__TestModelJobType _om__TestModelJob;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":ProjectModelJob of type "http://openmodeller.cria.org.br/xml/2.0":ProjectModelJobType.
typedef om__ProjectModelJobType _om__ProjectModelJob;

/// Top-level root element "http://openmodeller.cria.org.br/xml/2.0":EvaluateModelJob of type "http://openmodeller.cria.org.br/xml/2.0":EvaluateModelJobType.
typedef om__EvaluateModelJobType _om__EvaluateModelJob;

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://openmodeller.cria.org.br/xml/2.0                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section om Top-level root elements of schema "http://openmodeller.cria.org.br/xml/2.0"

  - <om:AvailableAlgorithms> @ref _om__AvailableAlgorithms
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__AvailableAlgorithms(struct soap*, _om__AvailableAlgorithms*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__AvailableAlgorithms(struct soap*, _om__AvailableAlgorithms*);
    @endcode

  - <om:Algorithms> @ref _om__Algorithms
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__Algorithms(struct soap*, _om__Algorithms*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__Algorithms(struct soap*, _om__Algorithms*);
    @endcode

  - <om:AvailableLayers> @ref _om__AvailableLayers
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__AvailableLayers(struct soap*, _om__AvailableLayers*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__AvailableLayers(struct soap*, _om__AvailableLayers*);
    @endcode

  - <om:ModelParameters> @ref _om__ModelParameters
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ModelParameters(struct soap*, _om__ModelParameters*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ModelParameters(struct soap*, _om__ModelParameters*);
    @endcode

  - <om:ModelEnvelope> @ref _om__ModelEnvelope
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ModelEnvelope(struct soap*, _om__ModelEnvelope*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ModelEnvelope(struct soap*, _om__ModelEnvelope*);
    @endcode

  - <om:TestParameters> @ref _om__TestParameters
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__TestParameters(struct soap*, _om__TestParameters*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__TestParameters(struct soap*, _om__TestParameters*);
    @endcode

  - <om:TestResultEnvelope> @ref _om__TestResultEnvelope
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__TestResultEnvelope(struct soap*, _om__TestResultEnvelope*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__TestResultEnvelope(struct soap*, _om__TestResultEnvelope*);
    @endcode

  - <om:SerializedModel> @ref _om__SerializedModel
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__SerializedModel(struct soap*, _om__SerializedModel*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__SerializedModel(struct soap*, _om__SerializedModel*);
    @endcode

  - <om:ProjectionParameters> @ref _om__ProjectionParameters
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ProjectionParameters(struct soap*, _om__ProjectionParameters*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ProjectionParameters(struct soap*, _om__ProjectionParameters*);
    @endcode

  - <om:ProjectionEnvelope> @ref _om__ProjectionEnvelope
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ProjectionEnvelope(struct soap*, _om__ProjectionEnvelope*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ProjectionEnvelope(struct soap*, _om__ProjectionEnvelope*);
    @endcode

  - <om:ModelEvaluationParameters> @ref _om__ModelEvaluationParameters
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ModelEvaluationParameters(struct soap*, _om__ModelEvaluationParameters*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ModelEvaluationParameters(struct soap*, _om__ModelEvaluationParameters*);
    @endcode

  - <om:ModelEvaluation> @ref _om__ModelEvaluation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ModelEvaluation(struct soap*, _om__ModelEvaluation*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ModelEvaluation(struct soap*, _om__ModelEvaluation*);
    @endcode

  - <om:SamplingParameters> @ref _om__SamplingParameters
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__SamplingParameters(struct soap*, _om__SamplingParameters*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__SamplingParameters(struct soap*, _om__SamplingParameters*);
    @endcode

  - <om:Sampler> @ref _om__Sampler
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__Sampler(struct soap*, _om__Sampler*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__Sampler(struct soap*, _om__Sampler*);
    @endcode

  - <om:ExperimentParameters> @ref _om__ExperimentParameters
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ExperimentParameters(struct soap*, _om__ExperimentParameters*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ExperimentParameters(struct soap*, _om__ExperimentParameters*);
    @endcode

  - <om:ExperimentTickets> @ref _om__ExperimentTickets
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ExperimentTickets(struct soap*, _om__ExperimentTickets*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ExperimentTickets(struct soap*, _om__ExperimentTickets*);
    @endcode

  - <om:ResultSet> @ref _om__ResultSet
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ResultSet(struct soap*, _om__ResultSet*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ResultSet(struct soap*, _om__ResultSet*);
    @endcode

  - <om:AbstractJob> (use wsdl2h option -g to auto-generate)

  - <om:SamplingJob> @ref _om__SamplingJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__SamplingJob(struct soap*, _om__SamplingJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__SamplingJob(struct soap*, _om__SamplingJob*);
    @endcode

  - <om:CreateModelJob> @ref _om__CreateModelJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__CreateModelJob(struct soap*, _om__CreateModelJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__CreateModelJob(struct soap*, _om__CreateModelJob*);
    @endcode

  - <om:TestModelJob> @ref _om__TestModelJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__TestModelJob(struct soap*, _om__TestModelJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__TestModelJob(struct soap*, _om__TestModelJob*);
    @endcode

  - <om:ProjectModelJob> @ref _om__ProjectModelJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__ProjectModelJob(struct soap*, _om__ProjectModelJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__ProjectModelJob(struct soap*, _om__ProjectModelJob*);
    @endcode

  - <om:EvaluateModelJob> @ref _om__EvaluateModelJob
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__om__EvaluateModelJob(struct soap*, _om__EvaluateModelJob*);
    // Writer (returns SOAP_OK on success):
    soap_write__om__EvaluateModelJob(struct soap*, _om__EvaluateModelJob*);
    @endcode

*/

} // namespace om

/* End of openModeller.h */
