/* omH.h
   Generated by gSOAP 2.8.15 from openModeller.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef omH_H
#define omH_H
#include "omStub.h"

namespace om {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 om_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 om_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 om_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_byte
#define SOAP_TYPE_om_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( om::soap_serialize_byte(soap, data), soap_begin_send(soap) || om::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !om::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_int
#define SOAP_TYPE_om_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( om::soap_serialize_int(soap, data), soap_begin_send(soap) || om::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !om::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_om__ZeroOneIntervalType
#define SOAP_TYPE_om_om__ZeroOneIntervalType (61)
#endif

#define soap_default_om__ZeroOneIntervalType(soap, a) soap_default_double(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ZeroOneIntervalType(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_om__ZeroOneIntervalType(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__ZeroOneIntervalType(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_om__ZeroOneIntervalType
#define soap_write_om__ZeroOneIntervalType(soap, data) ( om::soap_serialize_om__ZeroOneIntervalType(soap, data), soap_begin_send(soap) || om::soap_put_om__ZeroOneIntervalType(soap, data, "om:ZeroOneIntervalType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_om__ZeroOneIntervalType(struct soap*, double *, const char*, const char*);

#ifndef soap_read_om__ZeroOneIntervalType
#define soap_read_om__ZeroOneIntervalType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ZeroOneIntervalType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_double
#define SOAP_TYPE_om_double (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( om::soap_serialize_double(soap, data), soap_begin_send(soap) || om::soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !om::soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_bool
#define SOAP_TYPE_om_bool (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( om::soap_serialize_bool(soap, data), soap_begin_send(soap) || om::soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !om::soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_om__ThresholdCalculationType
#define SOAP_TYPE_om_om__ThresholdCalculationType (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_om__ThresholdCalculationType(struct soap*, enum om__ThresholdCalculationType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ThresholdCalculationType(struct soap*, const char*, int, const enum om__ThresholdCalculationType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_om__ThresholdCalculationType2s(struct soap*, enum om__ThresholdCalculationType);
SOAP_FMAC3 enum om__ThresholdCalculationType * SOAP_FMAC4 soap_in_om__ThresholdCalculationType(struct soap*, const char*, enum om__ThresholdCalculationType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2om__ThresholdCalculationType(struct soap*, const char*, enum om__ThresholdCalculationType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__ThresholdCalculationType(struct soap*, const enum om__ThresholdCalculationType *, const char*, const char*);

#ifndef soap_write_om__ThresholdCalculationType
#define soap_write_om__ThresholdCalculationType(soap, data) ( om::soap_serialize_om__ThresholdCalculationType(soap, data), soap_begin_send(soap) || om::soap_put_om__ThresholdCalculationType(soap, data, "om:ThresholdCalculationType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum om__ThresholdCalculationType * SOAP_FMAC4 soap_get_om__ThresholdCalculationType(struct soap*, enum om__ThresholdCalculationType *, const char*, const char*);

#ifndef soap_read_om__ThresholdCalculationType
#define soap_read_om__ThresholdCalculationType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ThresholdCalculationType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


/* _om__EvaluateModelJob is a typedef element/attribute synonym for om__EvaluateModelJobType */

#ifndef SOAP_TYPE_om__om__EvaluateModelJob
#define SOAP_TYPE_om__om__EvaluateModelJob (201)
#endif

#define soap_default__om__EvaluateModelJob(soap, a) (a)->om__EvaluateModelJobType::soap_default(soap)


#define soap_serialize__om__EvaluateModelJob(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__EvaluateModelJob soap_out_om__EvaluateModelJobType


#define soap_in__om__EvaluateModelJob soap_in_om__EvaluateModelJobType


#define soap_put__om__EvaluateModelJob soap_put_om__EvaluateModelJobType


#define soap_get__om__EvaluateModelJob soap_get_om__EvaluateModelJobType


#define soap_instantiate__om__EvaluateModelJob soap_instantiate_om__EvaluateModelJobType


#define soap_copy__om__EvaluateModelJob soap_copy_om__EvaluateModelJobType

/* _om__ProjectModelJob is a typedef element/attribute synonym for om__ProjectModelJobType */

#ifndef SOAP_TYPE_om__om__ProjectModelJob
#define SOAP_TYPE_om__om__ProjectModelJob (200)
#endif

#define soap_default__om__ProjectModelJob(soap, a) (a)->om__ProjectModelJobType::soap_default(soap)


#define soap_serialize__om__ProjectModelJob(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ProjectModelJob soap_out_om__ProjectModelJobType


#define soap_in__om__ProjectModelJob soap_in_om__ProjectModelJobType


#define soap_put__om__ProjectModelJob soap_put_om__ProjectModelJobType


#define soap_get__om__ProjectModelJob soap_get_om__ProjectModelJobType


#define soap_instantiate__om__ProjectModelJob soap_instantiate_om__ProjectModelJobType


#define soap_copy__om__ProjectModelJob soap_copy_om__ProjectModelJobType

/* _om__TestModelJob is a typedef element/attribute synonym for om__TestModelJobType */

#ifndef SOAP_TYPE_om__om__TestModelJob
#define SOAP_TYPE_om__om__TestModelJob (199)
#endif

#define soap_default__om__TestModelJob(soap, a) (a)->om__TestModelJobType::soap_default(soap)


#define soap_serialize__om__TestModelJob(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__TestModelJob soap_out_om__TestModelJobType


#define soap_in__om__TestModelJob soap_in_om__TestModelJobType


#define soap_put__om__TestModelJob soap_put_om__TestModelJobType


#define soap_get__om__TestModelJob soap_get_om__TestModelJobType


#define soap_instantiate__om__TestModelJob soap_instantiate_om__TestModelJobType


#define soap_copy__om__TestModelJob soap_copy_om__TestModelJobType

/* _om__CreateModelJob is a typedef element/attribute synonym for om__CreateModelJobType */

#ifndef SOAP_TYPE_om__om__CreateModelJob
#define SOAP_TYPE_om__om__CreateModelJob (198)
#endif

#define soap_default__om__CreateModelJob(soap, a) (a)->om__CreateModelJobType::soap_default(soap)


#define soap_serialize__om__CreateModelJob(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__CreateModelJob soap_out_om__CreateModelJobType


#define soap_in__om__CreateModelJob soap_in_om__CreateModelJobType


#define soap_put__om__CreateModelJob soap_put_om__CreateModelJobType


#define soap_get__om__CreateModelJob soap_get_om__CreateModelJobType


#define soap_instantiate__om__CreateModelJob soap_instantiate_om__CreateModelJobType


#define soap_copy__om__CreateModelJob soap_copy_om__CreateModelJobType

/* _om__SamplingJob is a typedef element/attribute synonym for om__SamplingJobType */

#ifndef SOAP_TYPE_om__om__SamplingJob
#define SOAP_TYPE_om__om__SamplingJob (197)
#endif

#define soap_default__om__SamplingJob(soap, a) (a)->om__SamplingJobType::soap_default(soap)


#define soap_serialize__om__SamplingJob(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__SamplingJob soap_out_om__SamplingJobType


#define soap_in__om__SamplingJob soap_in_om__SamplingJobType


#define soap_put__om__SamplingJob soap_put_om__SamplingJobType


#define soap_get__om__SamplingJob soap_get_om__SamplingJobType


#define soap_instantiate__om__SamplingJob soap_instantiate_om__SamplingJobType


#define soap_copy__om__SamplingJob soap_copy_om__SamplingJobType

/* _om__ResultSet is a typedef element/attribute synonym for om__ResultSetType */

#ifndef SOAP_TYPE_om__om__ResultSet
#define SOAP_TYPE_om__om__ResultSet (196)
#endif

#define soap_default__om__ResultSet(soap, a) (a)->om__ResultSetType::soap_default(soap)


#define soap_serialize__om__ResultSet(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ResultSet soap_out_om__ResultSetType


#define soap_in__om__ResultSet soap_in_om__ResultSetType


#define soap_put__om__ResultSet soap_put_om__ResultSetType


#define soap_get__om__ResultSet soap_get_om__ResultSetType


#define soap_instantiate__om__ResultSet soap_instantiate_om__ResultSetType


#define soap_copy__om__ResultSet soap_copy_om__ResultSetType

/* _om__ExperimentTickets is a typedef element/attribute synonym for om__JobTicketsType */

#ifndef SOAP_TYPE_om__om__ExperimentTickets
#define SOAP_TYPE_om__om__ExperimentTickets (195)
#endif

#define soap_default__om__ExperimentTickets(soap, a) (a)->om__JobTicketsType::soap_default(soap)


#define soap_serialize__om__ExperimentTickets(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ExperimentTickets soap_out_om__JobTicketsType


#define soap_in__om__ExperimentTickets soap_in_om__JobTicketsType


#define soap_put__om__ExperimentTickets soap_put_om__JobTicketsType


#define soap_get__om__ExperimentTickets soap_get_om__JobTicketsType


#define soap_instantiate__om__ExperimentTickets soap_instantiate_om__JobTicketsType


#define soap_copy__om__ExperimentTickets soap_copy_om__JobTicketsType

/* _om__ExperimentParameters is a typedef element/attribute synonym for om__ExperimentParametersType */

#ifndef SOAP_TYPE_om__om__ExperimentParameters
#define SOAP_TYPE_om__om__ExperimentParameters (194)
#endif

#define soap_default__om__ExperimentParameters(soap, a) (a)->om__ExperimentParametersType::soap_default(soap)


#define soap_serialize__om__ExperimentParameters(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ExperimentParameters soap_out_om__ExperimentParametersType


#define soap_in__om__ExperimentParameters soap_in_om__ExperimentParametersType


#define soap_put__om__ExperimentParameters soap_put_om__ExperimentParametersType


#define soap_get__om__ExperimentParameters soap_get_om__ExperimentParametersType


#define soap_instantiate__om__ExperimentParameters soap_instantiate_om__ExperimentParametersType


#define soap_copy__om__ExperimentParameters soap_copy_om__ExperimentParametersType

/* _om__Sampler is a typedef element/attribute synonym for om__SamplerType */

#ifndef SOAP_TYPE_om__om__Sampler
#define SOAP_TYPE_om__om__Sampler (193)
#endif

#define soap_default__om__Sampler(soap, a) (a)->om__SamplerType::soap_default(soap)


#define soap_serialize__om__Sampler(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__Sampler soap_out_om__SamplerType


#define soap_in__om__Sampler soap_in_om__SamplerType


#define soap_put__om__Sampler soap_put_om__SamplerType


#define soap_get__om__Sampler soap_get_om__SamplerType


#define soap_instantiate__om__Sampler soap_instantiate_om__SamplerType


#define soap_copy__om__Sampler soap_copy_om__SamplerType

/* _om__SamplingParameters is a typedef element/attribute synonym for om__SamplingParametersType */

#ifndef SOAP_TYPE_om__om__SamplingParameters
#define SOAP_TYPE_om__om__SamplingParameters (192)
#endif

#define soap_default__om__SamplingParameters(soap, a) (a)->om__SamplingParametersType::soap_default(soap)


#define soap_serialize__om__SamplingParameters(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__SamplingParameters soap_out_om__SamplingParametersType


#define soap_in__om__SamplingParameters soap_in_om__SamplingParametersType


#define soap_put__om__SamplingParameters soap_put_om__SamplingParametersType


#define soap_get__om__SamplingParameters soap_get_om__SamplingParametersType


#define soap_instantiate__om__SamplingParameters soap_instantiate_om__SamplingParametersType


#define soap_copy__om__SamplingParameters soap_copy_om__SamplingParametersType

/* _om__ModelEvaluation is a typedef element/attribute synonym for om__ModelEvaluationResultType */

#ifndef SOAP_TYPE_om__om__ModelEvaluation
#define SOAP_TYPE_om__om__ModelEvaluation (191)
#endif

#define soap_default__om__ModelEvaluation(soap, a) (a)->om__ModelEvaluationResultType::soap_default(soap)


#define soap_serialize__om__ModelEvaluation(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ModelEvaluation soap_out_om__ModelEvaluationResultType


#define soap_in__om__ModelEvaluation soap_in_om__ModelEvaluationResultType


#define soap_put__om__ModelEvaluation soap_put_om__ModelEvaluationResultType


#define soap_get__om__ModelEvaluation soap_get_om__ModelEvaluationResultType


#define soap_instantiate__om__ModelEvaluation soap_instantiate_om__ModelEvaluationResultType


#define soap_copy__om__ModelEvaluation soap_copy_om__ModelEvaluationResultType

/* _om__ModelEvaluationParameters is a typedef element/attribute synonym for om__ModelEvaluationParametersType */

#ifndef SOAP_TYPE_om__om__ModelEvaluationParameters
#define SOAP_TYPE_om__om__ModelEvaluationParameters (190)
#endif

#define soap_default__om__ModelEvaluationParameters(soap, a) (a)->om__ModelEvaluationParametersType::soap_default(soap)


#define soap_serialize__om__ModelEvaluationParameters(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ModelEvaluationParameters soap_out_om__ModelEvaluationParametersType


#define soap_in__om__ModelEvaluationParameters soap_in_om__ModelEvaluationParametersType


#define soap_put__om__ModelEvaluationParameters soap_put_om__ModelEvaluationParametersType


#define soap_get__om__ModelEvaluationParameters soap_get_om__ModelEvaluationParametersType


#define soap_instantiate__om__ModelEvaluationParameters soap_instantiate_om__ModelEvaluationParametersType


#define soap_copy__om__ModelEvaluationParameters soap_copy_om__ModelEvaluationParametersType

/* _om__ProjectionEnvelope is a typedef element/attribute synonym for om__ProjectionEnvelopeType */

#ifndef SOAP_TYPE_om__om__ProjectionEnvelope
#define SOAP_TYPE_om__om__ProjectionEnvelope (189)
#endif

#define soap_default__om__ProjectionEnvelope(soap, a) (a)->om__ProjectionEnvelopeType::soap_default(soap)


#define soap_serialize__om__ProjectionEnvelope(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ProjectionEnvelope soap_out_om__ProjectionEnvelopeType


#define soap_in__om__ProjectionEnvelope soap_in_om__ProjectionEnvelopeType


#define soap_put__om__ProjectionEnvelope soap_put_om__ProjectionEnvelopeType


#define soap_get__om__ProjectionEnvelope soap_get_om__ProjectionEnvelopeType


#define soap_instantiate__om__ProjectionEnvelope soap_instantiate_om__ProjectionEnvelopeType


#define soap_copy__om__ProjectionEnvelope soap_copy_om__ProjectionEnvelopeType

/* _om__ProjectionParameters is a typedef element/attribute synonym for om__ProjectionParametersType */

#ifndef SOAP_TYPE_om__om__ProjectionParameters
#define SOAP_TYPE_om__om__ProjectionParameters (188)
#endif

#define soap_default__om__ProjectionParameters(soap, a) (a)->om__ProjectionParametersType::soap_default(soap)


#define soap_serialize__om__ProjectionParameters(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ProjectionParameters soap_out_om__ProjectionParametersType


#define soap_in__om__ProjectionParameters soap_in_om__ProjectionParametersType


#define soap_put__om__ProjectionParameters soap_put_om__ProjectionParametersType


#define soap_get__om__ProjectionParameters soap_get_om__ProjectionParametersType


#define soap_instantiate__om__ProjectionParameters soap_instantiate_om__ProjectionParametersType


#define soap_copy__om__ProjectionParameters soap_copy_om__ProjectionParametersType

/* _om__SerializedModel is a typedef element/attribute synonym for om__SerializedModelType */

#ifndef SOAP_TYPE_om__om__SerializedModel
#define SOAP_TYPE_om__om__SerializedModel (187)
#endif

#define soap_default__om__SerializedModel(soap, a) (a)->om__SerializedModelType::soap_default(soap)


#define soap_serialize__om__SerializedModel(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__SerializedModel soap_out_om__SerializedModelType


#define soap_in__om__SerializedModel soap_in_om__SerializedModelType


#define soap_put__om__SerializedModel soap_put_om__SerializedModelType


#define soap_get__om__SerializedModel soap_get_om__SerializedModelType


#define soap_instantiate__om__SerializedModel soap_instantiate_om__SerializedModelType


#define soap_copy__om__SerializedModel soap_copy_om__SerializedModelType

/* _om__TestResultEnvelope is a typedef element/attribute synonym for om__TestResultEnvelopeType */

#ifndef SOAP_TYPE_om__om__TestResultEnvelope
#define SOAP_TYPE_om__om__TestResultEnvelope (186)
#endif

#define soap_default__om__TestResultEnvelope(soap, a) (a)->om__TestResultEnvelopeType::soap_default(soap)


#define soap_serialize__om__TestResultEnvelope(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__TestResultEnvelope soap_out_om__TestResultEnvelopeType


#define soap_in__om__TestResultEnvelope soap_in_om__TestResultEnvelopeType


#define soap_put__om__TestResultEnvelope soap_put_om__TestResultEnvelopeType


#define soap_get__om__TestResultEnvelope soap_get_om__TestResultEnvelopeType


#define soap_instantiate__om__TestResultEnvelope soap_instantiate_om__TestResultEnvelopeType


#define soap_copy__om__TestResultEnvelope soap_copy_om__TestResultEnvelopeType

/* _om__TestParameters is a typedef element/attribute synonym for om__TestParametersType */

#ifndef SOAP_TYPE_om__om__TestParameters
#define SOAP_TYPE_om__om__TestParameters (185)
#endif

#define soap_default__om__TestParameters(soap, a) (a)->om__TestParametersType::soap_default(soap)


#define soap_serialize__om__TestParameters(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__TestParameters soap_out_om__TestParametersType


#define soap_in__om__TestParameters soap_in_om__TestParametersType


#define soap_put__om__TestParameters soap_put_om__TestParametersType


#define soap_get__om__TestParameters soap_get_om__TestParametersType


#define soap_instantiate__om__TestParameters soap_instantiate_om__TestParametersType


#define soap_copy__om__TestParameters soap_copy_om__TestParametersType

/* _om__ModelEnvelope is a typedef element/attribute synonym for om__ModelEnvelopeType */

#ifndef SOAP_TYPE_om__om__ModelEnvelope
#define SOAP_TYPE_om__om__ModelEnvelope (184)
#endif

#define soap_default__om__ModelEnvelope(soap, a) (a)->om__ModelEnvelopeType::soap_default(soap)


#define soap_serialize__om__ModelEnvelope(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ModelEnvelope soap_out_om__ModelEnvelopeType


#define soap_in__om__ModelEnvelope soap_in_om__ModelEnvelopeType


#define soap_put__om__ModelEnvelope soap_put_om__ModelEnvelopeType


#define soap_get__om__ModelEnvelope soap_get_om__ModelEnvelopeType


#define soap_instantiate__om__ModelEnvelope soap_instantiate_om__ModelEnvelopeType


#define soap_copy__om__ModelEnvelope soap_copy_om__ModelEnvelopeType

/* _om__ModelParameters is a typedef element/attribute synonym for om__ModelParametersType */

#ifndef SOAP_TYPE_om__om__ModelParameters
#define SOAP_TYPE_om__om__ModelParameters (183)
#endif

#define soap_default__om__ModelParameters(soap, a) (a)->om__ModelParametersType::soap_default(soap)


#define soap_serialize__om__ModelParameters(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__ModelParameters soap_out_om__ModelParametersType


#define soap_in__om__ModelParameters soap_in_om__ModelParametersType


#define soap_put__om__ModelParameters soap_put_om__ModelParametersType


#define soap_get__om__ModelParameters soap_get_om__ModelParametersType


#define soap_instantiate__om__ModelParameters soap_instantiate_om__ModelParametersType


#define soap_copy__om__ModelParameters soap_copy_om__ModelParametersType

/* _om__AvailableLayers is a typedef element/attribute synonym for om__AvailableLayersType */

#ifndef SOAP_TYPE_om__om__AvailableLayers
#define SOAP_TYPE_om__om__AvailableLayers (182)
#endif

#define soap_default__om__AvailableLayers(soap, a) (a)->om__AvailableLayersType::soap_default(soap)


#define soap_serialize__om__AvailableLayers(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__AvailableLayers soap_out_om__AvailableLayersType


#define soap_in__om__AvailableLayers soap_in_om__AvailableLayersType


#define soap_put__om__AvailableLayers soap_put_om__AvailableLayersType


#define soap_get__om__AvailableLayers soap_get_om__AvailableLayersType


#define soap_instantiate__om__AvailableLayers soap_instantiate_om__AvailableLayersType


#define soap_copy__om__AvailableLayers soap_copy_om__AvailableLayersType

/* _om__Algorithms is a typedef element/attribute synonym for om__AlgorithmsMetadataType */

#ifndef SOAP_TYPE_om__om__Algorithms
#define SOAP_TYPE_om__om__Algorithms (181)
#endif

#define soap_default__om__Algorithms(soap, a) (a)->om__AlgorithmsMetadataType::soap_default(soap)


#define soap_serialize__om__Algorithms(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__Algorithms soap_out_om__AlgorithmsMetadataType


#define soap_in__om__Algorithms soap_in_om__AlgorithmsMetadataType


#define soap_put__om__Algorithms soap_put_om__AlgorithmsMetadataType


#define soap_get__om__Algorithms soap_get_om__AlgorithmsMetadataType


#define soap_instantiate__om__Algorithms soap_instantiate_om__AlgorithmsMetadataType


#define soap_copy__om__Algorithms soap_copy_om__AlgorithmsMetadataType

/* _om__AvailableAlgorithms is a typedef element/attribute synonym for om__AvailableAlgorithmsType */

#ifndef SOAP_TYPE_om__om__AvailableAlgorithms
#define SOAP_TYPE_om__om__AvailableAlgorithms (180)
#endif

#define soap_default__om__AvailableAlgorithms(soap, a) (a)->om__AvailableAlgorithmsType::soap_default(soap)


#define soap_serialize__om__AvailableAlgorithms(soap, a) (a)->soap_serialize(soap)


#define soap_out__om__AvailableAlgorithms soap_out_om__AvailableAlgorithmsType


#define soap_in__om__AvailableAlgorithms soap_in_om__AvailableAlgorithmsType


#define soap_put__om__AvailableAlgorithms soap_put_om__AvailableAlgorithmsType


#define soap_get__om__AvailableAlgorithms soap_get_om__AvailableAlgorithmsType


#define soap_instantiate__om__AvailableAlgorithms soap_instantiate_om__AvailableAlgorithmsType


#define soap_copy__om__AvailableAlgorithms soap_copy_om__AvailableAlgorithmsType

#ifndef SOAP_TYPE_om__om__ResultSetType_Job_Values
#define SOAP_TYPE_om__om__ResultSetType_Job_Values (175)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ResultSetType_Job_Values(struct soap*, const char*, int, const _om__ResultSetType_Job_Values *, const char*);
SOAP_FMAC3 _om__ResultSetType_Job_Values * SOAP_FMAC4 soap_in__om__ResultSetType_Job_Values(struct soap*, const char*, _om__ResultSetType_Job_Values *, const char*);

#ifndef soap_write__om__ResultSetType_Job_Values
#define soap_write__om__ResultSetType_Job_Values(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ResultSetType-Job-Values", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ResultSetType_Job_Values * SOAP_FMAC4 soap_get__om__ResultSetType_Job_Values(struct soap*, _om__ResultSetType_Job_Values *, const char*, const char*);

#ifndef soap_read__om__ResultSetType_Job_Values
#define soap_read__om__ResultSetType_Job_Values(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ResultSetType_Job_Values(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ResultSetType_Job_Values * SOAP_FMAC2 soap_instantiate__om__ResultSetType_Job_Values(struct soap*, int, const char*, const char*, size_t*);

inline _om__ResultSetType_Job_Values * soap_new__om__ResultSetType_Job_Values(struct soap *soap, int n = -1) { return soap_instantiate__om__ResultSetType_Job_Values(soap, n, NULL, NULL, NULL); }

inline _om__ResultSetType_Job_Values * soap_new_req__om__ResultSetType_Job_Values(struct soap *soap, std::string& V) { _om__ResultSetType_Job_Values *_p = soap_instantiate__om__ResultSetType_Job_Values(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ResultSetType_Job_Values::V = V; } return _p; }

inline _om__ResultSetType_Job_Values * soap_new_set__om__ResultSetType_Job_Values(struct soap *soap, std::string& V) { _om__ResultSetType_Job_Values *_p = soap_instantiate__om__ResultSetType_Job_Values(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ResultSetType_Job_Values::V = V; } return _p; }

inline void soap_delete__om__ResultSetType_Job_Values(struct soap *soap, _om__ResultSetType_Job_Values *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ResultSetType_Job_Values(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ResultSetType_Job_ProjectionEnvelope
#define SOAP_TYPE_om__om__ResultSetType_Job_ProjectionEnvelope (172)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ResultSetType_Job_ProjectionEnvelope(struct soap*, const char*, int, const _om__ResultSetType_Job_ProjectionEnvelope *, const char*);
SOAP_FMAC3 _om__ResultSetType_Job_ProjectionEnvelope * SOAP_FMAC4 soap_in__om__ResultSetType_Job_ProjectionEnvelope(struct soap*, const char*, _om__ResultSetType_Job_ProjectionEnvelope *, const char*);

#ifndef soap_write__om__ResultSetType_Job_ProjectionEnvelope
#define soap_write__om__ResultSetType_Job_ProjectionEnvelope(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ResultSetType-Job-ProjectionEnvelope", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ResultSetType_Job_ProjectionEnvelope * SOAP_FMAC4 soap_get__om__ResultSetType_Job_ProjectionEnvelope(struct soap*, _om__ResultSetType_Job_ProjectionEnvelope *, const char*, const char*);

#ifndef soap_read__om__ResultSetType_Job_ProjectionEnvelope
#define soap_read__om__ResultSetType_Job_ProjectionEnvelope(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ResultSetType_Job_ProjectionEnvelope(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ResultSetType_Job_ProjectionEnvelope * SOAP_FMAC2 soap_instantiate__om__ResultSetType_Job_ProjectionEnvelope(struct soap*, int, const char*, const char*, size_t*);

inline _om__ResultSetType_Job_ProjectionEnvelope * soap_new__om__ResultSetType_Job_ProjectionEnvelope(struct soap *soap, int n = -1) { return soap_instantiate__om__ResultSetType_Job_ProjectionEnvelope(soap, n, NULL, NULL, NULL); }

inline _om__ResultSetType_Job_ProjectionEnvelope * soap_new_req__om__ResultSetType_Job_ProjectionEnvelope(struct soap *soap, std::string& url) { _om__ResultSetType_Job_ProjectionEnvelope *_p = soap_instantiate__om__ResultSetType_Job_ProjectionEnvelope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ResultSetType_Job_ProjectionEnvelope::url = url; } return _p; }

inline _om__ResultSetType_Job_ProjectionEnvelope * soap_new_set__om__ResultSetType_Job_ProjectionEnvelope(struct soap *soap, om__ProjectionEnvelopeType *Statistics, std::string& url) { _om__ResultSetType_Job_ProjectionEnvelope *_p = soap_instantiate__om__ResultSetType_Job_ProjectionEnvelope(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ResultSetType_Job_ProjectionEnvelope::Statistics = Statistics; _p->_om__ResultSetType_Job_ProjectionEnvelope::url = url; } return _p; }

inline void soap_delete__om__ResultSetType_Job_ProjectionEnvelope(struct soap *soap, _om__ResultSetType_Job_ProjectionEnvelope *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ResultSetType_Job_ProjectionEnvelope(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ResultSetType_Job
#define SOAP_TYPE_om__om__ResultSetType_Job (169)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ResultSetType_Job(struct soap*, const char*, int, const _om__ResultSetType_Job *, const char*);
SOAP_FMAC3 _om__ResultSetType_Job * SOAP_FMAC4 soap_in__om__ResultSetType_Job(struct soap*, const char*, _om__ResultSetType_Job *, const char*);

#ifndef soap_write__om__ResultSetType_Job
#define soap_write__om__ResultSetType_Job(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ResultSetType-Job", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ResultSetType_Job * SOAP_FMAC4 soap_get__om__ResultSetType_Job(struct soap*, _om__ResultSetType_Job *, const char*, const char*);

#ifndef soap_read__om__ResultSetType_Job
#define soap_read__om__ResultSetType_Job(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ResultSetType_Job(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ResultSetType_Job * SOAP_FMAC2 soap_instantiate__om__ResultSetType_Job(struct soap*, int, const char*, const char*, size_t*);

inline _om__ResultSetType_Job * soap_new__om__ResultSetType_Job(struct soap *soap, int n = -1) { return soap_instantiate__om__ResultSetType_Job(soap, n, NULL, NULL, NULL); }

inline _om__ResultSetType_Job * soap_new_req__om__ResultSetType_Job(struct soap *soap, int __union_ResultSetType_Job, union _om__union_ResultSetType_Job& union_ResultSetType_Job, std::string& Ticket) { _om__ResultSetType_Job *_p = soap_instantiate__om__ResultSetType_Job(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ResultSetType_Job::__union_ResultSetType_Job = __union_ResultSetType_Job; _p->_om__ResultSetType_Job::union_ResultSetType_Job = union_ResultSetType_Job; _p->_om__ResultSetType_Job::Ticket = Ticket; } return _p; }

inline _om__ResultSetType_Job * soap_new_set__om__ResultSetType_Job(struct soap *soap, int __union_ResultSetType_Job, union _om__union_ResultSetType_Job& union_ResultSetType_Job, std::string& Ticket) { _om__ResultSetType_Job *_p = soap_instantiate__om__ResultSetType_Job(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ResultSetType_Job::__union_ResultSetType_Job = __union_ResultSetType_Job; _p->_om__ResultSetType_Job::union_ResultSetType_Job = union_ResultSetType_Job; _p->_om__ResultSetType_Job::Ticket = Ticket; } return _p; }

inline void soap_delete__om__ResultSetType_Job(struct soap *soap, _om__ResultSetType_Job *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ResultSetType_Job(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__JobTicketsType_Job
#define SOAP_TYPE_om__om__JobTicketsType_Job (167)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__JobTicketsType_Job(struct soap*, const char*, int, const _om__JobTicketsType_Job *, const char*);
SOAP_FMAC3 _om__JobTicketsType_Job * SOAP_FMAC4 soap_in__om__JobTicketsType_Job(struct soap*, const char*, _om__JobTicketsType_Job *, const char*);

#ifndef soap_write__om__JobTicketsType_Job
#define soap_write__om__JobTicketsType_Job(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:JobTicketsType-Job", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__JobTicketsType_Job * SOAP_FMAC4 soap_get__om__JobTicketsType_Job(struct soap*, _om__JobTicketsType_Job *, const char*, const char*);

#ifndef soap_read__om__JobTicketsType_Job
#define soap_read__om__JobTicketsType_Job(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__JobTicketsType_Job(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__JobTicketsType_Job * SOAP_FMAC2 soap_instantiate__om__JobTicketsType_Job(struct soap*, int, const char*, const char*, size_t*);

inline _om__JobTicketsType_Job * soap_new__om__JobTicketsType_Job(struct soap *soap, int n = -1) { return soap_instantiate__om__JobTicketsType_Job(soap, n, NULL, NULL, NULL); }

inline _om__JobTicketsType_Job * soap_new_req__om__JobTicketsType_Job(struct soap *soap, std::string& id, std::string& Ticket) { _om__JobTicketsType_Job *_p = soap_instantiate__om__JobTicketsType_Job(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__JobTicketsType_Job::id = id; _p->_om__JobTicketsType_Job::Ticket = Ticket; } return _p; }

inline _om__JobTicketsType_Job * soap_new_set__om__JobTicketsType_Job(struct soap *soap, std::string& id, std::string& Ticket) { _om__JobTicketsType_Job *_p = soap_instantiate__om__JobTicketsType_Job(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__JobTicketsType_Job::id = id; _p->_om__JobTicketsType_Job::Ticket = Ticket; } return _p; }

inline void soap_delete__om__JobTicketsType_Job(struct soap *soap, _om__JobTicketsType_Job *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__JobTicketsType_Job(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om___om__union_ExperimentParametersType_Jobs
#define SOAP_TYPE_om___om__union_ExperimentParametersType_Jobs (159)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___om__union_ExperimentParametersType_Jobs(struct soap*, const char*, int, const __om__union_ExperimentParametersType_Jobs *, const char*);
SOAP_FMAC3 __om__union_ExperimentParametersType_Jobs * SOAP_FMAC4 soap_in___om__union_ExperimentParametersType_Jobs(struct soap*, const char*, __om__union_ExperimentParametersType_Jobs *, const char*);

#ifndef soap_write___om__union_ExperimentParametersType_Jobs
#define soap_write___om__union_ExperimentParametersType_Jobs(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-om:union-ExperimentParametersType-Jobs", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __om__union_ExperimentParametersType_Jobs * SOAP_FMAC4 soap_get___om__union_ExperimentParametersType_Jobs(struct soap*, __om__union_ExperimentParametersType_Jobs *, const char*, const char*);

#ifndef soap_read___om__union_ExperimentParametersType_Jobs
#define soap_read___om__union_ExperimentParametersType_Jobs(soap, data) ( soap_begin_recv(soap) || !om::soap_get___om__union_ExperimentParametersType_Jobs(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __om__union_ExperimentParametersType_Jobs * SOAP_FMAC2 soap_instantiate___om__union_ExperimentParametersType_Jobs(struct soap*, int, const char*, const char*, size_t*);

inline __om__union_ExperimentParametersType_Jobs * soap_new___om__union_ExperimentParametersType_Jobs(struct soap *soap, int n = -1) { return soap_instantiate___om__union_ExperimentParametersType_Jobs(soap, n, NULL, NULL, NULL); }

inline __om__union_ExperimentParametersType_Jobs * soap_new_req___om__union_ExperimentParametersType_Jobs(struct soap *soap, union _om__union_ExperimentParametersType_Jobs& __union_ExperimentParametersType_Jobs) { __om__union_ExperimentParametersType_Jobs *_p = soap_instantiate___om__union_ExperimentParametersType_Jobs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__om__union_ExperimentParametersType_Jobs::__union_ExperimentParametersType_Jobs = __union_ExperimentParametersType_Jobs; } return _p; }

inline __om__union_ExperimentParametersType_Jobs * soap_new_set___om__union_ExperimentParametersType_Jobs(struct soap *soap, int __unionAbstractJob, union _om__union_ExperimentParametersType_Jobs& __union_ExperimentParametersType_Jobs) { __om__union_ExperimentParametersType_Jobs *_p = soap_instantiate___om__union_ExperimentParametersType_Jobs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__om__union_ExperimentParametersType_Jobs::__unionAbstractJob = __unionAbstractJob; _p->__om__union_ExperimentParametersType_Jobs::__union_ExperimentParametersType_Jobs = __union_ExperimentParametersType_Jobs; } return _p; }

inline void soap_delete___om__union_ExperimentParametersType_Jobs(struct soap *soap, __om__union_ExperimentParametersType_Jobs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___om__union_ExperimentParametersType_Jobs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ExperimentParametersType_Jobs
#define SOAP_TYPE_om__om__ExperimentParametersType_Jobs (158)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ExperimentParametersType_Jobs(struct soap*, const char*, int, const _om__ExperimentParametersType_Jobs *, const char*);
SOAP_FMAC3 _om__ExperimentParametersType_Jobs * SOAP_FMAC4 soap_in__om__ExperimentParametersType_Jobs(struct soap*, const char*, _om__ExperimentParametersType_Jobs *, const char*);

#ifndef soap_write__om__ExperimentParametersType_Jobs
#define soap_write__om__ExperimentParametersType_Jobs(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType-Jobs", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ExperimentParametersType_Jobs * SOAP_FMAC4 soap_get__om__ExperimentParametersType_Jobs(struct soap*, _om__ExperimentParametersType_Jobs *, const char*, const char*);

#ifndef soap_read__om__ExperimentParametersType_Jobs
#define soap_read__om__ExperimentParametersType_Jobs(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ExperimentParametersType_Jobs(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ExperimentParametersType_Jobs * SOAP_FMAC2 soap_instantiate__om__ExperimentParametersType_Jobs(struct soap*, int, const char*, const char*, size_t*);

inline _om__ExperimentParametersType_Jobs * soap_new__om__ExperimentParametersType_Jobs(struct soap *soap, int n = -1) { return soap_instantiate__om__ExperimentParametersType_Jobs(soap, n, NULL, NULL, NULL); }

inline _om__ExperimentParametersType_Jobs * soap_new_req__om__ExperimentParametersType_Jobs(struct soap *soap, int __sizeAbstractJob, __om__union_ExperimentParametersType_Jobs *__union_ExperimentParametersType_Jobs) { _om__ExperimentParametersType_Jobs *_p = soap_instantiate__om__ExperimentParametersType_Jobs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Jobs::__sizeAbstractJob = __sizeAbstractJob; _p->_om__ExperimentParametersType_Jobs::__union_ExperimentParametersType_Jobs = __union_ExperimentParametersType_Jobs; } return _p; }

inline _om__ExperimentParametersType_Jobs * soap_new_set__om__ExperimentParametersType_Jobs(struct soap *soap, int __sizeAbstractJob, __om__union_ExperimentParametersType_Jobs *__union_ExperimentParametersType_Jobs) { _om__ExperimentParametersType_Jobs *_p = soap_instantiate__om__ExperimentParametersType_Jobs(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Jobs::__sizeAbstractJob = __sizeAbstractJob; _p->_om__ExperimentParametersType_Jobs::__union_ExperimentParametersType_Jobs = __union_ExperimentParametersType_Jobs; } return _p; }

inline void soap_delete__om__ExperimentParametersType_Jobs(struct soap *soap, _om__ExperimentParametersType_Jobs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ExperimentParametersType_Jobs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ExperimentParametersType_SerializedAlgorithm
#define SOAP_TYPE_om__om__ExperimentParametersType_SerializedAlgorithm (155)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ExperimentParametersType_SerializedAlgorithm(struct soap*, const char*, int, const _om__ExperimentParametersType_SerializedAlgorithm *, const char*);
SOAP_FMAC3 _om__ExperimentParametersType_SerializedAlgorithm * SOAP_FMAC4 soap_in__om__ExperimentParametersType_SerializedAlgorithm(struct soap*, const char*, _om__ExperimentParametersType_SerializedAlgorithm *, const char*);

#ifndef soap_write__om__ExperimentParametersType_SerializedAlgorithm
#define soap_write__om__ExperimentParametersType_SerializedAlgorithm(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType-SerializedAlgorithm", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ExperimentParametersType_SerializedAlgorithm * SOAP_FMAC4 soap_get__om__ExperimentParametersType_SerializedAlgorithm(struct soap*, _om__ExperimentParametersType_SerializedAlgorithm *, const char*, const char*);

#ifndef soap_read__om__ExperimentParametersType_SerializedAlgorithm
#define soap_read__om__ExperimentParametersType_SerializedAlgorithm(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ExperimentParametersType_SerializedAlgorithm(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ExperimentParametersType_SerializedAlgorithm * SOAP_FMAC2 soap_instantiate__om__ExperimentParametersType_SerializedAlgorithm(struct soap*, int, const char*, const char*, size_t*);

inline _om__ExperimentParametersType_SerializedAlgorithm * soap_new__om__ExperimentParametersType_SerializedAlgorithm(struct soap *soap, int n = -1) { return soap_instantiate__om__ExperimentParametersType_SerializedAlgorithm(soap, n, NULL, NULL, NULL); }

inline _om__ExperimentParametersType_SerializedAlgorithm * soap_new_req__om__ExperimentParametersType_SerializedAlgorithm(struct soap *soap, om__SerializedAlgorithmType *Algorithm, std::string& id) { _om__ExperimentParametersType_SerializedAlgorithm *_p = soap_instantiate__om__ExperimentParametersType_SerializedAlgorithm(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_SerializedAlgorithm::Algorithm = Algorithm; _p->_om__ExperimentParametersType_SerializedAlgorithm::id = id; } return _p; }

inline _om__ExperimentParametersType_SerializedAlgorithm * soap_new_set__om__ExperimentParametersType_SerializedAlgorithm(struct soap *soap, om__SerializedAlgorithmType *Algorithm, std::string& id) { _om__ExperimentParametersType_SerializedAlgorithm *_p = soap_instantiate__om__ExperimentParametersType_SerializedAlgorithm(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_SerializedAlgorithm::Algorithm = Algorithm; _p->_om__ExperimentParametersType_SerializedAlgorithm::id = id; } return _p; }

inline void soap_delete__om__ExperimentParametersType_SerializedAlgorithm(struct soap *soap, _om__ExperimentParametersType_SerializedAlgorithm *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ExperimentParametersType_SerializedAlgorithm(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ExperimentParametersType_AlgorithmSettings
#define SOAP_TYPE_om__om__ExperimentParametersType_AlgorithmSettings (152)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ExperimentParametersType_AlgorithmSettings(struct soap*, const char*, int, const _om__ExperimentParametersType_AlgorithmSettings *, const char*);
SOAP_FMAC3 _om__ExperimentParametersType_AlgorithmSettings * SOAP_FMAC4 soap_in__om__ExperimentParametersType_AlgorithmSettings(struct soap*, const char*, _om__ExperimentParametersType_AlgorithmSettings *, const char*);

#ifndef soap_write__om__ExperimentParametersType_AlgorithmSettings
#define soap_write__om__ExperimentParametersType_AlgorithmSettings(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType-AlgorithmSettings", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ExperimentParametersType_AlgorithmSettings * SOAP_FMAC4 soap_get__om__ExperimentParametersType_AlgorithmSettings(struct soap*, _om__ExperimentParametersType_AlgorithmSettings *, const char*, const char*);

#ifndef soap_read__om__ExperimentParametersType_AlgorithmSettings
#define soap_read__om__ExperimentParametersType_AlgorithmSettings(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ExperimentParametersType_AlgorithmSettings(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ExperimentParametersType_AlgorithmSettings * SOAP_FMAC2 soap_instantiate__om__ExperimentParametersType_AlgorithmSettings(struct soap*, int, const char*, const char*, size_t*);

inline _om__ExperimentParametersType_AlgorithmSettings * soap_new__om__ExperimentParametersType_AlgorithmSettings(struct soap *soap, int n = -1) { return soap_instantiate__om__ExperimentParametersType_AlgorithmSettings(soap, n, NULL, NULL, NULL); }

inline _om__ExperimentParametersType_AlgorithmSettings * soap_new_req__om__ExperimentParametersType_AlgorithmSettings(struct soap *soap, om__BasicAlgorithmDefinitionType *Algorithm, std::string& id) { _om__ExperimentParametersType_AlgorithmSettings *_p = soap_instantiate__om__ExperimentParametersType_AlgorithmSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_AlgorithmSettings::Algorithm = Algorithm; _p->_om__ExperimentParametersType_AlgorithmSettings::id = id; } return _p; }

inline _om__ExperimentParametersType_AlgorithmSettings * soap_new_set__om__ExperimentParametersType_AlgorithmSettings(struct soap *soap, om__BasicAlgorithmDefinitionType *Algorithm, std::string& id) { _om__ExperimentParametersType_AlgorithmSettings *_p = soap_instantiate__om__ExperimentParametersType_AlgorithmSettings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_AlgorithmSettings::Algorithm = Algorithm; _p->_om__ExperimentParametersType_AlgorithmSettings::id = id; } return _p; }

inline void soap_delete__om__ExperimentParametersType_AlgorithmSettings(struct soap *soap, _om__ExperimentParametersType_AlgorithmSettings *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ExperimentParametersType_AlgorithmSettings(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ExperimentParametersType_Absence_Point
#define SOAP_TYPE_om__om__ExperimentParametersType_Absence_Point (148)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ExperimentParametersType_Absence_Point(struct soap*, const char*, int, const _om__ExperimentParametersType_Absence_Point *, const char*);
SOAP_FMAC3 _om__ExperimentParametersType_Absence_Point * SOAP_FMAC4 soap_in__om__ExperimentParametersType_Absence_Point(struct soap*, const char*, _om__ExperimentParametersType_Absence_Point *, const char*);

#ifndef soap_write__om__ExperimentParametersType_Absence_Point
#define soap_write__om__ExperimentParametersType_Absence_Point(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType-Absence-Point", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ExperimentParametersType_Absence_Point * SOAP_FMAC4 soap_get__om__ExperimentParametersType_Absence_Point(struct soap*, _om__ExperimentParametersType_Absence_Point *, const char*, const char*);

#ifndef soap_read__om__ExperimentParametersType_Absence_Point
#define soap_read__om__ExperimentParametersType_Absence_Point(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ExperimentParametersType_Absence_Point(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ExperimentParametersType_Absence_Point * SOAP_FMAC2 soap_instantiate__om__ExperimentParametersType_Absence_Point(struct soap*, int, const char*, const char*, size_t*);

inline _om__ExperimentParametersType_Absence_Point * soap_new__om__ExperimentParametersType_Absence_Point(struct soap *soap, int n = -1) { return soap_instantiate__om__ExperimentParametersType_Absence_Point(soap, n, NULL, NULL, NULL); }

inline _om__ExperimentParametersType_Absence_Point * soap_new_req__om__ExperimentParametersType_Absence_Point(struct soap *soap, std::string& X, std::string& Y) { _om__ExperimentParametersType_Absence_Point *_p = soap_instantiate__om__ExperimentParametersType_Absence_Point(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Absence_Point::X = X; _p->_om__ExperimentParametersType_Absence_Point::Y = Y; } return _p; }

inline _om__ExperimentParametersType_Absence_Point * soap_new_set__om__ExperimentParametersType_Absence_Point(struct soap *soap, std::string *Id, std::string& X, std::string& Y, std::string *Sample) { _om__ExperimentParametersType_Absence_Point *_p = soap_instantiate__om__ExperimentParametersType_Absence_Point(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Absence_Point::Id = Id; _p->_om__ExperimentParametersType_Absence_Point::X = X; _p->_om__ExperimentParametersType_Absence_Point::Y = Y; _p->_om__ExperimentParametersType_Absence_Point::Sample = Sample; } return _p; }

inline void soap_delete__om__ExperimentParametersType_Absence_Point(struct soap *soap, _om__ExperimentParametersType_Absence_Point *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ExperimentParametersType_Absence_Point(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ExperimentParametersType_Absence
#define SOAP_TYPE_om__om__ExperimentParametersType_Absence (147)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ExperimentParametersType_Absence(struct soap*, const char*, int, const _om__ExperimentParametersType_Absence *, const char*);
SOAP_FMAC3 _om__ExperimentParametersType_Absence * SOAP_FMAC4 soap_in__om__ExperimentParametersType_Absence(struct soap*, const char*, _om__ExperimentParametersType_Absence *, const char*);

#ifndef soap_write__om__ExperimentParametersType_Absence
#define soap_write__om__ExperimentParametersType_Absence(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType-Absence", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ExperimentParametersType_Absence * SOAP_FMAC4 soap_get__om__ExperimentParametersType_Absence(struct soap*, _om__ExperimentParametersType_Absence *, const char*, const char*);

#ifndef soap_read__om__ExperimentParametersType_Absence
#define soap_read__om__ExperimentParametersType_Absence(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ExperimentParametersType_Absence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ExperimentParametersType_Absence * SOAP_FMAC2 soap_instantiate__om__ExperimentParametersType_Absence(struct soap*, int, const char*, const char*, size_t*);

inline _om__ExperimentParametersType_Absence * soap_new__om__ExperimentParametersType_Absence(struct soap *soap, int n = -1) { return soap_instantiate__om__ExperimentParametersType_Absence(soap, n, NULL, NULL, NULL); }

inline _om__ExperimentParametersType_Absence * soap_new_req__om__ExperimentParametersType_Absence(struct soap *soap, std::vector<_om__ExperimentParametersType_Absence_Point >& Point, std::string& id) { _om__ExperimentParametersType_Absence *_p = soap_instantiate__om__ExperimentParametersType_Absence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Absence::Point = Point; _p->_om__ExperimentParametersType_Absence::id = id; } return _p; }

inline _om__ExperimentParametersType_Absence * soap_new_set__om__ExperimentParametersType_Absence(struct soap *soap, std::string *CoordinateSystem, std::vector<_om__ExperimentParametersType_Absence_Point >& Point, int *Count, std::string *Label, std::string& id) { _om__ExperimentParametersType_Absence *_p = soap_instantiate__om__ExperimentParametersType_Absence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Absence::CoordinateSystem = CoordinateSystem; _p->_om__ExperimentParametersType_Absence::Point = Point; _p->_om__ExperimentParametersType_Absence::Count = Count; _p->_om__ExperimentParametersType_Absence::Label = Label; _p->_om__ExperimentParametersType_Absence::id = id; } return _p; }

inline void soap_delete__om__ExperimentParametersType_Absence(struct soap *soap, _om__ExperimentParametersType_Absence *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ExperimentParametersType_Absence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ExperimentParametersType_Presence_Point
#define SOAP_TYPE_om__om__ExperimentParametersType_Presence_Point (143)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ExperimentParametersType_Presence_Point(struct soap*, const char*, int, const _om__ExperimentParametersType_Presence_Point *, const char*);
SOAP_FMAC3 _om__ExperimentParametersType_Presence_Point * SOAP_FMAC4 soap_in__om__ExperimentParametersType_Presence_Point(struct soap*, const char*, _om__ExperimentParametersType_Presence_Point *, const char*);

#ifndef soap_write__om__ExperimentParametersType_Presence_Point
#define soap_write__om__ExperimentParametersType_Presence_Point(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType-Presence-Point", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ExperimentParametersType_Presence_Point * SOAP_FMAC4 soap_get__om__ExperimentParametersType_Presence_Point(struct soap*, _om__ExperimentParametersType_Presence_Point *, const char*, const char*);

#ifndef soap_read__om__ExperimentParametersType_Presence_Point
#define soap_read__om__ExperimentParametersType_Presence_Point(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ExperimentParametersType_Presence_Point(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ExperimentParametersType_Presence_Point * SOAP_FMAC2 soap_instantiate__om__ExperimentParametersType_Presence_Point(struct soap*, int, const char*, const char*, size_t*);

inline _om__ExperimentParametersType_Presence_Point * soap_new__om__ExperimentParametersType_Presence_Point(struct soap *soap, int n = -1) { return soap_instantiate__om__ExperimentParametersType_Presence_Point(soap, n, NULL, NULL, NULL); }

inline _om__ExperimentParametersType_Presence_Point * soap_new_req__om__ExperimentParametersType_Presence_Point(struct soap *soap, std::string& X, std::string& Y) { _om__ExperimentParametersType_Presence_Point *_p = soap_instantiate__om__ExperimentParametersType_Presence_Point(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Presence_Point::X = X; _p->_om__ExperimentParametersType_Presence_Point::Y = Y; } return _p; }

inline _om__ExperimentParametersType_Presence_Point * soap_new_set__om__ExperimentParametersType_Presence_Point(struct soap *soap, std::string *Id, std::string& X, std::string& Y, std::string *Sample) { _om__ExperimentParametersType_Presence_Point *_p = soap_instantiate__om__ExperimentParametersType_Presence_Point(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Presence_Point::Id = Id; _p->_om__ExperimentParametersType_Presence_Point::X = X; _p->_om__ExperimentParametersType_Presence_Point::Y = Y; _p->_om__ExperimentParametersType_Presence_Point::Sample = Sample; } return _p; }

inline void soap_delete__om__ExperimentParametersType_Presence_Point(struct soap *soap, _om__ExperimentParametersType_Presence_Point *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ExperimentParametersType_Presence_Point(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ExperimentParametersType_Presence
#define SOAP_TYPE_om__om__ExperimentParametersType_Presence (142)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ExperimentParametersType_Presence(struct soap*, const char*, int, const _om__ExperimentParametersType_Presence *, const char*);
SOAP_FMAC3 _om__ExperimentParametersType_Presence * SOAP_FMAC4 soap_in__om__ExperimentParametersType_Presence(struct soap*, const char*, _om__ExperimentParametersType_Presence *, const char*);

#ifndef soap_write__om__ExperimentParametersType_Presence
#define soap_write__om__ExperimentParametersType_Presence(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType-Presence", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ExperimentParametersType_Presence * SOAP_FMAC4 soap_get__om__ExperimentParametersType_Presence(struct soap*, _om__ExperimentParametersType_Presence *, const char*, const char*);

#ifndef soap_read__om__ExperimentParametersType_Presence
#define soap_read__om__ExperimentParametersType_Presence(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ExperimentParametersType_Presence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ExperimentParametersType_Presence * SOAP_FMAC2 soap_instantiate__om__ExperimentParametersType_Presence(struct soap*, int, const char*, const char*, size_t*);

inline _om__ExperimentParametersType_Presence * soap_new__om__ExperimentParametersType_Presence(struct soap *soap, int n = -1) { return soap_instantiate__om__ExperimentParametersType_Presence(soap, n, NULL, NULL, NULL); }

inline _om__ExperimentParametersType_Presence * soap_new_req__om__ExperimentParametersType_Presence(struct soap *soap, std::vector<_om__ExperimentParametersType_Presence_Point >& Point, std::string& id) { _om__ExperimentParametersType_Presence *_p = soap_instantiate__om__ExperimentParametersType_Presence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Presence::Point = Point; _p->_om__ExperimentParametersType_Presence::id = id; } return _p; }

inline _om__ExperimentParametersType_Presence * soap_new_set__om__ExperimentParametersType_Presence(struct soap *soap, std::string *CoordinateSystem, std::vector<_om__ExperimentParametersType_Presence_Point >& Point, int *Count, std::string *Label, std::string& id) { _om__ExperimentParametersType_Presence *_p = soap_instantiate__om__ExperimentParametersType_Presence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Presence::CoordinateSystem = CoordinateSystem; _p->_om__ExperimentParametersType_Presence::Point = Point; _p->_om__ExperimentParametersType_Presence::Count = Count; _p->_om__ExperimentParametersType_Presence::Label = Label; _p->_om__ExperimentParametersType_Presence::id = id; } return _p; }

inline void soap_delete__om__ExperimentParametersType_Presence(struct soap *soap, _om__ExperimentParametersType_Presence *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ExperimentParametersType_Presence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ExperimentParametersType_Environment
#define SOAP_TYPE_om__om__ExperimentParametersType_Environment (140)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ExperimentParametersType_Environment(struct soap*, const char*, int, const _om__ExperimentParametersType_Environment *, const char*);
SOAP_FMAC3 _om__ExperimentParametersType_Environment * SOAP_FMAC4 soap_in__om__ExperimentParametersType_Environment(struct soap*, const char*, _om__ExperimentParametersType_Environment *, const char*);

#ifndef soap_write__om__ExperimentParametersType_Environment
#define soap_write__om__ExperimentParametersType_Environment(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType-Environment", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ExperimentParametersType_Environment * SOAP_FMAC4 soap_get__om__ExperimentParametersType_Environment(struct soap*, _om__ExperimentParametersType_Environment *, const char*, const char*);

#ifndef soap_read__om__ExperimentParametersType_Environment
#define soap_read__om__ExperimentParametersType_Environment(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ExperimentParametersType_Environment(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ExperimentParametersType_Environment * SOAP_FMAC2 soap_instantiate__om__ExperimentParametersType_Environment(struct soap*, int, const char*, const char*, size_t*);

inline _om__ExperimentParametersType_Environment * soap_new__om__ExperimentParametersType_Environment(struct soap *soap, int n = -1) { return soap_instantiate__om__ExperimentParametersType_Environment(soap, n, NULL, NULL, NULL); }

inline _om__ExperimentParametersType_Environment * soap_new_req__om__ExperimentParametersType_Environment(struct soap *soap, std::vector<om__ModellingLayerType * >& Map, om__BasicLayerType *Mask, std::string& id) { _om__ExperimentParametersType_Environment *_p = soap_instantiate__om__ExperimentParametersType_Environment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Environment::Map = Map; _p->_om__ExperimentParametersType_Environment::Mask = Mask; _p->_om__ExperimentParametersType_Environment::id = id; } return _p; }

inline _om__ExperimentParametersType_Environment * soap_new_set__om__ExperimentParametersType_Environment(struct soap *soap, std::vector<om__ModellingLayerType * >& Map, om__BasicLayerType *Mask, int *NumLayers, std::string& id) { _om__ExperimentParametersType_Environment *_p = soap_instantiate__om__ExperimentParametersType_Environment(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ExperimentParametersType_Environment::Map = Map; _p->_om__ExperimentParametersType_Environment::Mask = Mask; _p->_om__ExperimentParametersType_Environment::NumLayers = NumLayers; _p->_om__ExperimentParametersType_Environment::id = id; } return _p; }

inline void soap_delete__om__ExperimentParametersType_Environment(struct soap *soap, _om__ExperimentParametersType_Environment *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ExperimentParametersType_Environment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ModelEvaluationResultType_Values
#define SOAP_TYPE_om__om__ModelEvaluationResultType_Values (138)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ModelEvaluationResultType_Values(struct soap*, const char*, int, const _om__ModelEvaluationResultType_Values *, const char*);
SOAP_FMAC3 _om__ModelEvaluationResultType_Values * SOAP_FMAC4 soap_in__om__ModelEvaluationResultType_Values(struct soap*, const char*, _om__ModelEvaluationResultType_Values *, const char*);

#ifndef soap_write__om__ModelEvaluationResultType_Values
#define soap_write__om__ModelEvaluationResultType_Values(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ModelEvaluationResultType-Values", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ModelEvaluationResultType_Values * SOAP_FMAC4 soap_get__om__ModelEvaluationResultType_Values(struct soap*, _om__ModelEvaluationResultType_Values *, const char*, const char*);

#ifndef soap_read__om__ModelEvaluationResultType_Values
#define soap_read__om__ModelEvaluationResultType_Values(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ModelEvaluationResultType_Values(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ModelEvaluationResultType_Values * SOAP_FMAC2 soap_instantiate__om__ModelEvaluationResultType_Values(struct soap*, int, const char*, const char*, size_t*);

inline _om__ModelEvaluationResultType_Values * soap_new__om__ModelEvaluationResultType_Values(struct soap *soap, int n = -1) { return soap_instantiate__om__ModelEvaluationResultType_Values(soap, n, NULL, NULL, NULL); }

inline _om__ModelEvaluationResultType_Values * soap_new_req__om__ModelEvaluationResultType_Values(struct soap *soap, std::string& V) { _om__ModelEvaluationResultType_Values *_p = soap_instantiate__om__ModelEvaluationResultType_Values(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ModelEvaluationResultType_Values::V = V; } return _p; }

inline _om__ModelEvaluationResultType_Values * soap_new_set__om__ModelEvaluationResultType_Values(struct soap *soap, std::string& V) { _om__ModelEvaluationResultType_Values *_p = soap_instantiate__om__ModelEvaluationResultType_Values(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ModelEvaluationResultType_Values::V = V; } return _p; }

inline void soap_delete__om__ModelEvaluationResultType_Values(struct soap *soap, _om__ModelEvaluationResultType_Values *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ModelEvaluationResultType_Values(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__OccurrencesFilterType_EnvironmentallyUnique
#define SOAP_TYPE_om__om__OccurrencesFilterType_EnvironmentallyUnique (128)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, const char*, int, const _om__OccurrencesFilterType_EnvironmentallyUnique *, const char*);
SOAP_FMAC3 _om__OccurrencesFilterType_EnvironmentallyUnique * SOAP_FMAC4 soap_in__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, const char*, _om__OccurrencesFilterType_EnvironmentallyUnique *, const char*);

#ifndef soap_write__om__OccurrencesFilterType_EnvironmentallyUnique
#define soap_write__om__OccurrencesFilterType_EnvironmentallyUnique(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:OccurrencesFilterType-EnvironmentallyUnique", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__OccurrencesFilterType_EnvironmentallyUnique * SOAP_FMAC4 soap_get__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, _om__OccurrencesFilterType_EnvironmentallyUnique *, const char*, const char*);

#ifndef soap_read__om__OccurrencesFilterType_EnvironmentallyUnique
#define soap_read__om__OccurrencesFilterType_EnvironmentallyUnique(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__OccurrencesFilterType_EnvironmentallyUnique(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__OccurrencesFilterType_EnvironmentallyUnique * SOAP_FMAC2 soap_instantiate__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, int, const char*, const char*, size_t*);

inline _om__OccurrencesFilterType_EnvironmentallyUnique * soap_new__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap *soap, int n = -1) { return soap_instantiate__om__OccurrencesFilterType_EnvironmentallyUnique(soap, n, NULL, NULL, NULL); }

inline _om__OccurrencesFilterType_EnvironmentallyUnique * soap_new_req__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap *soap) { _om__OccurrencesFilterType_EnvironmentallyUnique *_p = soap_instantiate__om__OccurrencesFilterType_EnvironmentallyUnique(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__OccurrencesFilterType_EnvironmentallyUnique * soap_new_set__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap *soap) { _om__OccurrencesFilterType_EnvironmentallyUnique *_p = soap_instantiate__om__OccurrencesFilterType_EnvironmentallyUnique(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap *soap, _om__OccurrencesFilterType_EnvironmentallyUnique *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__OccurrencesFilterType_SpatiallyUnique
#define SOAP_TYPE_om__om__OccurrencesFilterType_SpatiallyUnique (126)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__OccurrencesFilterType_SpatiallyUnique(struct soap*, const char*, int, const _om__OccurrencesFilterType_SpatiallyUnique *, const char*);
SOAP_FMAC3 _om__OccurrencesFilterType_SpatiallyUnique * SOAP_FMAC4 soap_in__om__OccurrencesFilterType_SpatiallyUnique(struct soap*, const char*, _om__OccurrencesFilterType_SpatiallyUnique *, const char*);

#ifndef soap_write__om__OccurrencesFilterType_SpatiallyUnique
#define soap_write__om__OccurrencesFilterType_SpatiallyUnique(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:OccurrencesFilterType-SpatiallyUnique", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__OccurrencesFilterType_SpatiallyUnique * SOAP_FMAC4 soap_get__om__OccurrencesFilterType_SpatiallyUnique(struct soap*, _om__OccurrencesFilterType_SpatiallyUnique *, const char*, const char*);

#ifndef soap_read__om__OccurrencesFilterType_SpatiallyUnique
#define soap_read__om__OccurrencesFilterType_SpatiallyUnique(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__OccurrencesFilterType_SpatiallyUnique(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__OccurrencesFilterType_SpatiallyUnique * SOAP_FMAC2 soap_instantiate__om__OccurrencesFilterType_SpatiallyUnique(struct soap*, int, const char*, const char*, size_t*);

inline _om__OccurrencesFilterType_SpatiallyUnique * soap_new__om__OccurrencesFilterType_SpatiallyUnique(struct soap *soap, int n = -1) { return soap_instantiate__om__OccurrencesFilterType_SpatiallyUnique(soap, n, NULL, NULL, NULL); }

inline _om__OccurrencesFilterType_SpatiallyUnique * soap_new_req__om__OccurrencesFilterType_SpatiallyUnique(struct soap *soap) { _om__OccurrencesFilterType_SpatiallyUnique *_p = soap_instantiate__om__OccurrencesFilterType_SpatiallyUnique(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__OccurrencesFilterType_SpatiallyUnique * soap_new_set__om__OccurrencesFilterType_SpatiallyUnique(struct soap *soap) { _om__OccurrencesFilterType_SpatiallyUnique *_p = soap_instantiate__om__OccurrencesFilterType_SpatiallyUnique(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__om__OccurrencesFilterType_SpatiallyUnique(struct soap *soap, _om__OccurrencesFilterType_SpatiallyUnique *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__OccurrencesFilterType_SpatiallyUnique(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__ProjectionStatisticsParametersType_AreaStatistics
#define SOAP_TYPE_om__om__ProjectionStatisticsParametersType_AreaStatistics (120)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, const char*, int, const _om__ProjectionStatisticsParametersType_AreaStatistics *, const char*);
SOAP_FMAC3 _om__ProjectionStatisticsParametersType_AreaStatistics * SOAP_FMAC4 soap_in__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, const char*, _om__ProjectionStatisticsParametersType_AreaStatistics *, const char*);

#ifndef soap_write__om__ProjectionStatisticsParametersType_AreaStatistics
#define soap_write__om__ProjectionStatisticsParametersType_AreaStatistics(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ProjectionStatisticsParametersType-AreaStatistics", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ProjectionStatisticsParametersType_AreaStatistics * SOAP_FMAC4 soap_get__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, _om__ProjectionStatisticsParametersType_AreaStatistics *, const char*, const char*);

#ifndef soap_read__om__ProjectionStatisticsParametersType_AreaStatistics
#define soap_read__om__ProjectionStatisticsParametersType_AreaStatistics(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__ProjectionStatisticsParametersType_AreaStatistics(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__ProjectionStatisticsParametersType_AreaStatistics * SOAP_FMAC2 soap_instantiate__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, int, const char*, const char*, size_t*);

inline _om__ProjectionStatisticsParametersType_AreaStatistics * soap_new__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap *soap, int n = -1) { return soap_instantiate__om__ProjectionStatisticsParametersType_AreaStatistics(soap, n, NULL, NULL, NULL); }

inline _om__ProjectionStatisticsParametersType_AreaStatistics * soap_new_req__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap *soap, std::string& PredictionThreshold) { _om__ProjectionStatisticsParametersType_AreaStatistics *_p = soap_instantiate__om__ProjectionStatisticsParametersType_AreaStatistics(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ProjectionStatisticsParametersType_AreaStatistics::PredictionThreshold = PredictionThreshold; } return _p; }

inline _om__ProjectionStatisticsParametersType_AreaStatistics * soap_new_set__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap *soap, std::string& PredictionThreshold) { _om__ProjectionStatisticsParametersType_AreaStatistics *_p = soap_instantiate__om__ProjectionStatisticsParametersType_AreaStatistics(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__ProjectionStatisticsParametersType_AreaStatistics::PredictionThreshold = PredictionThreshold; } return _p; }

inline void soap_delete__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap *soap, _om__ProjectionStatisticsParametersType_AreaStatistics *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__TestResultType_RocCurve_Ratio
#define SOAP_TYPE_om__om__TestResultType_RocCurve_Ratio (117)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__TestResultType_RocCurve_Ratio(struct soap*, const char*, int, const _om__TestResultType_RocCurve_Ratio *, const char*);
SOAP_FMAC3 _om__TestResultType_RocCurve_Ratio * SOAP_FMAC4 soap_in__om__TestResultType_RocCurve_Ratio(struct soap*, const char*, _om__TestResultType_RocCurve_Ratio *, const char*);

#ifndef soap_write__om__TestResultType_RocCurve_Ratio
#define soap_write__om__TestResultType_RocCurve_Ratio(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestResultType-RocCurve-Ratio", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestResultType_RocCurve_Ratio * SOAP_FMAC4 soap_get__om__TestResultType_RocCurve_Ratio(struct soap*, _om__TestResultType_RocCurve_Ratio *, const char*, const char*);

#ifndef soap_read__om__TestResultType_RocCurve_Ratio
#define soap_read__om__TestResultType_RocCurve_Ratio(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__TestResultType_RocCurve_Ratio(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__TestResultType_RocCurve_Ratio * SOAP_FMAC2 soap_instantiate__om__TestResultType_RocCurve_Ratio(struct soap*, int, const char*, const char*, size_t*);

inline _om__TestResultType_RocCurve_Ratio * soap_new__om__TestResultType_RocCurve_Ratio(struct soap *soap, int n = -1) { return soap_instantiate__om__TestResultType_RocCurve_Ratio(soap, n, NULL, NULL, NULL); }

inline _om__TestResultType_RocCurve_Ratio * soap_new_req__om__TestResultType_RocCurve_Ratio(struct soap *soap, double E, double Value) { _om__TestResultType_RocCurve_Ratio *_p = soap_instantiate__om__TestResultType_RocCurve_Ratio(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__TestResultType_RocCurve_Ratio::E = E; _p->_om__TestResultType_RocCurve_Ratio::Value = Value; } return _p; }

inline _om__TestResultType_RocCurve_Ratio * soap_new_set__om__TestResultType_RocCurve_Ratio(struct soap *soap, double E, double Value) { _om__TestResultType_RocCurve_Ratio *_p = soap_instantiate__om__TestResultType_RocCurve_Ratio(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__TestResultType_RocCurve_Ratio::E = E; _p->_om__TestResultType_RocCurve_Ratio::Value = Value; } return _p; }

inline void soap_delete__om__TestResultType_RocCurve_Ratio(struct soap *soap, _om__TestResultType_RocCurve_Ratio *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__TestResultType_RocCurve_Ratio(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__TestResultType_RocCurve
#define SOAP_TYPE_om__om__TestResultType_RocCurve (116)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__TestResultType_RocCurve(struct soap*, const char*, int, const _om__TestResultType_RocCurve *, const char*);
SOAP_FMAC3 _om__TestResultType_RocCurve * SOAP_FMAC4 soap_in__om__TestResultType_RocCurve(struct soap*, const char*, _om__TestResultType_RocCurve *, const char*);

#ifndef soap_write__om__TestResultType_RocCurve
#define soap_write__om__TestResultType_RocCurve(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestResultType-RocCurve", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestResultType_RocCurve * SOAP_FMAC4 soap_get__om__TestResultType_RocCurve(struct soap*, _om__TestResultType_RocCurve *, const char*, const char*);

#ifndef soap_read__om__TestResultType_RocCurve
#define soap_read__om__TestResultType_RocCurve(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__TestResultType_RocCurve(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__TestResultType_RocCurve * SOAP_FMAC2 soap_instantiate__om__TestResultType_RocCurve(struct soap*, int, const char*, const char*, size_t*);

inline _om__TestResultType_RocCurve * soap_new__om__TestResultType_RocCurve(struct soap *soap, int n = -1) { return soap_instantiate__om__TestResultType_RocCurve(soap, n, NULL, NULL, NULL); }

inline _om__TestResultType_RocCurve * soap_new_req__om__TestResultType_RocCurve(struct soap *soap, double Auc, std::string& Points) { _om__TestResultType_RocCurve *_p = soap_instantiate__om__TestResultType_RocCurve(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__TestResultType_RocCurve::Auc = Auc; _p->_om__TestResultType_RocCurve::Points = Points; } return _p; }

inline _om__TestResultType_RocCurve * soap_new_set__om__TestResultType_RocCurve(struct soap *soap, _om__TestResultType_RocCurve_Ratio *Ratio, double Auc, std::string& Points, int *NumBackgroundPoints) { _om__TestResultType_RocCurve *_p = soap_instantiate__om__TestResultType_RocCurve(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__TestResultType_RocCurve::Ratio = Ratio; _p->_om__TestResultType_RocCurve::Auc = Auc; _p->_om__TestResultType_RocCurve::Points = Points; _p->_om__TestResultType_RocCurve::NumBackgroundPoints = NumBackgroundPoints; } return _p; }

inline void soap_delete__om__TestResultType_RocCurve(struct soap *soap, _om__TestResultType_RocCurve *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__TestResultType_RocCurve(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__TestResultType_ConfusionMatrix
#define SOAP_TYPE_om__om__TestResultType_ConfusionMatrix (114)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__TestResultType_ConfusionMatrix(struct soap*, const char*, int, const _om__TestResultType_ConfusionMatrix *, const char*);
SOAP_FMAC3 _om__TestResultType_ConfusionMatrix * SOAP_FMAC4 soap_in__om__TestResultType_ConfusionMatrix(struct soap*, const char*, _om__TestResultType_ConfusionMatrix *, const char*);

#ifndef soap_write__om__TestResultType_ConfusionMatrix
#define soap_write__om__TestResultType_ConfusionMatrix(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestResultType-ConfusionMatrix", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestResultType_ConfusionMatrix * SOAP_FMAC4 soap_get__om__TestResultType_ConfusionMatrix(struct soap*, _om__TestResultType_ConfusionMatrix *, const char*, const char*);

#ifndef soap_read__om__TestResultType_ConfusionMatrix
#define soap_read__om__TestResultType_ConfusionMatrix(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__TestResultType_ConfusionMatrix(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__TestResultType_ConfusionMatrix * SOAP_FMAC2 soap_instantiate__om__TestResultType_ConfusionMatrix(struct soap*, int, const char*, const char*, size_t*);

inline _om__TestResultType_ConfusionMatrix * soap_new__om__TestResultType_ConfusionMatrix(struct soap *soap, int n = -1) { return soap_instantiate__om__TestResultType_ConfusionMatrix(soap, n, NULL, NULL, NULL); }

inline _om__TestResultType_ConfusionMatrix * soap_new_req__om__TestResultType_ConfusionMatrix(struct soap *soap, double Threshold, double Accuracy, double OmissionError, double CommissionError, int TruePositives, int FalsePositives, int TrueNegatives, int FalseNegatives) { _om__TestResultType_ConfusionMatrix *_p = soap_instantiate__om__TestResultType_ConfusionMatrix(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__TestResultType_ConfusionMatrix::Threshold = Threshold; _p->_om__TestResultType_ConfusionMatrix::Accuracy = Accuracy; _p->_om__TestResultType_ConfusionMatrix::OmissionError = OmissionError; _p->_om__TestResultType_ConfusionMatrix::CommissionError = CommissionError; _p->_om__TestResultType_ConfusionMatrix::TruePositives = TruePositives; _p->_om__TestResultType_ConfusionMatrix::FalsePositives = FalsePositives; _p->_om__TestResultType_ConfusionMatrix::TrueNegatives = TrueNegatives; _p->_om__TestResultType_ConfusionMatrix::FalseNegatives = FalseNegatives; } return _p; }

inline _om__TestResultType_ConfusionMatrix * soap_new_set__om__TestResultType_ConfusionMatrix(struct soap *soap, double Threshold, double Accuracy, double OmissionError, double CommissionError, int TruePositives, int FalsePositives, int TrueNegatives, int FalseNegatives) { _om__TestResultType_ConfusionMatrix *_p = soap_instantiate__om__TestResultType_ConfusionMatrix(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__TestResultType_ConfusionMatrix::Threshold = Threshold; _p->_om__TestResultType_ConfusionMatrix::Accuracy = Accuracy; _p->_om__TestResultType_ConfusionMatrix::OmissionError = OmissionError; _p->_om__TestResultType_ConfusionMatrix::CommissionError = CommissionError; _p->_om__TestResultType_ConfusionMatrix::TruePositives = TruePositives; _p->_om__TestResultType_ConfusionMatrix::FalsePositives = FalsePositives; _p->_om__TestResultType_ConfusionMatrix::TrueNegatives = TrueNegatives; _p->_om__TestResultType_ConfusionMatrix::FalseNegatives = FalseNegatives; } return _p; }

inline void soap_delete__om__TestResultType_ConfusionMatrix(struct soap *soap, _om__TestResultType_ConfusionMatrix *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__TestResultType_ConfusionMatrix(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__TestOptionsType_RocCurve
#define SOAP_TYPE_om__om__TestOptionsType_RocCurve (111)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__TestOptionsType_RocCurve(struct soap*, const char*, int, const _om__TestOptionsType_RocCurve *, const char*);
SOAP_FMAC3 _om__TestOptionsType_RocCurve * SOAP_FMAC4 soap_in__om__TestOptionsType_RocCurve(struct soap*, const char*, _om__TestOptionsType_RocCurve *, const char*);

#ifndef soap_write__om__TestOptionsType_RocCurve
#define soap_write__om__TestOptionsType_RocCurve(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestOptionsType-RocCurve", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestOptionsType_RocCurve * SOAP_FMAC4 soap_get__om__TestOptionsType_RocCurve(struct soap*, _om__TestOptionsType_RocCurve *, const char*, const char*);

#ifndef soap_read__om__TestOptionsType_RocCurve
#define soap_read__om__TestOptionsType_RocCurve(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__TestOptionsType_RocCurve(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__TestOptionsType_RocCurve * SOAP_FMAC2 soap_instantiate__om__TestOptionsType_RocCurve(struct soap*, int, const char*, const char*, size_t*);

inline _om__TestOptionsType_RocCurve * soap_new__om__TestOptionsType_RocCurve(struct soap *soap, int n = -1) { return soap_instantiate__om__TestOptionsType_RocCurve(soap, n, NULL, NULL, NULL); }

inline _om__TestOptionsType_RocCurve * soap_new_req__om__TestOptionsType_RocCurve(struct soap *soap) { _om__TestOptionsType_RocCurve *_p = soap_instantiate__om__TestOptionsType_RocCurve(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__TestOptionsType_RocCurve * soap_new_set__om__TestOptionsType_RocCurve(struct soap *soap, int *Resolution, int *BackgroundPoints, double *MaxOmission, bool *UseAbsencesAsBackground) { _om__TestOptionsType_RocCurve *_p = soap_instantiate__om__TestOptionsType_RocCurve(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__TestOptionsType_RocCurve::Resolution = Resolution; _p->_om__TestOptionsType_RocCurve::BackgroundPoints = BackgroundPoints; _p->_om__TestOptionsType_RocCurve::MaxOmission = MaxOmission; _p->_om__TestOptionsType_RocCurve::UseAbsencesAsBackground = UseAbsencesAsBackground; } return _p; }

inline void soap_delete__om__TestOptionsType_RocCurve(struct soap *soap, _om__TestOptionsType_RocCurve *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__TestOptionsType_RocCurve(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__TestOptionsType_ConfusionMatrix
#define SOAP_TYPE_om__om__TestOptionsType_ConfusionMatrix (108)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__TestOptionsType_ConfusionMatrix(struct soap*, const char*, int, const _om__TestOptionsType_ConfusionMatrix *, const char*);
SOAP_FMAC3 _om__TestOptionsType_ConfusionMatrix * SOAP_FMAC4 soap_in__om__TestOptionsType_ConfusionMatrix(struct soap*, const char*, _om__TestOptionsType_ConfusionMatrix *, const char*);

#ifndef soap_write__om__TestOptionsType_ConfusionMatrix
#define soap_write__om__TestOptionsType_ConfusionMatrix(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestOptionsType-ConfusionMatrix", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestOptionsType_ConfusionMatrix * SOAP_FMAC4 soap_get__om__TestOptionsType_ConfusionMatrix(struct soap*, _om__TestOptionsType_ConfusionMatrix *, const char*, const char*);

#ifndef soap_read__om__TestOptionsType_ConfusionMatrix
#define soap_read__om__TestOptionsType_ConfusionMatrix(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__TestOptionsType_ConfusionMatrix(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__TestOptionsType_ConfusionMatrix * SOAP_FMAC2 soap_instantiate__om__TestOptionsType_ConfusionMatrix(struct soap*, int, const char*, const char*, size_t*);

inline _om__TestOptionsType_ConfusionMatrix * soap_new__om__TestOptionsType_ConfusionMatrix(struct soap *soap, int n = -1) { return soap_instantiate__om__TestOptionsType_ConfusionMatrix(soap, n, NULL, NULL, NULL); }

inline _om__TestOptionsType_ConfusionMatrix * soap_new_req__om__TestOptionsType_ConfusionMatrix(struct soap *soap) { _om__TestOptionsType_ConfusionMatrix *_p = soap_instantiate__om__TestOptionsType_ConfusionMatrix(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__TestOptionsType_ConfusionMatrix * soap_new_set__om__TestOptionsType_ConfusionMatrix(struct soap *soap, std::string *Threshold, bool *IgnoreAbsences) { _om__TestOptionsType_ConfusionMatrix *_p = soap_instantiate__om__TestOptionsType_ConfusionMatrix(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__TestOptionsType_ConfusionMatrix::Threshold = Threshold; _p->_om__TestOptionsType_ConfusionMatrix::IgnoreAbsences = IgnoreAbsences; } return _p; }

inline void soap_delete__om__TestOptionsType_ConfusionMatrix(struct soap *soap, _om__TestOptionsType_ConfusionMatrix *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__TestOptionsType_ConfusionMatrix(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__OccurrencesType_Point
#define SOAP_TYPE_om__om__OccurrencesType_Point (103)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__OccurrencesType_Point(struct soap*, const char*, int, const _om__OccurrencesType_Point *, const char*);
SOAP_FMAC3 _om__OccurrencesType_Point * SOAP_FMAC4 soap_in__om__OccurrencesType_Point(struct soap*, const char*, _om__OccurrencesType_Point *, const char*);

#ifndef soap_write__om__OccurrencesType_Point
#define soap_write__om__OccurrencesType_Point(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:OccurrencesType-Point", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__OccurrencesType_Point * SOAP_FMAC4 soap_get__om__OccurrencesType_Point(struct soap*, _om__OccurrencesType_Point *, const char*, const char*);

#ifndef soap_read__om__OccurrencesType_Point
#define soap_read__om__OccurrencesType_Point(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__OccurrencesType_Point(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__OccurrencesType_Point * SOAP_FMAC2 soap_instantiate__om__OccurrencesType_Point(struct soap*, int, const char*, const char*, size_t*);

inline _om__OccurrencesType_Point * soap_new__om__OccurrencesType_Point(struct soap *soap, int n = -1) { return soap_instantiate__om__OccurrencesType_Point(soap, n, NULL, NULL, NULL); }

inline _om__OccurrencesType_Point * soap_new_req__om__OccurrencesType_Point(struct soap *soap, std::string& X, std::string& Y) { _om__OccurrencesType_Point *_p = soap_instantiate__om__OccurrencesType_Point(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__OccurrencesType_Point::X = X; _p->_om__OccurrencesType_Point::Y = Y; } return _p; }

inline _om__OccurrencesType_Point * soap_new_set__om__OccurrencesType_Point(struct soap *soap, std::string *Id, std::string& X, std::string& Y, std::string *Sample) { _om__OccurrencesType_Point *_p = soap_instantiate__om__OccurrencesType_Point(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__OccurrencesType_Point::Id = Id; _p->_om__OccurrencesType_Point::X = X; _p->_om__OccurrencesType_Point::Y = Y; _p->_om__OccurrencesType_Point::Sample = Sample; } return _p; }

inline void soap_delete__om__OccurrencesType_Point(struct soap *soap, _om__OccurrencesType_Point *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__OccurrencesType_Point(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__SerializedAlgorithmType_Model
#define SOAP_TYPE_om__om__SerializedAlgorithmType_Model (94)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__SerializedAlgorithmType_Model(struct soap*, const char*, int, const _om__SerializedAlgorithmType_Model *, const char*);
SOAP_FMAC3 _om__SerializedAlgorithmType_Model * SOAP_FMAC4 soap_in__om__SerializedAlgorithmType_Model(struct soap*, const char*, _om__SerializedAlgorithmType_Model *, const char*);

#ifndef soap_write__om__SerializedAlgorithmType_Model
#define soap_write__om__SerializedAlgorithmType_Model(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SerializedAlgorithmType-Model", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__SerializedAlgorithmType_Model * SOAP_FMAC4 soap_get__om__SerializedAlgorithmType_Model(struct soap*, _om__SerializedAlgorithmType_Model *, const char*, const char*);

#ifndef soap_read__om__SerializedAlgorithmType_Model
#define soap_read__om__SerializedAlgorithmType_Model(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__SerializedAlgorithmType_Model(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__SerializedAlgorithmType_Model * SOAP_FMAC2 soap_instantiate__om__SerializedAlgorithmType_Model(struct soap*, int, const char*, const char*, size_t*);

inline _om__SerializedAlgorithmType_Model * soap_new__om__SerializedAlgorithmType_Model(struct soap *soap, int n = -1) { return soap_instantiate__om__SerializedAlgorithmType_Model(soap, n, NULL, NULL, NULL); }

inline _om__SerializedAlgorithmType_Model * soap_new_req__om__SerializedAlgorithmType_Model(struct soap *soap) { _om__SerializedAlgorithmType_Model *_p = soap_instantiate__om__SerializedAlgorithmType_Model(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__SerializedAlgorithmType_Model * soap_new_set__om__SerializedAlgorithmType_Model(struct soap *soap, struct soap_dom_element& __any) { _om__SerializedAlgorithmType_Model *_p = soap_instantiate__om__SerializedAlgorithmType_Model(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__SerializedAlgorithmType_Model::__any = __any; } return _p; }

inline void soap_delete__om__SerializedAlgorithmType_Model(struct soap *soap, _om__SerializedAlgorithmType_Model *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__SerializedAlgorithmType_Model(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__SerializedAlgorithmType_Parameters_Parameter
#define SOAP_TYPE_om__om__SerializedAlgorithmType_Parameters_Parameter (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, const char*, int, const _om__SerializedAlgorithmType_Parameters_Parameter *, const char*);
SOAP_FMAC3 _om__SerializedAlgorithmType_Parameters_Parameter * SOAP_FMAC4 soap_in__om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, const char*, _om__SerializedAlgorithmType_Parameters_Parameter *, const char*);

#ifndef soap_write__om__SerializedAlgorithmType_Parameters_Parameter
#define soap_write__om__SerializedAlgorithmType_Parameters_Parameter(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SerializedAlgorithmType-Parameters-Parameter", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__SerializedAlgorithmType_Parameters_Parameter * SOAP_FMAC4 soap_get__om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, _om__SerializedAlgorithmType_Parameters_Parameter *, const char*, const char*);

#ifndef soap_read__om__SerializedAlgorithmType_Parameters_Parameter
#define soap_read__om__SerializedAlgorithmType_Parameters_Parameter(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__SerializedAlgorithmType_Parameters_Parameter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__SerializedAlgorithmType_Parameters_Parameter * SOAP_FMAC2 soap_instantiate__om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, int, const char*, const char*, size_t*);

inline _om__SerializedAlgorithmType_Parameters_Parameter * soap_new__om__SerializedAlgorithmType_Parameters_Parameter(struct soap *soap, int n = -1) { return soap_instantiate__om__SerializedAlgorithmType_Parameters_Parameter(soap, n, NULL, NULL, NULL); }

inline _om__SerializedAlgorithmType_Parameters_Parameter * soap_new_req__om__SerializedAlgorithmType_Parameters_Parameter(struct soap *soap, std::string& Id, std::string& Value) { _om__SerializedAlgorithmType_Parameters_Parameter *_p = soap_instantiate__om__SerializedAlgorithmType_Parameters_Parameter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__SerializedAlgorithmType_Parameters_Parameter::Id = Id; _p->_om__SerializedAlgorithmType_Parameters_Parameter::Value = Value; } return _p; }

inline _om__SerializedAlgorithmType_Parameters_Parameter * soap_new_set__om__SerializedAlgorithmType_Parameters_Parameter(struct soap *soap, std::string& Id, std::string& Value) { _om__SerializedAlgorithmType_Parameters_Parameter *_p = soap_instantiate__om__SerializedAlgorithmType_Parameters_Parameter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__SerializedAlgorithmType_Parameters_Parameter::Id = Id; _p->_om__SerializedAlgorithmType_Parameters_Parameter::Value = Value; } return _p; }

inline void soap_delete__om__SerializedAlgorithmType_Parameters_Parameter(struct soap *soap, _om__SerializedAlgorithmType_Parameters_Parameter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__SerializedAlgorithmType_Parameters
#define SOAP_TYPE_om__om__SerializedAlgorithmType_Parameters (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__SerializedAlgorithmType_Parameters(struct soap*, const char*, int, const _om__SerializedAlgorithmType_Parameters *, const char*);
SOAP_FMAC3 _om__SerializedAlgorithmType_Parameters * SOAP_FMAC4 soap_in__om__SerializedAlgorithmType_Parameters(struct soap*, const char*, _om__SerializedAlgorithmType_Parameters *, const char*);

#ifndef soap_write__om__SerializedAlgorithmType_Parameters
#define soap_write__om__SerializedAlgorithmType_Parameters(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SerializedAlgorithmType-Parameters", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__SerializedAlgorithmType_Parameters * SOAP_FMAC4 soap_get__om__SerializedAlgorithmType_Parameters(struct soap*, _om__SerializedAlgorithmType_Parameters *, const char*, const char*);

#ifndef soap_read__om__SerializedAlgorithmType_Parameters
#define soap_read__om__SerializedAlgorithmType_Parameters(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__SerializedAlgorithmType_Parameters(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__SerializedAlgorithmType_Parameters * SOAP_FMAC2 soap_instantiate__om__SerializedAlgorithmType_Parameters(struct soap*, int, const char*, const char*, size_t*);

inline _om__SerializedAlgorithmType_Parameters * soap_new__om__SerializedAlgorithmType_Parameters(struct soap *soap, int n = -1) { return soap_instantiate__om__SerializedAlgorithmType_Parameters(soap, n, NULL, NULL, NULL); }

inline _om__SerializedAlgorithmType_Parameters * soap_new_req__om__SerializedAlgorithmType_Parameters(struct soap *soap) { _om__SerializedAlgorithmType_Parameters *_p = soap_instantiate__om__SerializedAlgorithmType_Parameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__SerializedAlgorithmType_Parameters * soap_new_set__om__SerializedAlgorithmType_Parameters(struct soap *soap, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*Parameter) { _om__SerializedAlgorithmType_Parameters *_p = soap_instantiate__om__SerializedAlgorithmType_Parameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__SerializedAlgorithmType_Parameters::Parameter = Parameter; } return _p; }

inline void soap_delete__om__SerializedAlgorithmType_Parameters(struct soap *soap, _om__SerializedAlgorithmType_Parameters *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__SerializedAlgorithmType_Parameters(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__BasicAlgorithmDefinitionType_Parameters_Parameter
#define SOAP_TYPE_om__om__BasicAlgorithmDefinitionType_Parameters_Parameter (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, const char*, int, const _om__BasicAlgorithmDefinitionType_Parameters_Parameter *, const char*);
SOAP_FMAC3 _om__BasicAlgorithmDefinitionType_Parameters_Parameter * SOAP_FMAC4 soap_in__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, const char*, _om__BasicAlgorithmDefinitionType_Parameters_Parameter *, const char*);

#ifndef soap_write__om__BasicAlgorithmDefinitionType_Parameters_Parameter
#define soap_write__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:BasicAlgorithmDefinitionType-Parameters-Parameter", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__BasicAlgorithmDefinitionType_Parameters_Parameter * SOAP_FMAC4 soap_get__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, _om__BasicAlgorithmDefinitionType_Parameters_Parameter *, const char*, const char*);

#ifndef soap_read__om__BasicAlgorithmDefinitionType_Parameters_Parameter
#define soap_read__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__BasicAlgorithmDefinitionType_Parameters_Parameter * SOAP_FMAC2 soap_instantiate__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, int, const char*, const char*, size_t*);

inline _om__BasicAlgorithmDefinitionType_Parameters_Parameter * soap_new__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap *soap, int n = -1) { return soap_instantiate__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, n, NULL, NULL, NULL); }

inline _om__BasicAlgorithmDefinitionType_Parameters_Parameter * soap_new_req__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap *soap, std::string& Id, std::string& Value) { _om__BasicAlgorithmDefinitionType_Parameters_Parameter *_p = soap_instantiate__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__BasicAlgorithmDefinitionType_Parameters_Parameter::Id = Id; _p->_om__BasicAlgorithmDefinitionType_Parameters_Parameter::Value = Value; } return _p; }

inline _om__BasicAlgorithmDefinitionType_Parameters_Parameter * soap_new_set__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap *soap, std::string& Id, std::string& Value) { _om__BasicAlgorithmDefinitionType_Parameters_Parameter *_p = soap_instantiate__om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__BasicAlgorithmDefinitionType_Parameters_Parameter::Id = Id; _p->_om__BasicAlgorithmDefinitionType_Parameters_Parameter::Value = Value; } return _p; }

inline void soap_delete__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap *soap, _om__BasicAlgorithmDefinitionType_Parameters_Parameter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__BasicAlgorithmDefinitionType_Parameters
#define SOAP_TYPE_om__om__BasicAlgorithmDefinitionType_Parameters (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__BasicAlgorithmDefinitionType_Parameters(struct soap*, const char*, int, const _om__BasicAlgorithmDefinitionType_Parameters *, const char*);
SOAP_FMAC3 _om__BasicAlgorithmDefinitionType_Parameters * SOAP_FMAC4 soap_in__om__BasicAlgorithmDefinitionType_Parameters(struct soap*, const char*, _om__BasicAlgorithmDefinitionType_Parameters *, const char*);

#ifndef soap_write__om__BasicAlgorithmDefinitionType_Parameters
#define soap_write__om__BasicAlgorithmDefinitionType_Parameters(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:BasicAlgorithmDefinitionType-Parameters", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__BasicAlgorithmDefinitionType_Parameters * SOAP_FMAC4 soap_get__om__BasicAlgorithmDefinitionType_Parameters(struct soap*, _om__BasicAlgorithmDefinitionType_Parameters *, const char*, const char*);

#ifndef soap_read__om__BasicAlgorithmDefinitionType_Parameters
#define soap_read__om__BasicAlgorithmDefinitionType_Parameters(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__BasicAlgorithmDefinitionType_Parameters(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__BasicAlgorithmDefinitionType_Parameters * SOAP_FMAC2 soap_instantiate__om__BasicAlgorithmDefinitionType_Parameters(struct soap*, int, const char*, const char*, size_t*);

inline _om__BasicAlgorithmDefinitionType_Parameters * soap_new__om__BasicAlgorithmDefinitionType_Parameters(struct soap *soap, int n = -1) { return soap_instantiate__om__BasicAlgorithmDefinitionType_Parameters(soap, n, NULL, NULL, NULL); }

inline _om__BasicAlgorithmDefinitionType_Parameters * soap_new_req__om__BasicAlgorithmDefinitionType_Parameters(struct soap *soap) { _om__BasicAlgorithmDefinitionType_Parameters *_p = soap_instantiate__om__BasicAlgorithmDefinitionType_Parameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__BasicAlgorithmDefinitionType_Parameters * soap_new_set__om__BasicAlgorithmDefinitionType_Parameters(struct soap *soap, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*Parameter) { _om__BasicAlgorithmDefinitionType_Parameters *_p = soap_instantiate__om__BasicAlgorithmDefinitionType_Parameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__BasicAlgorithmDefinitionType_Parameters::Parameter = Parameter; } return _p; }

inline void soap_delete__om__BasicAlgorithmDefinitionType_Parameters(struct soap *soap, _om__BasicAlgorithmDefinitionType_Parameters *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__BasicAlgorithmDefinitionType_Parameters(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues
#define SOAP_TYPE_om__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, const char*, int, const _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *, const char*);
SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues * SOAP_FMAC4 soap_in__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, const char*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *, const char*);

#ifndef soap_write__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues
#define soap_write__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType-Parameters-Parameter-AcceptedValues", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues * SOAP_FMAC4 soap_get__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *, const char*, const char*);

#ifndef soap_read__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues
#define soap_read__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues * SOAP_FMAC2 soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, int, const char*, const char*, size_t*);

inline _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues * soap_new__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap *soap, int n = -1) { return soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, n, NULL, NULL, NULL); }

inline _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues * soap_new_req__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap *soap, std::vector<std::string >& Value) { _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *_p = soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues::Value = Value; } return _p; }

inline _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues * soap_new_set__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap *soap, std::vector<std::string >& Value) { _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *_p = soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues::Value = Value; } return _p; }

inline void soap_delete__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap *soap, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange
#define SOAP_TYPE_om__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, const char*, int, const _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *, const char*);
SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange * SOAP_FMAC4 soap_in__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, const char*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *, const char*);

#ifndef soap_write__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange
#define soap_write__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType-Parameters-Parameter-AcceptedRange", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange * SOAP_FMAC4 soap_get__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *, const char*, const char*);

#ifndef soap_read__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange
#define soap_read__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange * SOAP_FMAC2 soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, int, const char*, const char*, size_t*);

inline _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange * soap_new__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap *soap, int n = -1) { return soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, n, NULL, NULL, NULL); }

inline _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange * soap_new_req__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap *soap) { _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *_p = soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange * soap_new_set__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap *soap, double *Min, double *Max) { _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *_p = soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange::Min = Min; _p->_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange::Max = Max; } return _p; }

inline void soap_delete__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap *soap, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__AlgorithmMetadataType_Parameters_Parameter
#define SOAP_TYPE_om__om__AlgorithmMetadataType_Parameters_Parameter (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, const char*, int, const _om__AlgorithmMetadataType_Parameters_Parameter *, const char*);
SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter * SOAP_FMAC4 soap_in__om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, const char*, _om__AlgorithmMetadataType_Parameters_Parameter *, const char*);

#ifndef soap_write__om__AlgorithmMetadataType_Parameters_Parameter
#define soap_write__om__AlgorithmMetadataType_Parameters_Parameter(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType-Parameters-Parameter", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter * SOAP_FMAC4 soap_get__om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter *, const char*, const char*);

#ifndef soap_read__om__AlgorithmMetadataType_Parameters_Parameter
#define soap_read__om__AlgorithmMetadataType_Parameters_Parameter(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__AlgorithmMetadataType_Parameters_Parameter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__AlgorithmMetadataType_Parameters_Parameter * SOAP_FMAC2 soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, int, const char*, const char*, size_t*);

inline _om__AlgorithmMetadataType_Parameters_Parameter * soap_new__om__AlgorithmMetadataType_Parameters_Parameter(struct soap *soap, int n = -1) { return soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter(soap, n, NULL, NULL, NULL); }

inline _om__AlgorithmMetadataType_Parameters_Parameter * soap_new_req__om__AlgorithmMetadataType_Parameters_Parameter(struct soap *soap, std::string& Name, std::string& Type, std::string& Overview, std::string& Description, std::string& Id) { _om__AlgorithmMetadataType_Parameters_Parameter *_p = soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Parameters_Parameter::Name = Name; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Type = Type; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Overview = Overview; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Description = Description; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Id = Id; } return _p; }

inline _om__AlgorithmMetadataType_Parameters_Parameter * soap_new_set__om__AlgorithmMetadataType_Parameters_Parameter(struct soap *soap, std::string& Name, std::string& Type, std::string& Overview, std::string& Description, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *AcceptedRange, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *AcceptedValues, std::string *Default, std::string& Id) { _om__AlgorithmMetadataType_Parameters_Parameter *_p = soap_instantiate__om__AlgorithmMetadataType_Parameters_Parameter(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Parameters_Parameter::Name = Name; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Type = Type; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Overview = Overview; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Description = Description; _p->_om__AlgorithmMetadataType_Parameters_Parameter::AcceptedRange = AcceptedRange; _p->_om__AlgorithmMetadataType_Parameters_Parameter::AcceptedValues = AcceptedValues; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Default = Default; _p->_om__AlgorithmMetadataType_Parameters_Parameter::Id = Id; } return _p; }

inline void soap_delete__om__AlgorithmMetadataType_Parameters_Parameter(struct soap *soap, _om__AlgorithmMetadataType_Parameters_Parameter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__AlgorithmMetadataType_Parameters
#define SOAP_TYPE_om__om__AlgorithmMetadataType_Parameters (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__AlgorithmMetadataType_Parameters(struct soap*, const char*, int, const _om__AlgorithmMetadataType_Parameters *, const char*);
SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters * SOAP_FMAC4 soap_in__om__AlgorithmMetadataType_Parameters(struct soap*, const char*, _om__AlgorithmMetadataType_Parameters *, const char*);

#ifndef soap_write__om__AlgorithmMetadataType_Parameters
#define soap_write__om__AlgorithmMetadataType_Parameters(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType-Parameters", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters * SOAP_FMAC4 soap_get__om__AlgorithmMetadataType_Parameters(struct soap*, _om__AlgorithmMetadataType_Parameters *, const char*, const char*);

#ifndef soap_read__om__AlgorithmMetadataType_Parameters
#define soap_read__om__AlgorithmMetadataType_Parameters(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__AlgorithmMetadataType_Parameters(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__AlgorithmMetadataType_Parameters * SOAP_FMAC2 soap_instantiate__om__AlgorithmMetadataType_Parameters(struct soap*, int, const char*, const char*, size_t*);

inline _om__AlgorithmMetadataType_Parameters * soap_new__om__AlgorithmMetadataType_Parameters(struct soap *soap, int n = -1) { return soap_instantiate__om__AlgorithmMetadataType_Parameters(soap, n, NULL, NULL, NULL); }

inline _om__AlgorithmMetadataType_Parameters * soap_new_req__om__AlgorithmMetadataType_Parameters(struct soap *soap) { _om__AlgorithmMetadataType_Parameters *_p = soap_instantiate__om__AlgorithmMetadataType_Parameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _om__AlgorithmMetadataType_Parameters * soap_new_set__om__AlgorithmMetadataType_Parameters(struct soap *soap, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*Parameter) { _om__AlgorithmMetadataType_Parameters *_p = soap_instantiate__om__AlgorithmMetadataType_Parameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Parameters::Parameter = Parameter; } return _p; }

inline void soap_delete__om__AlgorithmMetadataType_Parameters(struct soap *soap, _om__AlgorithmMetadataType_Parameters *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__AlgorithmMetadataType_Parameters(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__AlgorithmMetadataType_Developers_Developer
#define SOAP_TYPE_om__om__AlgorithmMetadataType_Developers_Developer (72)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__AlgorithmMetadataType_Developers_Developer(struct soap*, const char*, int, const _om__AlgorithmMetadataType_Developers_Developer *, const char*);
SOAP_FMAC3 _om__AlgorithmMetadataType_Developers_Developer * SOAP_FMAC4 soap_in__om__AlgorithmMetadataType_Developers_Developer(struct soap*, const char*, _om__AlgorithmMetadataType_Developers_Developer *, const char*);

#ifndef soap_write__om__AlgorithmMetadataType_Developers_Developer
#define soap_write__om__AlgorithmMetadataType_Developers_Developer(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType-Developers-Developer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Developers_Developer * SOAP_FMAC4 soap_get__om__AlgorithmMetadataType_Developers_Developer(struct soap*, _om__AlgorithmMetadataType_Developers_Developer *, const char*, const char*);

#ifndef soap_read__om__AlgorithmMetadataType_Developers_Developer
#define soap_read__om__AlgorithmMetadataType_Developers_Developer(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__AlgorithmMetadataType_Developers_Developer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__AlgorithmMetadataType_Developers_Developer * SOAP_FMAC2 soap_instantiate__om__AlgorithmMetadataType_Developers_Developer(struct soap*, int, const char*, const char*, size_t*);

inline _om__AlgorithmMetadataType_Developers_Developer * soap_new__om__AlgorithmMetadataType_Developers_Developer(struct soap *soap, int n = -1) { return soap_instantiate__om__AlgorithmMetadataType_Developers_Developer(soap, n, NULL, NULL, NULL); }

inline _om__AlgorithmMetadataType_Developers_Developer * soap_new_req__om__AlgorithmMetadataType_Developers_Developer(struct soap *soap, std::string& Name) { _om__AlgorithmMetadataType_Developers_Developer *_p = soap_instantiate__om__AlgorithmMetadataType_Developers_Developer(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Developers_Developer::Name = Name; } return _p; }

inline _om__AlgorithmMetadataType_Developers_Developer * soap_new_set__om__AlgorithmMetadataType_Developers_Developer(struct soap *soap, std::string& Name, std::string *Contact) { _om__AlgorithmMetadataType_Developers_Developer *_p = soap_instantiate__om__AlgorithmMetadataType_Developers_Developer(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Developers_Developer::Name = Name; _p->_om__AlgorithmMetadataType_Developers_Developer::Contact = Contact; } return _p; }

inline void soap_delete__om__AlgorithmMetadataType_Developers_Developer(struct soap *soap, _om__AlgorithmMetadataType_Developers_Developer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__AlgorithmMetadataType_Developers_Developer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__AlgorithmMetadataType_Developers
#define SOAP_TYPE_om__om__AlgorithmMetadataType_Developers (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__AlgorithmMetadataType_Developers(struct soap*, const char*, int, const _om__AlgorithmMetadataType_Developers *, const char*);
SOAP_FMAC3 _om__AlgorithmMetadataType_Developers * SOAP_FMAC4 soap_in__om__AlgorithmMetadataType_Developers(struct soap*, const char*, _om__AlgorithmMetadataType_Developers *, const char*);

#ifndef soap_write__om__AlgorithmMetadataType_Developers
#define soap_write__om__AlgorithmMetadataType_Developers(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType-Developers", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Developers * SOAP_FMAC4 soap_get__om__AlgorithmMetadataType_Developers(struct soap*, _om__AlgorithmMetadataType_Developers *, const char*, const char*);

#ifndef soap_read__om__AlgorithmMetadataType_Developers
#define soap_read__om__AlgorithmMetadataType_Developers(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__AlgorithmMetadataType_Developers(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__AlgorithmMetadataType_Developers * SOAP_FMAC2 soap_instantiate__om__AlgorithmMetadataType_Developers(struct soap*, int, const char*, const char*, size_t*);

inline _om__AlgorithmMetadataType_Developers * soap_new__om__AlgorithmMetadataType_Developers(struct soap *soap, int n = -1) { return soap_instantiate__om__AlgorithmMetadataType_Developers(soap, n, NULL, NULL, NULL); }

inline _om__AlgorithmMetadataType_Developers * soap_new_req__om__AlgorithmMetadataType_Developers(struct soap *soap, std::vector<_om__AlgorithmMetadataType_Developers_Developer >& Developer) { _om__AlgorithmMetadataType_Developers *_p = soap_instantiate__om__AlgorithmMetadataType_Developers(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Developers::Developer = Developer; } return _p; }

inline _om__AlgorithmMetadataType_Developers * soap_new_set__om__AlgorithmMetadataType_Developers(struct soap *soap, std::vector<_om__AlgorithmMetadataType_Developers_Developer >& Developer) { _om__AlgorithmMetadataType_Developers *_p = soap_instantiate__om__AlgorithmMetadataType_Developers(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Developers::Developer = Developer; } return _p; }

inline void soap_delete__om__AlgorithmMetadataType_Developers(struct soap *soap, _om__AlgorithmMetadataType_Developers *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__AlgorithmMetadataType_Developers(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__AlgorithmMetadataType_Designers_Designer
#define SOAP_TYPE_om__om__AlgorithmMetadataType_Designers_Designer (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__AlgorithmMetadataType_Designers_Designer(struct soap*, const char*, int, const _om__AlgorithmMetadataType_Designers_Designer *, const char*);
SOAP_FMAC3 _om__AlgorithmMetadataType_Designers_Designer * SOAP_FMAC4 soap_in__om__AlgorithmMetadataType_Designers_Designer(struct soap*, const char*, _om__AlgorithmMetadataType_Designers_Designer *, const char*);

#ifndef soap_write__om__AlgorithmMetadataType_Designers_Designer
#define soap_write__om__AlgorithmMetadataType_Designers_Designer(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType-Designers-Designer", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Designers_Designer * SOAP_FMAC4 soap_get__om__AlgorithmMetadataType_Designers_Designer(struct soap*, _om__AlgorithmMetadataType_Designers_Designer *, const char*, const char*);

#ifndef soap_read__om__AlgorithmMetadataType_Designers_Designer
#define soap_read__om__AlgorithmMetadataType_Designers_Designer(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__AlgorithmMetadataType_Designers_Designer(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__AlgorithmMetadataType_Designers_Designer * SOAP_FMAC2 soap_instantiate__om__AlgorithmMetadataType_Designers_Designer(struct soap*, int, const char*, const char*, size_t*);

inline _om__AlgorithmMetadataType_Designers_Designer * soap_new__om__AlgorithmMetadataType_Designers_Designer(struct soap *soap, int n = -1) { return soap_instantiate__om__AlgorithmMetadataType_Designers_Designer(soap, n, NULL, NULL, NULL); }

inline _om__AlgorithmMetadataType_Designers_Designer * soap_new_req__om__AlgorithmMetadataType_Designers_Designer(struct soap *soap, std::string& Name) { _om__AlgorithmMetadataType_Designers_Designer *_p = soap_instantiate__om__AlgorithmMetadataType_Designers_Designer(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Designers_Designer::Name = Name; } return _p; }

inline _om__AlgorithmMetadataType_Designers_Designer * soap_new_set__om__AlgorithmMetadataType_Designers_Designer(struct soap *soap, std::string& Name, std::string *Contact) { _om__AlgorithmMetadataType_Designers_Designer *_p = soap_instantiate__om__AlgorithmMetadataType_Designers_Designer(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Designers_Designer::Name = Name; _p->_om__AlgorithmMetadataType_Designers_Designer::Contact = Contact; } return _p; }

inline void soap_delete__om__AlgorithmMetadataType_Designers_Designer(struct soap *soap, _om__AlgorithmMetadataType_Designers_Designer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__AlgorithmMetadataType_Designers_Designer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__AlgorithmMetadataType_Designers
#define SOAP_TYPE_om__om__AlgorithmMetadataType_Designers (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__AlgorithmMetadataType_Designers(struct soap*, const char*, int, const _om__AlgorithmMetadataType_Designers *, const char*);
SOAP_FMAC3 _om__AlgorithmMetadataType_Designers * SOAP_FMAC4 soap_in__om__AlgorithmMetadataType_Designers(struct soap*, const char*, _om__AlgorithmMetadataType_Designers *, const char*);

#ifndef soap_write__om__AlgorithmMetadataType_Designers
#define soap_write__om__AlgorithmMetadataType_Designers(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType-Designers", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Designers * SOAP_FMAC4 soap_get__om__AlgorithmMetadataType_Designers(struct soap*, _om__AlgorithmMetadataType_Designers *, const char*, const char*);

#ifndef soap_read__om__AlgorithmMetadataType_Designers
#define soap_read__om__AlgorithmMetadataType_Designers(soap, data) ( soap_begin_recv(soap) || !om::soap_get__om__AlgorithmMetadataType_Designers(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _om__AlgorithmMetadataType_Designers * SOAP_FMAC2 soap_instantiate__om__AlgorithmMetadataType_Designers(struct soap*, int, const char*, const char*, size_t*);

inline _om__AlgorithmMetadataType_Designers * soap_new__om__AlgorithmMetadataType_Designers(struct soap *soap, int n = -1) { return soap_instantiate__om__AlgorithmMetadataType_Designers(soap, n, NULL, NULL, NULL); }

inline _om__AlgorithmMetadataType_Designers * soap_new_req__om__AlgorithmMetadataType_Designers(struct soap *soap, std::vector<_om__AlgorithmMetadataType_Designers_Designer >& Designer) { _om__AlgorithmMetadataType_Designers *_p = soap_instantiate__om__AlgorithmMetadataType_Designers(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Designers::Designer = Designer; } return _p; }

inline _om__AlgorithmMetadataType_Designers * soap_new_set__om__AlgorithmMetadataType_Designers(struct soap *soap, std::vector<_om__AlgorithmMetadataType_Designers_Designer >& Designer) { _om__AlgorithmMetadataType_Designers *_p = soap_instantiate__om__AlgorithmMetadataType_Designers(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_om__AlgorithmMetadataType_Designers::Designer = Designer; } return _p; }

inline void soap_delete__om__AlgorithmMetadataType_Designers(struct soap *soap, _om__AlgorithmMetadataType_Designers *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__om__AlgorithmMetadataType_Designers(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ThresholdParameterType
#define SOAP_TYPE_om_om__ThresholdParameterType (59)
#endif

#define soap_default_om__ThresholdParameterType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_om__ThresholdParameterType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ThresholdParameterType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_om__ThresholdParameterType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_om__ThresholdParameterType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_om__ThresholdParameterType
#define soap_write_om__ThresholdParameterType(soap, data) ( soap_serialize_om__ThresholdParameterType(soap, data), soap_begin_send(soap) || soap_put_om__ThresholdParameterType(soap, data, "om:ThresholdParameterType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_om__ThresholdParameterType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_om__ThresholdParameterType
#define soap_read_om__ThresholdParameterType(soap, data) ( soap_begin_recv(soap) || !soap_get_om__ThresholdParameterType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_om__ThresholdParameterType soap_instantiate_std__string


#define soap_copy_om__ThresholdParameterType soap_copy_std__string

#ifndef SOAP_TYPE_om_om__ResultSetType
#define SOAP_TYPE_om_om__ResultSetType (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ResultSetType(struct soap*, const char*, int, const om__ResultSetType *, const char*);
SOAP_FMAC3 om__ResultSetType * SOAP_FMAC4 soap_in_om__ResultSetType(struct soap*, const char*, om__ResultSetType *, const char*);

#ifndef soap_write_om__ResultSetType
#define soap_write_om__ResultSetType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ResultSetType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ResultSetType * SOAP_FMAC4 soap_get_om__ResultSetType(struct soap*, om__ResultSetType *, const char*, const char*);

#ifndef soap_read_om__ResultSetType
#define soap_read_om__ResultSetType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ResultSetType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ResultSetType * SOAP_FMAC2 soap_instantiate_om__ResultSetType(struct soap*, int, const char*, const char*, size_t*);

inline om__ResultSetType * soap_new_om__ResultSetType(struct soap *soap, int n = -1) { return soap_instantiate_om__ResultSetType(soap, n, NULL, NULL, NULL); }

inline om__ResultSetType * soap_new_req_om__ResultSetType(struct soap *soap, std::vector<_om__ResultSetType_Job >& Job) { om__ResultSetType *_p = soap_instantiate_om__ResultSetType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ResultSetType::Job = Job; } return _p; }

inline om__ResultSetType * soap_new_set_om__ResultSetType(struct soap *soap, std::vector<_om__ResultSetType_Job >& Job) { om__ResultSetType *_p = soap_instantiate_om__ResultSetType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ResultSetType::Job = Job; } return _p; }

inline void soap_delete_om__ResultSetType(struct soap *soap, om__ResultSetType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ResultSetType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__JobTicketsType
#define SOAP_TYPE_om_om__JobTicketsType (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__JobTicketsType(struct soap*, const char*, int, const om__JobTicketsType *, const char*);
SOAP_FMAC3 om__JobTicketsType * SOAP_FMAC4 soap_in_om__JobTicketsType(struct soap*, const char*, om__JobTicketsType *, const char*);

#ifndef soap_write_om__JobTicketsType
#define soap_write_om__JobTicketsType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:JobTicketsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__JobTicketsType * SOAP_FMAC4 soap_get_om__JobTicketsType(struct soap*, om__JobTicketsType *, const char*, const char*);

#ifndef soap_read_om__JobTicketsType
#define soap_read_om__JobTicketsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__JobTicketsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__JobTicketsType * SOAP_FMAC2 soap_instantiate_om__JobTicketsType(struct soap*, int, const char*, const char*, size_t*);

inline om__JobTicketsType * soap_new_om__JobTicketsType(struct soap *soap, int n = -1) { return soap_instantiate_om__JobTicketsType(soap, n, NULL, NULL, NULL); }

inline om__JobTicketsType * soap_new_req_om__JobTicketsType(struct soap *soap, std::vector<_om__JobTicketsType_Job >& Job) { om__JobTicketsType *_p = soap_instantiate_om__JobTicketsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__JobTicketsType::Job = Job; } return _p; }

inline om__JobTicketsType * soap_new_set_om__JobTicketsType(struct soap *soap, std::vector<_om__JobTicketsType_Job >& Job) { om__JobTicketsType *_p = soap_instantiate_om__JobTicketsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__JobTicketsType::Job = Job; } return _p; }

inline void soap_delete_om__JobTicketsType(struct soap *soap, om__JobTicketsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__JobTicketsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__EvaluateModelJobType
#define SOAP_TYPE_om_om__EvaluateModelJobType (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__EvaluateModelJobType(struct soap*, const char*, int, const om__EvaluateModelJobType *, const char*);
SOAP_FMAC3 om__EvaluateModelJobType * SOAP_FMAC4 soap_in_om__EvaluateModelJobType(struct soap*, const char*, om__EvaluateModelJobType *, const char*);

#ifndef soap_write_om__EvaluateModelJobType
#define soap_write_om__EvaluateModelJobType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:EvaluateModelJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__EvaluateModelJobType * SOAP_FMAC4 soap_get_om__EvaluateModelJobType(struct soap*, om__EvaluateModelJobType *, const char*, const char*);

#ifndef soap_read_om__EvaluateModelJobType
#define soap_read_om__EvaluateModelJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__EvaluateModelJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__EvaluateModelJobType * SOAP_FMAC2 soap_instantiate_om__EvaluateModelJobType(struct soap*, int, const char*, const char*, size_t*);

inline om__EvaluateModelJobType * soap_new_om__EvaluateModelJobType(struct soap *soap, int n = -1) { return soap_instantiate_om__EvaluateModelJobType(soap, n, NULL, NULL, NULL); }

inline om__EvaluateModelJobType * soap_new_req_om__EvaluateModelJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__ReferenceType *PresenceRef, om__ReferenceType *ModelRef, std::string& id1) { om__EvaluateModelJobType *_p = soap_instantiate_om__EvaluateModelJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__EvaluateModelJobType::EnvironmentRef = EnvironmentRef; _p->om__EvaluateModelJobType::PresenceRef = PresenceRef; _p->om__EvaluateModelJobType::ModelRef = ModelRef; _p->om__IdentifiedType::id = id1; } return _p; }

inline om__EvaluateModelJobType * soap_new_set_om__EvaluateModelJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__ReferenceType *PresenceRef, om__ReferenceType *AbsenceRef, om__ReferenceType *ModelRef, std::string& id1) { om__EvaluateModelJobType *_p = soap_instantiate_om__EvaluateModelJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__EvaluateModelJobType::EnvironmentRef = EnvironmentRef; _p->om__EvaluateModelJobType::PresenceRef = PresenceRef; _p->om__EvaluateModelJobType::AbsenceRef = AbsenceRef; _p->om__EvaluateModelJobType::ModelRef = ModelRef; _p->om__IdentifiedType::id = id1; } return _p; }

inline void soap_delete_om__EvaluateModelJobType(struct soap *soap, om__EvaluateModelJobType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__EvaluateModelJobType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ProjectModelJobType
#define SOAP_TYPE_om_om__ProjectModelJobType (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ProjectModelJobType(struct soap*, const char*, int, const om__ProjectModelJobType *, const char*);
SOAP_FMAC3 om__ProjectModelJobType * SOAP_FMAC4 soap_in_om__ProjectModelJobType(struct soap*, const char*, om__ProjectModelJobType *, const char*);

#ifndef soap_write_om__ProjectModelJobType
#define soap_write_om__ProjectModelJobType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ProjectModelJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ProjectModelJobType * SOAP_FMAC4 soap_get_om__ProjectModelJobType(struct soap*, om__ProjectModelJobType *, const char*, const char*);

#ifndef soap_read_om__ProjectModelJobType
#define soap_read_om__ProjectModelJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ProjectModelJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ProjectModelJobType * SOAP_FMAC2 soap_instantiate_om__ProjectModelJobType(struct soap*, int, const char*, const char*, size_t*);

inline om__ProjectModelJobType * soap_new_om__ProjectModelJobType(struct soap *soap, int n = -1) { return soap_instantiate_om__ProjectModelJobType(soap, n, NULL, NULL, NULL); }

inline om__ProjectModelJobType * soap_new_req_om__ProjectModelJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__ReferenceType *ModelRef, std::string& id1) { om__ProjectModelJobType *_p = soap_instantiate_om__ProjectModelJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ProjectModelJobType::EnvironmentRef = EnvironmentRef; _p->om__ProjectModelJobType::ModelRef = ModelRef; _p->om__IdentifiedType::id = id1; } return _p; }

inline om__ProjectModelJobType * soap_new_set_om__ProjectModelJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__ReferenceType *ModelRef, om__MapOutputParametersType *OutputParameters, om__ProjectionStatisticsParametersType *Statistics, std::string& id1) { om__ProjectModelJobType *_p = soap_instantiate_om__ProjectModelJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ProjectModelJobType::EnvironmentRef = EnvironmentRef; _p->om__ProjectModelJobType::ModelRef = ModelRef; _p->om__ProjectModelJobType::OutputParameters = OutputParameters; _p->om__ProjectModelJobType::Statistics = Statistics; _p->om__IdentifiedType::id = id1; } return _p; }

inline void soap_delete_om__ProjectModelJobType(struct soap *soap, om__ProjectModelJobType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ProjectModelJobType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__TestModelJobType
#define SOAP_TYPE_om_om__TestModelJobType (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__TestModelJobType(struct soap*, const char*, int, const om__TestModelJobType *, const char*);
SOAP_FMAC3 om__TestModelJobType * SOAP_FMAC4 soap_in_om__TestModelJobType(struct soap*, const char*, om__TestModelJobType *, const char*);

#ifndef soap_write_om__TestModelJobType
#define soap_write_om__TestModelJobType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestModelJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestModelJobType * SOAP_FMAC4 soap_get_om__TestModelJobType(struct soap*, om__TestModelJobType *, const char*, const char*);

#ifndef soap_read_om__TestModelJobType
#define soap_read_om__TestModelJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__TestModelJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__TestModelJobType * SOAP_FMAC2 soap_instantiate_om__TestModelJobType(struct soap*, int, const char*, const char*, size_t*);

inline om__TestModelJobType * soap_new_om__TestModelJobType(struct soap *soap, int n = -1) { return soap_instantiate_om__TestModelJobType(soap, n, NULL, NULL, NULL); }

inline om__TestModelJobType * soap_new_req_om__TestModelJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__ReferenceType *PresenceRef, om__ReferenceType *ModelRef, std::string& id1) { om__TestModelJobType *_p = soap_instantiate_om__TestModelJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__TestModelJobType::EnvironmentRef = EnvironmentRef; _p->om__TestModelJobType::PresenceRef = PresenceRef; _p->om__TestModelJobType::ModelRef = ModelRef; _p->om__IdentifiedType::id = id1; } return _p; }

inline om__TestModelJobType * soap_new_set_om__TestModelJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__ReferenceType *PresenceRef, om__ReferenceType *AbsenceRef, om__ReferenceType *ModelRef, om__TestOptionsType *Statistics, std::string& id1) { om__TestModelJobType *_p = soap_instantiate_om__TestModelJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__TestModelJobType::EnvironmentRef = EnvironmentRef; _p->om__TestModelJobType::PresenceRef = PresenceRef; _p->om__TestModelJobType::AbsenceRef = AbsenceRef; _p->om__TestModelJobType::ModelRef = ModelRef; _p->om__TestModelJobType::Statistics = Statistics; _p->om__IdentifiedType::id = id1; } return _p; }

inline void soap_delete_om__TestModelJobType(struct soap *soap, om__TestModelJobType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__TestModelJobType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__CreateModelJobType
#define SOAP_TYPE_om_om__CreateModelJobType (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__CreateModelJobType(struct soap*, const char*, int, const om__CreateModelJobType *, const char*);
SOAP_FMAC3 om__CreateModelJobType * SOAP_FMAC4 soap_in_om__CreateModelJobType(struct soap*, const char*, om__CreateModelJobType *, const char*);

#ifndef soap_write_om__CreateModelJobType
#define soap_write_om__CreateModelJobType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:CreateModelJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__CreateModelJobType * SOAP_FMAC4 soap_get_om__CreateModelJobType(struct soap*, om__CreateModelJobType *, const char*, const char*);

#ifndef soap_read_om__CreateModelJobType
#define soap_read_om__CreateModelJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__CreateModelJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__CreateModelJobType * SOAP_FMAC2 soap_instantiate_om__CreateModelJobType(struct soap*, int, const char*, const char*, size_t*);

inline om__CreateModelJobType * soap_new_om__CreateModelJobType(struct soap *soap, int n = -1) { return soap_instantiate_om__CreateModelJobType(soap, n, NULL, NULL, NULL); }

inline om__CreateModelJobType * soap_new_req_om__CreateModelJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__ReferenceType *PresenceRef, om__ReferenceType *AlgorithmRef, std::string& id1) { om__CreateModelJobType *_p = soap_instantiate_om__CreateModelJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__CreateModelJobType::EnvironmentRef = EnvironmentRef; _p->om__CreateModelJobType::PresenceRef = PresenceRef; _p->om__CreateModelJobType::AlgorithmRef = AlgorithmRef; _p->om__IdentifiedType::id = id1; } return _p; }

inline om__CreateModelJobType * soap_new_set_om__CreateModelJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__ReferenceType *PresenceRef, om__ReferenceType *AbsenceRef, om__ReferenceType *AlgorithmRef, om__ModelOptionsType *Options, std::string& id1) { om__CreateModelJobType *_p = soap_instantiate_om__CreateModelJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__CreateModelJobType::EnvironmentRef = EnvironmentRef; _p->om__CreateModelJobType::PresenceRef = PresenceRef; _p->om__CreateModelJobType::AbsenceRef = AbsenceRef; _p->om__CreateModelJobType::AlgorithmRef = AlgorithmRef; _p->om__CreateModelJobType::Options = Options; _p->om__IdentifiedType::id = id1; } return _p; }

inline void soap_delete_om__CreateModelJobType(struct soap *soap, om__CreateModelJobType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__CreateModelJobType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__SamplingJobType
#define SOAP_TYPE_om_om__SamplingJobType (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__SamplingJobType(struct soap*, const char*, int, const om__SamplingJobType *, const char*);
SOAP_FMAC3 om__SamplingJobType * SOAP_FMAC4 soap_in_om__SamplingJobType(struct soap*, const char*, om__SamplingJobType *, const char*);

#ifndef soap_write_om__SamplingJobType
#define soap_write_om__SamplingJobType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SamplingJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SamplingJobType * SOAP_FMAC4 soap_get_om__SamplingJobType(struct soap*, om__SamplingJobType *, const char*, const char*);

#ifndef soap_read_om__SamplingJobType
#define soap_read_om__SamplingJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__SamplingJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__SamplingJobType * SOAP_FMAC2 soap_instantiate_om__SamplingJobType(struct soap*, int, const char*, const char*, size_t*);

inline om__SamplingJobType * soap_new_om__SamplingJobType(struct soap *soap, int n = -1) { return soap_instantiate_om__SamplingJobType(soap, n, NULL, NULL, NULL); }

inline om__SamplingJobType * soap_new_req_om__SamplingJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__SamplingOptionsType *Options, std::string& id1) { om__SamplingJobType *_p = soap_instantiate_om__SamplingJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SamplingJobType::EnvironmentRef = EnvironmentRef; _p->om__SamplingJobType::Options = Options; _p->om__IdentifiedType::id = id1; } return _p; }

inline om__SamplingJobType * soap_new_set_om__SamplingJobType(struct soap *soap, om__ReferenceType *EnvironmentRef, om__SamplingOptionsType *Options, std::string& id1) { om__SamplingJobType *_p = soap_instantiate_om__SamplingJobType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SamplingJobType::EnvironmentRef = EnvironmentRef; _p->om__SamplingJobType::Options = Options; _p->om__IdentifiedType::id = id1; } return _p; }

inline void soap_delete_om__SamplingJobType(struct soap *soap, om__SamplingJobType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__SamplingJobType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__IdentifiedType
#define SOAP_TYPE_om_om__IdentifiedType (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__IdentifiedType(struct soap*, const char*, int, const om__IdentifiedType *, const char*);
SOAP_FMAC3 om__IdentifiedType * SOAP_FMAC4 soap_in_om__IdentifiedType(struct soap*, const char*, om__IdentifiedType *, const char*);

#ifndef soap_write_om__IdentifiedType
#define soap_write_om__IdentifiedType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:IdentifiedType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__IdentifiedType * SOAP_FMAC4 soap_get_om__IdentifiedType(struct soap*, om__IdentifiedType *, const char*, const char*);

#ifndef soap_read_om__IdentifiedType
#define soap_read_om__IdentifiedType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__IdentifiedType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__IdentifiedType * SOAP_FMAC2 soap_instantiate_om__IdentifiedType(struct soap*, int, const char*, const char*, size_t*);

inline om__IdentifiedType * soap_new_om__IdentifiedType(struct soap *soap, int n = -1) { return soap_instantiate_om__IdentifiedType(soap, n, NULL, NULL, NULL); }

inline om__IdentifiedType * soap_new_req_om__IdentifiedType(struct soap *soap, std::string& id) { om__IdentifiedType *_p = soap_instantiate_om__IdentifiedType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__IdentifiedType::id = id; } return _p; }

inline om__IdentifiedType * soap_new_set_om__IdentifiedType(struct soap *soap, std::string& id) { om__IdentifiedType *_p = soap_instantiate_om__IdentifiedType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__IdentifiedType::id = id; } return _p; }

inline void soap_delete_om__IdentifiedType(struct soap *soap, om__IdentifiedType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__IdentifiedType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ReferenceType
#define SOAP_TYPE_om_om__ReferenceType (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ReferenceType(struct soap*, const char*, int, const om__ReferenceType *, const char*);
SOAP_FMAC3 om__ReferenceType * SOAP_FMAC4 soap_in_om__ReferenceType(struct soap*, const char*, om__ReferenceType *, const char*);

#ifndef soap_write_om__ReferenceType
#define soap_write_om__ReferenceType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ReferenceType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ReferenceType * SOAP_FMAC4 soap_get_om__ReferenceType(struct soap*, om__ReferenceType *, const char*, const char*);

#ifndef soap_read_om__ReferenceType
#define soap_read_om__ReferenceType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ReferenceType * SOAP_FMAC2 soap_instantiate_om__ReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline om__ReferenceType * soap_new_om__ReferenceType(struct soap *soap, int n = -1) { return soap_instantiate_om__ReferenceType(soap, n, NULL, NULL, NULL); }

inline om__ReferenceType * soap_new_req_om__ReferenceType(struct soap *soap, std::string& idref) { om__ReferenceType *_p = soap_instantiate_om__ReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ReferenceType::idref = idref; } return _p; }

inline om__ReferenceType * soap_new_set_om__ReferenceType(struct soap *soap, std::string& idref) { om__ReferenceType *_p = soap_instantiate_om__ReferenceType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ReferenceType::idref = idref; } return _p; }

inline void soap_delete_om__ReferenceType(struct soap *soap, om__ReferenceType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ReferenceType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ExperimentParametersType
#define SOAP_TYPE_om_om__ExperimentParametersType (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ExperimentParametersType(struct soap*, const char*, int, const om__ExperimentParametersType *, const char*);
SOAP_FMAC3 om__ExperimentParametersType * SOAP_FMAC4 soap_in_om__ExperimentParametersType(struct soap*, const char*, om__ExperimentParametersType *, const char*);

#ifndef soap_write_om__ExperimentParametersType
#define soap_write_om__ExperimentParametersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ExperimentParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ExperimentParametersType * SOAP_FMAC4 soap_get_om__ExperimentParametersType(struct soap*, om__ExperimentParametersType *, const char*, const char*);

#ifndef soap_read_om__ExperimentParametersType
#define soap_read_om__ExperimentParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ExperimentParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ExperimentParametersType * SOAP_FMAC2 soap_instantiate_om__ExperimentParametersType(struct soap*, int, const char*, const char*, size_t*);

inline om__ExperimentParametersType * soap_new_om__ExperimentParametersType(struct soap *soap, int n = -1) { return soap_instantiate_om__ExperimentParametersType(soap, n, NULL, NULL, NULL); }

inline om__ExperimentParametersType * soap_new_req_om__ExperimentParametersType(struct soap *soap, std::vector<_om__ExperimentParametersType_Environment >& Environment, _om__ExperimentParametersType_Jobs& Jobs) { om__ExperimentParametersType *_p = soap_instantiate_om__ExperimentParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ExperimentParametersType::Environment = Environment; _p->om__ExperimentParametersType::Jobs = Jobs; } return _p; }

inline om__ExperimentParametersType * soap_new_set_om__ExperimentParametersType(struct soap *soap, std::vector<_om__ExperimentParametersType_Environment >& Environment, std::vector<_om__ExperimentParametersType_Presence >*Presence, std::vector<_om__ExperimentParametersType_Absence >*Absence, std::vector<_om__ExperimentParametersType_AlgorithmSettings >*AlgorithmSettings, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*SerializedAlgorithm, _om__ExperimentParametersType_Jobs& Jobs) { om__ExperimentParametersType *_p = soap_instantiate_om__ExperimentParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ExperimentParametersType::Environment = Environment; _p->om__ExperimentParametersType::Presence = Presence; _p->om__ExperimentParametersType::Absence = Absence; _p->om__ExperimentParametersType::AlgorithmSettings = AlgorithmSettings; _p->om__ExperimentParametersType::SerializedAlgorithm = SerializedAlgorithm; _p->om__ExperimentParametersType::Jobs = Jobs; } return _p; }

inline void soap_delete_om__ExperimentParametersType(struct soap *soap, om__ExperimentParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ExperimentParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__SamplingParametersType
#define SOAP_TYPE_om_om__SamplingParametersType (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__SamplingParametersType(struct soap*, const char*, int, const om__SamplingParametersType *, const char*);
SOAP_FMAC3 om__SamplingParametersType * SOAP_FMAC4 soap_in_om__SamplingParametersType(struct soap*, const char*, om__SamplingParametersType *, const char*);

#ifndef soap_write_om__SamplingParametersType
#define soap_write_om__SamplingParametersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SamplingParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SamplingParametersType * SOAP_FMAC4 soap_get_om__SamplingParametersType(struct soap*, om__SamplingParametersType *, const char*, const char*);

#ifndef soap_read_om__SamplingParametersType
#define soap_read_om__SamplingParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__SamplingParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__SamplingParametersType * SOAP_FMAC2 soap_instantiate_om__SamplingParametersType(struct soap*, int, const char*, const char*, size_t*);

inline om__SamplingParametersType * soap_new_om__SamplingParametersType(struct soap *soap, int n = -1) { return soap_instantiate_om__SamplingParametersType(soap, n, NULL, NULL, NULL); }

inline om__SamplingParametersType * soap_new_req_om__SamplingParametersType(struct soap *soap, om__EnvironmentType *Environment, om__SamplingOptionsType *Options) { om__SamplingParametersType *_p = soap_instantiate_om__SamplingParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SamplingParametersType::Environment = Environment; _p->om__SamplingParametersType::Options = Options; } return _p; }

inline om__SamplingParametersType * soap_new_set_om__SamplingParametersType(struct soap *soap, om__EnvironmentType *Environment, om__SamplingOptionsType *Options) { om__SamplingParametersType *_p = soap_instantiate_om__SamplingParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SamplingParametersType::Environment = Environment; _p->om__SamplingParametersType::Options = Options; } return _p; }

inline void soap_delete_om__SamplingParametersType(struct soap *soap, om__SamplingParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__SamplingParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__SamplingOptionsType
#define SOAP_TYPE_om_om__SamplingOptionsType (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__SamplingOptionsType(struct soap*, const char*, int, const om__SamplingOptionsType *, const char*);
SOAP_FMAC3 om__SamplingOptionsType * SOAP_FMAC4 soap_in_om__SamplingOptionsType(struct soap*, const char*, om__SamplingOptionsType *, const char*);

#ifndef soap_write_om__SamplingOptionsType
#define soap_write_om__SamplingOptionsType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SamplingOptionsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SamplingOptionsType * SOAP_FMAC4 soap_get_om__SamplingOptionsType(struct soap*, om__SamplingOptionsType *, const char*, const char*);

#ifndef soap_read_om__SamplingOptionsType
#define soap_read_om__SamplingOptionsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__SamplingOptionsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__SamplingOptionsType * SOAP_FMAC2 soap_instantiate_om__SamplingOptionsType(struct soap*, int, const char*, const char*, size_t*);

inline om__SamplingOptionsType * soap_new_om__SamplingOptionsType(struct soap *soap, int n = -1) { return soap_instantiate_om__SamplingOptionsType(soap, n, NULL, NULL, NULL); }

inline om__SamplingOptionsType * soap_new_req_om__SamplingOptionsType(struct soap *soap, int NumPoints) { om__SamplingOptionsType *_p = soap_instantiate_om__SamplingOptionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SamplingOptionsType::NumPoints = NumPoints; } return _p; }

inline om__SamplingOptionsType * soap_new_set_om__SamplingOptionsType(struct soap *soap, om__OccurrencesFilterType *OccurrencesFilter, int NumPoints, std::string *Label, double *ProportionOfAbsences) { om__SamplingOptionsType *_p = soap_instantiate_om__SamplingOptionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SamplingOptionsType::OccurrencesFilter = OccurrencesFilter; _p->om__SamplingOptionsType::NumPoints = NumPoints; _p->om__SamplingOptionsType::Label = Label; _p->om__SamplingOptionsType::ProportionOfAbsences = ProportionOfAbsences; } return _p; }

inline void soap_delete_om__SamplingOptionsType(struct soap *soap, om__SamplingOptionsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__SamplingOptionsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ModelEvaluationResultType
#define SOAP_TYPE_om_om__ModelEvaluationResultType (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ModelEvaluationResultType(struct soap*, const char*, int, const om__ModelEvaluationResultType *, const char*);
SOAP_FMAC3 om__ModelEvaluationResultType * SOAP_FMAC4 soap_in_om__ModelEvaluationResultType(struct soap*, const char*, om__ModelEvaluationResultType *, const char*);

#ifndef soap_write_om__ModelEvaluationResultType
#define soap_write_om__ModelEvaluationResultType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ModelEvaluationResultType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModelEvaluationResultType * SOAP_FMAC4 soap_get_om__ModelEvaluationResultType(struct soap*, om__ModelEvaluationResultType *, const char*, const char*);

#ifndef soap_read_om__ModelEvaluationResultType
#define soap_read_om__ModelEvaluationResultType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ModelEvaluationResultType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ModelEvaluationResultType * SOAP_FMAC2 soap_instantiate_om__ModelEvaluationResultType(struct soap*, int, const char*, const char*, size_t*);

inline om__ModelEvaluationResultType * soap_new_om__ModelEvaluationResultType(struct soap *soap, int n = -1) { return soap_instantiate_om__ModelEvaluationResultType(soap, n, NULL, NULL, NULL); }

inline om__ModelEvaluationResultType * soap_new_req_om__ModelEvaluationResultType(struct soap *soap, _om__ModelEvaluationResultType_Values& Values) { om__ModelEvaluationResultType *_p = soap_instantiate_om__ModelEvaluationResultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelEvaluationResultType::Values = Values; } return _p; }

inline om__ModelEvaluationResultType * soap_new_set_om__ModelEvaluationResultType(struct soap *soap, _om__ModelEvaluationResultType_Values& Values) { om__ModelEvaluationResultType *_p = soap_instantiate_om__ModelEvaluationResultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelEvaluationResultType::Values = Values; } return _p; }

inline void soap_delete_om__ModelEvaluationResultType(struct soap *soap, om__ModelEvaluationResultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ModelEvaluationResultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ModelEvaluationParametersType
#define SOAP_TYPE_om_om__ModelEvaluationParametersType (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ModelEvaluationParametersType(struct soap*, const char*, int, const om__ModelEvaluationParametersType *, const char*);
SOAP_FMAC3 om__ModelEvaluationParametersType * SOAP_FMAC4 soap_in_om__ModelEvaluationParametersType(struct soap*, const char*, om__ModelEvaluationParametersType *, const char*);

#ifndef soap_write_om__ModelEvaluationParametersType
#define soap_write_om__ModelEvaluationParametersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ModelEvaluationParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModelEvaluationParametersType * SOAP_FMAC4 soap_get_om__ModelEvaluationParametersType(struct soap*, om__ModelEvaluationParametersType *, const char*, const char*);

#ifndef soap_read_om__ModelEvaluationParametersType
#define soap_read_om__ModelEvaluationParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ModelEvaluationParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ModelEvaluationParametersType * SOAP_FMAC2 soap_instantiate_om__ModelEvaluationParametersType(struct soap*, int, const char*, const char*, size_t*);

inline om__ModelEvaluationParametersType * soap_new_om__ModelEvaluationParametersType(struct soap *soap, int n = -1) { return soap_instantiate_om__ModelEvaluationParametersType(soap, n, NULL, NULL, NULL); }

inline om__ModelEvaluationParametersType * soap_new_req_om__ModelEvaluationParametersType(struct soap *soap, om__SamplerType *Sampler, om__SerializedAlgorithmType *Algorithm) { om__ModelEvaluationParametersType *_p = soap_instantiate_om__ModelEvaluationParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelEvaluationParametersType::Sampler = Sampler; _p->om__ModelEvaluationParametersType::Algorithm = Algorithm; } return _p; }

inline om__ModelEvaluationParametersType * soap_new_set_om__ModelEvaluationParametersType(struct soap *soap, om__SamplerType *Sampler, om__SerializedAlgorithmType *Algorithm) { om__ModelEvaluationParametersType *_p = soap_instantiate_om__ModelEvaluationParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelEvaluationParametersType::Sampler = Sampler; _p->om__ModelEvaluationParametersType::Algorithm = Algorithm; } return _p; }

inline void soap_delete_om__ModelEvaluationParametersType(struct soap *soap, om__ModelEvaluationParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ModelEvaluationParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ProjectionParametersType
#define SOAP_TYPE_om_om__ProjectionParametersType (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ProjectionParametersType(struct soap*, const char*, int, const om__ProjectionParametersType *, const char*);
SOAP_FMAC3 om__ProjectionParametersType * SOAP_FMAC4 soap_in_om__ProjectionParametersType(struct soap*, const char*, om__ProjectionParametersType *, const char*);

#ifndef soap_write_om__ProjectionParametersType
#define soap_write_om__ProjectionParametersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ProjectionParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ProjectionParametersType * SOAP_FMAC4 soap_get_om__ProjectionParametersType(struct soap*, om__ProjectionParametersType *, const char*, const char*);

#ifndef soap_read_om__ProjectionParametersType
#define soap_read_om__ProjectionParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ProjectionParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ProjectionParametersType * SOAP_FMAC2 soap_instantiate_om__ProjectionParametersType(struct soap*, int, const char*, const char*, size_t*);

inline om__ProjectionParametersType * soap_new_om__ProjectionParametersType(struct soap *soap, int n = -1) { return soap_instantiate_om__ProjectionParametersType(soap, n, NULL, NULL, NULL); }

inline om__ProjectionParametersType * soap_new_req_om__ProjectionParametersType(struct soap *soap, om__SerializedAlgorithmType *Algorithm, om__EnvironmentType *Environment) { om__ProjectionParametersType *_p = soap_instantiate_om__ProjectionParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ProjectionParametersType::Algorithm = Algorithm; _p->om__ProjectionParametersType::Environment = Environment; } return _p; }

inline om__ProjectionParametersType * soap_new_set_om__ProjectionParametersType(struct soap *soap, om__SerializedAlgorithmType *Algorithm, om__EnvironmentType *Environment, om__MapOutputParametersType *OutputParameters, om__ProjectionStatisticsParametersType *Statistics) { om__ProjectionParametersType *_p = soap_instantiate_om__ProjectionParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ProjectionParametersType::Algorithm = Algorithm; _p->om__ProjectionParametersType::Environment = Environment; _p->om__ProjectionParametersType::OutputParameters = OutputParameters; _p->om__ProjectionParametersType::Statistics = Statistics; } return _p; }

inline void soap_delete_om__ProjectionParametersType(struct soap *soap, om__ProjectionParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ProjectionParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__TestResultEnvelopeType
#define SOAP_TYPE_om_om__TestResultEnvelopeType (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__TestResultEnvelopeType(struct soap*, const char*, int, const om__TestResultEnvelopeType *, const char*);
SOAP_FMAC3 om__TestResultEnvelopeType * SOAP_FMAC4 soap_in_om__TestResultEnvelopeType(struct soap*, const char*, om__TestResultEnvelopeType *, const char*);

#ifndef soap_write_om__TestResultEnvelopeType
#define soap_write_om__TestResultEnvelopeType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestResultEnvelopeType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestResultEnvelopeType * SOAP_FMAC4 soap_get_om__TestResultEnvelopeType(struct soap*, om__TestResultEnvelopeType *, const char*, const char*);

#ifndef soap_read_om__TestResultEnvelopeType
#define soap_read_om__TestResultEnvelopeType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__TestResultEnvelopeType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__TestResultEnvelopeType * SOAP_FMAC2 soap_instantiate_om__TestResultEnvelopeType(struct soap*, int, const char*, const char*, size_t*);

inline om__TestResultEnvelopeType * soap_new_om__TestResultEnvelopeType(struct soap *soap, int n = -1) { return soap_instantiate_om__TestResultEnvelopeType(soap, n, NULL, NULL, NULL); }

inline om__TestResultEnvelopeType * soap_new_req_om__TestResultEnvelopeType(struct soap *soap) { om__TestResultEnvelopeType *_p = soap_instantiate_om__TestResultEnvelopeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline om__TestResultEnvelopeType * soap_new_set_om__TestResultEnvelopeType(struct soap *soap, om__TestResultType *Statistics) { om__TestResultEnvelopeType *_p = soap_instantiate_om__TestResultEnvelopeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__TestResultEnvelopeType::Statistics = Statistics; } return _p; }

inline void soap_delete_om__TestResultEnvelopeType(struct soap *soap, om__TestResultEnvelopeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__TestResultEnvelopeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__TestParametersType
#define SOAP_TYPE_om_om__TestParametersType (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__TestParametersType(struct soap*, const char*, int, const om__TestParametersType *, const char*);
SOAP_FMAC3 om__TestParametersType * SOAP_FMAC4 soap_in_om__TestParametersType(struct soap*, const char*, om__TestParametersType *, const char*);

#ifndef soap_write_om__TestParametersType
#define soap_write_om__TestParametersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestParametersType * SOAP_FMAC4 soap_get_om__TestParametersType(struct soap*, om__TestParametersType *, const char*, const char*);

#ifndef soap_read_om__TestParametersType
#define soap_read_om__TestParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__TestParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__TestParametersType * SOAP_FMAC2 soap_instantiate_om__TestParametersType(struct soap*, int, const char*, const char*, size_t*);

inline om__TestParametersType * soap_new_om__TestParametersType(struct soap *soap, int n = -1) { return soap_instantiate_om__TestParametersType(soap, n, NULL, NULL, NULL); }

inline om__TestParametersType * soap_new_req_om__TestParametersType(struct soap *soap, om__SamplerType *Sampler, om__SerializedAlgorithmType *Algorithm) { om__TestParametersType *_p = soap_instantiate_om__TestParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__TestParametersType::Sampler = Sampler; _p->om__TestParametersType::Algorithm = Algorithm; } return _p; }

inline om__TestParametersType * soap_new_set_om__TestParametersType(struct soap *soap, om__SamplerType *Sampler, om__SerializedAlgorithmType *Algorithm, om__TestOptionsType *Statistics) { om__TestParametersType *_p = soap_instantiate_om__TestParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__TestParametersType::Sampler = Sampler; _p->om__TestParametersType::Algorithm = Algorithm; _p->om__TestParametersType::Statistics = Statistics; } return _p; }

inline void soap_delete_om__TestParametersType(struct soap *soap, om__TestParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__TestParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__SerializedModelType
#define SOAP_TYPE_om_om__SerializedModelType (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__SerializedModelType(struct soap*, const char*, int, const om__SerializedModelType *, const char*);
SOAP_FMAC3 om__SerializedModelType * SOAP_FMAC4 soap_in_om__SerializedModelType(struct soap*, const char*, om__SerializedModelType *, const char*);

#ifndef soap_write_om__SerializedModelType
#define soap_write_om__SerializedModelType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SerializedModelType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SerializedModelType * SOAP_FMAC4 soap_get_om__SerializedModelType(struct soap*, om__SerializedModelType *, const char*, const char*);

#ifndef soap_read_om__SerializedModelType
#define soap_read_om__SerializedModelType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__SerializedModelType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__SerializedModelType * SOAP_FMAC2 soap_instantiate_om__SerializedModelType(struct soap*, int, const char*, const char*, size_t*);

inline om__SerializedModelType * soap_new_om__SerializedModelType(struct soap *soap, int n = -1) { return soap_instantiate_om__SerializedModelType(soap, n, NULL, NULL, NULL); }

inline om__SerializedModelType * soap_new_req_om__SerializedModelType(struct soap *soap, om__SamplerType *Sampler, om__SerializedAlgorithmType *Algorithm) { om__SerializedModelType *_p = soap_instantiate_om__SerializedModelType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SerializedModelType::Sampler = Sampler; _p->om__SerializedModelType::Algorithm = Algorithm; } return _p; }

inline om__SerializedModelType * soap_new_set_om__SerializedModelType(struct soap *soap, om__SamplerType *Sampler, om__SerializedAlgorithmType *Algorithm, om__TestResultType *Statistics) { om__SerializedModelType *_p = soap_instantiate_om__SerializedModelType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SerializedModelType::Sampler = Sampler; _p->om__SerializedModelType::Algorithm = Algorithm; _p->om__SerializedModelType::Statistics = Statistics; } return _p; }

inline void soap_delete_om__SerializedModelType(struct soap *soap, om__SerializedModelType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__SerializedModelType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ModelEnvelopeType
#define SOAP_TYPE_om_om__ModelEnvelopeType (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ModelEnvelopeType(struct soap*, const char*, int, const om__ModelEnvelopeType *, const char*);
SOAP_FMAC3 om__ModelEnvelopeType * SOAP_FMAC4 soap_in_om__ModelEnvelopeType(struct soap*, const char*, om__ModelEnvelopeType *, const char*);

#ifndef soap_write_om__ModelEnvelopeType
#define soap_write_om__ModelEnvelopeType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ModelEnvelopeType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModelEnvelopeType * SOAP_FMAC4 soap_get_om__ModelEnvelopeType(struct soap*, om__ModelEnvelopeType *, const char*, const char*);

#ifndef soap_read_om__ModelEnvelopeType
#define soap_read_om__ModelEnvelopeType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ModelEnvelopeType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ModelEnvelopeType * SOAP_FMAC2 soap_instantiate_om__ModelEnvelopeType(struct soap*, int, const char*, const char*, size_t*);

inline om__ModelEnvelopeType * soap_new_om__ModelEnvelopeType(struct soap *soap, int n = -1) { return soap_instantiate_om__ModelEnvelopeType(soap, n, NULL, NULL, NULL); }

inline om__ModelEnvelopeType * soap_new_req_om__ModelEnvelopeType(struct soap *soap, om__SerializedModelType *SerializedModel) { om__ModelEnvelopeType *_p = soap_instantiate_om__ModelEnvelopeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelEnvelopeType::SerializedModel = SerializedModel; } return _p; }

inline om__ModelEnvelopeType * soap_new_set_om__ModelEnvelopeType(struct soap *soap, om__SerializedModelType *SerializedModel) { om__ModelEnvelopeType *_p = soap_instantiate_om__ModelEnvelopeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelEnvelopeType::SerializedModel = SerializedModel; } return _p; }

inline void soap_delete_om__ModelEnvelopeType(struct soap *soap, om__ModelEnvelopeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ModelEnvelopeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ModelOptionsType
#define SOAP_TYPE_om_om__ModelOptionsType (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ModelOptionsType(struct soap*, const char*, int, const om__ModelOptionsType *, const char*);
SOAP_FMAC3 om__ModelOptionsType * SOAP_FMAC4 soap_in_om__ModelOptionsType(struct soap*, const char*, om__ModelOptionsType *, const char*);

#ifndef soap_write_om__ModelOptionsType
#define soap_write_om__ModelOptionsType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ModelOptionsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModelOptionsType * SOAP_FMAC4 soap_get_om__ModelOptionsType(struct soap*, om__ModelOptionsType *, const char*, const char*);

#ifndef soap_read_om__ModelOptionsType
#define soap_read_om__ModelOptionsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ModelOptionsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ModelOptionsType * SOAP_FMAC2 soap_instantiate_om__ModelOptionsType(struct soap*, int, const char*, const char*, size_t*);

inline om__ModelOptionsType * soap_new_om__ModelOptionsType(struct soap *soap, int n = -1) { return soap_instantiate_om__ModelOptionsType(soap, n, NULL, NULL, NULL); }

inline om__ModelOptionsType * soap_new_req_om__ModelOptionsType(struct soap *soap) { om__ModelOptionsType *_p = soap_instantiate_om__ModelOptionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline om__ModelOptionsType * soap_new_set_om__ModelOptionsType(struct soap *soap, om__OccurrencesFilterType *OccurrencesFilter) { om__ModelOptionsType *_p = soap_instantiate_om__ModelOptionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelOptionsType::OccurrencesFilter = OccurrencesFilter; } return _p; }

inline void soap_delete_om__ModelOptionsType(struct soap *soap, om__ModelOptionsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ModelOptionsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__OccurrencesFilterType
#define SOAP_TYPE_om_om__OccurrencesFilterType (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__OccurrencesFilterType(struct soap*, const char*, int, const om__OccurrencesFilterType *, const char*);
SOAP_FMAC3 om__OccurrencesFilterType * SOAP_FMAC4 soap_in_om__OccurrencesFilterType(struct soap*, const char*, om__OccurrencesFilterType *, const char*);

#ifndef soap_write_om__OccurrencesFilterType
#define soap_write_om__OccurrencesFilterType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:OccurrencesFilterType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__OccurrencesFilterType * SOAP_FMAC4 soap_get_om__OccurrencesFilterType(struct soap*, om__OccurrencesFilterType *, const char*, const char*);

#ifndef soap_read_om__OccurrencesFilterType
#define soap_read_om__OccurrencesFilterType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__OccurrencesFilterType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__OccurrencesFilterType * SOAP_FMAC2 soap_instantiate_om__OccurrencesFilterType(struct soap*, int, const char*, const char*, size_t*);

inline om__OccurrencesFilterType * soap_new_om__OccurrencesFilterType(struct soap *soap, int n = -1) { return soap_instantiate_om__OccurrencesFilterType(soap, n, NULL, NULL, NULL); }

inline om__OccurrencesFilterType * soap_new_req_om__OccurrencesFilterType(struct soap *soap, int __union_OccurrencesFilterType, union _om__union_OccurrencesFilterType& union_OccurrencesFilterType) { om__OccurrencesFilterType *_p = soap_instantiate_om__OccurrencesFilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__OccurrencesFilterType::__union_OccurrencesFilterType = __union_OccurrencesFilterType; _p->om__OccurrencesFilterType::union_OccurrencesFilterType = union_OccurrencesFilterType; } return _p; }

inline om__OccurrencesFilterType * soap_new_set_om__OccurrencesFilterType(struct soap *soap, int __union_OccurrencesFilterType, union _om__union_OccurrencesFilterType& union_OccurrencesFilterType) { om__OccurrencesFilterType *_p = soap_instantiate_om__OccurrencesFilterType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__OccurrencesFilterType::__union_OccurrencesFilterType = __union_OccurrencesFilterType; _p->om__OccurrencesFilterType::union_OccurrencesFilterType = union_OccurrencesFilterType; } return _p; }

inline void soap_delete_om__OccurrencesFilterType(struct soap *soap, om__OccurrencesFilterType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__OccurrencesFilterType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ModelParametersType
#define SOAP_TYPE_om_om__ModelParametersType (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ModelParametersType(struct soap*, const char*, int, const om__ModelParametersType *, const char*);
SOAP_FMAC3 om__ModelParametersType * SOAP_FMAC4 soap_in_om__ModelParametersType(struct soap*, const char*, om__ModelParametersType *, const char*);

#ifndef soap_write_om__ModelParametersType
#define soap_write_om__ModelParametersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ModelParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModelParametersType * SOAP_FMAC4 soap_get_om__ModelParametersType(struct soap*, om__ModelParametersType *, const char*, const char*);

#ifndef soap_read_om__ModelParametersType
#define soap_read_om__ModelParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ModelParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ModelParametersType * SOAP_FMAC2 soap_instantiate_om__ModelParametersType(struct soap*, int, const char*, const char*, size_t*);

inline om__ModelParametersType * soap_new_om__ModelParametersType(struct soap *soap, int n = -1) { return soap_instantiate_om__ModelParametersType(soap, n, NULL, NULL, NULL); }

inline om__ModelParametersType * soap_new_req_om__ModelParametersType(struct soap *soap, om__SamplerType *Sampler, om__BasicAlgorithmDefinitionType *Algorithm) { om__ModelParametersType *_p = soap_instantiate_om__ModelParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelParametersType::Sampler = Sampler; _p->om__ModelParametersType::Algorithm = Algorithm; } return _p; }

inline om__ModelParametersType * soap_new_set_om__ModelParametersType(struct soap *soap, om__SamplerType *Sampler, om__BasicAlgorithmDefinitionType *Algorithm, om__ModelOptionsType *Options) { om__ModelParametersType *_p = soap_instantiate_om__ModelParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModelParametersType::Sampler = Sampler; _p->om__ModelParametersType::Algorithm = Algorithm; _p->om__ModelParametersType::Options = Options; } return _p; }

inline void soap_delete_om__ModelParametersType(struct soap *soap, om__ModelParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ModelParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__MapOutputParametersType
#define SOAP_TYPE_om_om__MapOutputParametersType (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__MapOutputParametersType(struct soap*, const char*, int, const om__MapOutputParametersType *, const char*);
SOAP_FMAC3 om__MapOutputParametersType * SOAP_FMAC4 soap_in_om__MapOutputParametersType(struct soap*, const char*, om__MapOutputParametersType *, const char*);

#ifndef soap_write_om__MapOutputParametersType
#define soap_write_om__MapOutputParametersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:MapOutputParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__MapOutputParametersType * SOAP_FMAC4 soap_get_om__MapOutputParametersType(struct soap*, om__MapOutputParametersType *, const char*, const char*);

#ifndef soap_read_om__MapOutputParametersType
#define soap_read_om__MapOutputParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__MapOutputParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__MapOutputParametersType * SOAP_FMAC2 soap_instantiate_om__MapOutputParametersType(struct soap*, int, const char*, const char*, size_t*);

inline om__MapOutputParametersType * soap_new_om__MapOutputParametersType(struct soap *soap, int n = -1) { return soap_instantiate_om__MapOutputParametersType(soap, n, NULL, NULL, NULL); }

inline om__MapOutputParametersType * soap_new_req_om__MapOutputParametersType(struct soap *soap, om__BasicLayerType *TemplateLayer) { om__MapOutputParametersType *_p = soap_instantiate_om__MapOutputParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__MapOutputParametersType::TemplateLayer = TemplateLayer; } return _p; }

inline om__MapOutputParametersType * soap_new_set_om__MapOutputParametersType(struct soap *soap, om__BasicLayerType *TemplateLayer, std::string *FileType) { om__MapOutputParametersType *_p = soap_instantiate_om__MapOutputParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__MapOutputParametersType::TemplateLayer = TemplateLayer; _p->om__MapOutputParametersType::FileType = FileType; } return _p; }

inline void soap_delete_om__MapOutputParametersType(struct soap *soap, om__MapOutputParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__MapOutputParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__AreaStatisticsType
#define SOAP_TYPE_om_om__AreaStatisticsType (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AreaStatisticsType(struct soap*, const char*, int, const om__AreaStatisticsType *, const char*);
SOAP_FMAC3 om__AreaStatisticsType * SOAP_FMAC4 soap_in_om__AreaStatisticsType(struct soap*, const char*, om__AreaStatisticsType *, const char*);

#ifndef soap_write_om__AreaStatisticsType
#define soap_write_om__AreaStatisticsType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AreaStatisticsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__AreaStatisticsType * SOAP_FMAC4 soap_get_om__AreaStatisticsType(struct soap*, om__AreaStatisticsType *, const char*, const char*);

#ifndef soap_read_om__AreaStatisticsType
#define soap_read_om__AreaStatisticsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__AreaStatisticsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__AreaStatisticsType * SOAP_FMAC2 soap_instantiate_om__AreaStatisticsType(struct soap*, int, const char*, const char*, size_t*);

inline om__AreaStatisticsType * soap_new_om__AreaStatisticsType(struct soap *soap, int n = -1) { return soap_instantiate_om__AreaStatisticsType(soap, n, NULL, NULL, NULL); }

inline om__AreaStatisticsType * soap_new_req_om__AreaStatisticsType(struct soap *soap, int TotalCells, int CellsPredicted, double PredictionThreshold) { om__AreaStatisticsType *_p = soap_instantiate_om__AreaStatisticsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AreaStatisticsType::TotalCells = TotalCells; _p->om__AreaStatisticsType::CellsPredicted = CellsPredicted; _p->om__AreaStatisticsType::PredictionThreshold = PredictionThreshold; } return _p; }

inline om__AreaStatisticsType * soap_new_set_om__AreaStatisticsType(struct soap *soap, int TotalCells, int CellsPredicted, double PredictionThreshold) { om__AreaStatisticsType *_p = soap_instantiate_om__AreaStatisticsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AreaStatisticsType::TotalCells = TotalCells; _p->om__AreaStatisticsType::CellsPredicted = CellsPredicted; _p->om__AreaStatisticsType::PredictionThreshold = PredictionThreshold; } return _p; }

inline void soap_delete_om__AreaStatisticsType(struct soap *soap, om__AreaStatisticsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__AreaStatisticsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ProjectionEnvelopeType
#define SOAP_TYPE_om_om__ProjectionEnvelopeType (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ProjectionEnvelopeType(struct soap*, const char*, int, const om__ProjectionEnvelopeType *, const char*);
SOAP_FMAC3 om__ProjectionEnvelopeType * SOAP_FMAC4 soap_in_om__ProjectionEnvelopeType(struct soap*, const char*, om__ProjectionEnvelopeType *, const char*);

#ifndef soap_write_om__ProjectionEnvelopeType
#define soap_write_om__ProjectionEnvelopeType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ProjectionEnvelopeType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ProjectionEnvelopeType * SOAP_FMAC4 soap_get_om__ProjectionEnvelopeType(struct soap*, om__ProjectionEnvelopeType *, const char*, const char*);

#ifndef soap_read_om__ProjectionEnvelopeType
#define soap_read_om__ProjectionEnvelopeType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ProjectionEnvelopeType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ProjectionEnvelopeType * SOAP_FMAC2 soap_instantiate_om__ProjectionEnvelopeType(struct soap*, int, const char*, const char*, size_t*);

inline om__ProjectionEnvelopeType * soap_new_om__ProjectionEnvelopeType(struct soap *soap, int n = -1) { return soap_instantiate_om__ProjectionEnvelopeType(soap, n, NULL, NULL, NULL); }

inline om__ProjectionEnvelopeType * soap_new_req_om__ProjectionEnvelopeType(struct soap *soap, om__AreaStatisticsType *AreaStatistics) { om__ProjectionEnvelopeType *_p = soap_instantiate_om__ProjectionEnvelopeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ProjectionEnvelopeType::AreaStatistics = AreaStatistics; } return _p; }

inline om__ProjectionEnvelopeType * soap_new_set_om__ProjectionEnvelopeType(struct soap *soap, om__AreaStatisticsType *AreaStatistics) { om__ProjectionEnvelopeType *_p = soap_instantiate_om__ProjectionEnvelopeType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ProjectionEnvelopeType::AreaStatistics = AreaStatistics; } return _p; }

inline void soap_delete_om__ProjectionEnvelopeType(struct soap *soap, om__ProjectionEnvelopeType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ProjectionEnvelopeType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ProjectionStatisticsParametersType
#define SOAP_TYPE_om_om__ProjectionStatisticsParametersType (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ProjectionStatisticsParametersType(struct soap*, const char*, int, const om__ProjectionStatisticsParametersType *, const char*);
SOAP_FMAC3 om__ProjectionStatisticsParametersType * SOAP_FMAC4 soap_in_om__ProjectionStatisticsParametersType(struct soap*, const char*, om__ProjectionStatisticsParametersType *, const char*);

#ifndef soap_write_om__ProjectionStatisticsParametersType
#define soap_write_om__ProjectionStatisticsParametersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ProjectionStatisticsParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ProjectionStatisticsParametersType * SOAP_FMAC4 soap_get_om__ProjectionStatisticsParametersType(struct soap*, om__ProjectionStatisticsParametersType *, const char*, const char*);

#ifndef soap_read_om__ProjectionStatisticsParametersType
#define soap_read_om__ProjectionStatisticsParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ProjectionStatisticsParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ProjectionStatisticsParametersType * SOAP_FMAC2 soap_instantiate_om__ProjectionStatisticsParametersType(struct soap*, int, const char*, const char*, size_t*);

inline om__ProjectionStatisticsParametersType * soap_new_om__ProjectionStatisticsParametersType(struct soap *soap, int n = -1) { return soap_instantiate_om__ProjectionStatisticsParametersType(soap, n, NULL, NULL, NULL); }

inline om__ProjectionStatisticsParametersType * soap_new_req_om__ProjectionStatisticsParametersType(struct soap *soap) { om__ProjectionStatisticsParametersType *_p = soap_instantiate_om__ProjectionStatisticsParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline om__ProjectionStatisticsParametersType * soap_new_set_om__ProjectionStatisticsParametersType(struct soap *soap, _om__ProjectionStatisticsParametersType_AreaStatistics *AreaStatistics) { om__ProjectionStatisticsParametersType *_p = soap_instantiate_om__ProjectionStatisticsParametersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ProjectionStatisticsParametersType::AreaStatistics = AreaStatistics; } return _p; }

inline void soap_delete_om__ProjectionStatisticsParametersType(struct soap *soap, om__ProjectionStatisticsParametersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ProjectionStatisticsParametersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__TestResultType
#define SOAP_TYPE_om_om__TestResultType (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__TestResultType(struct soap*, const char*, int, const om__TestResultType *, const char*);
SOAP_FMAC3 om__TestResultType * SOAP_FMAC4 soap_in_om__TestResultType(struct soap*, const char*, om__TestResultType *, const char*);

#ifndef soap_write_om__TestResultType
#define soap_write_om__TestResultType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestResultType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestResultType * SOAP_FMAC4 soap_get_om__TestResultType(struct soap*, om__TestResultType *, const char*, const char*);

#ifndef soap_read_om__TestResultType
#define soap_read_om__TestResultType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__TestResultType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__TestResultType * SOAP_FMAC2 soap_instantiate_om__TestResultType(struct soap*, int, const char*, const char*, size_t*);

inline om__TestResultType * soap_new_om__TestResultType(struct soap *soap, int n = -1) { return soap_instantiate_om__TestResultType(soap, n, NULL, NULL, NULL); }

inline om__TestResultType * soap_new_req_om__TestResultType(struct soap *soap) { om__TestResultType *_p = soap_instantiate_om__TestResultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline om__TestResultType * soap_new_set_om__TestResultType(struct soap *soap, _om__TestResultType_ConfusionMatrix *ConfusionMatrix, _om__TestResultType_RocCurve *RocCurve) { om__TestResultType *_p = soap_instantiate_om__TestResultType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__TestResultType::ConfusionMatrix = ConfusionMatrix; _p->om__TestResultType::RocCurve = RocCurve; } return _p; }

inline void soap_delete_om__TestResultType(struct soap *soap, om__TestResultType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__TestResultType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__TestOptionsType
#define SOAP_TYPE_om_om__TestOptionsType (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__TestOptionsType(struct soap*, const char*, int, const om__TestOptionsType *, const char*);
SOAP_FMAC3 om__TestOptionsType * SOAP_FMAC4 soap_in_om__TestOptionsType(struct soap*, const char*, om__TestOptionsType *, const char*);

#ifndef soap_write_om__TestOptionsType
#define soap_write_om__TestOptionsType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:TestOptionsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestOptionsType * SOAP_FMAC4 soap_get_om__TestOptionsType(struct soap*, om__TestOptionsType *, const char*, const char*);

#ifndef soap_read_om__TestOptionsType
#define soap_read_om__TestOptionsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__TestOptionsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__TestOptionsType * SOAP_FMAC2 soap_instantiate_om__TestOptionsType(struct soap*, int, const char*, const char*, size_t*);

inline om__TestOptionsType * soap_new_om__TestOptionsType(struct soap *soap, int n = -1) { return soap_instantiate_om__TestOptionsType(soap, n, NULL, NULL, NULL); }

inline om__TestOptionsType * soap_new_req_om__TestOptionsType(struct soap *soap) { om__TestOptionsType *_p = soap_instantiate_om__TestOptionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline om__TestOptionsType * soap_new_set_om__TestOptionsType(struct soap *soap, _om__TestOptionsType_ConfusionMatrix *ConfusionMatrix, _om__TestOptionsType_RocCurve *RocCurve) { om__TestOptionsType *_p = soap_instantiate_om__TestOptionsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__TestOptionsType::ConfusionMatrix = ConfusionMatrix; _p->om__TestOptionsType::RocCurve = RocCurve; } return _p; }

inline void soap_delete_om__TestOptionsType(struct soap *soap, om__TestOptionsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__TestOptionsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__NormalizationType
#define SOAP_TYPE_om_om__NormalizationType (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__NormalizationType(struct soap*, const char*, int, const om__NormalizationType *, const char*);
SOAP_FMAC3 om__NormalizationType * SOAP_FMAC4 soap_in_om__NormalizationType(struct soap*, const char*, om__NormalizationType *, const char*);

#ifndef soap_write_om__NormalizationType
#define soap_write_om__NormalizationType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:NormalizationType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__NormalizationType * SOAP_FMAC4 soap_get_om__NormalizationType(struct soap*, om__NormalizationType *, const char*, const char*);

#ifndef soap_read_om__NormalizationType
#define soap_read_om__NormalizationType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__NormalizationType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__NormalizationType * SOAP_FMAC2 soap_instantiate_om__NormalizationType(struct soap*, int, const char*, const char*, size_t*);

inline om__NormalizationType * soap_new_om__NormalizationType(struct soap *soap, int n = -1) { return soap_instantiate_om__NormalizationType(soap, n, NULL, NULL, NULL); }

inline om__NormalizationType * soap_new_req_om__NormalizationType(struct soap *soap) { om__NormalizationType *_p = soap_instantiate_om__NormalizationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline om__NormalizationType * soap_new_set_om__NormalizationType(struct soap *soap, std::string *Class, bool *UseLayerAsRef, double *Min, double *Max, std::string *Scales, std::string *Offsets, std::string *Mean, std::string *StdDev) { om__NormalizationType *_p = soap_instantiate_om__NormalizationType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__NormalizationType::Class = Class; _p->om__NormalizationType::UseLayerAsRef = UseLayerAsRef; _p->om__NormalizationType::Min = Min; _p->om__NormalizationType::Max = Max; _p->om__NormalizationType::Scales = Scales; _p->om__NormalizationType::Offsets = Offsets; _p->om__NormalizationType::Mean = Mean; _p->om__NormalizationType::StdDev = StdDev; } return _p; }

inline void soap_delete_om__NormalizationType(struct soap *soap, om__NormalizationType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__NormalizationType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__SamplerType
#define SOAP_TYPE_om_om__SamplerType (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__SamplerType(struct soap*, const char*, int, const om__SamplerType *, const char*);
SOAP_FMAC3 om__SamplerType * SOAP_FMAC4 soap_in_om__SamplerType(struct soap*, const char*, om__SamplerType *, const char*);

#ifndef soap_write_om__SamplerType
#define soap_write_om__SamplerType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SamplerType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SamplerType * SOAP_FMAC4 soap_get_om__SamplerType(struct soap*, om__SamplerType *, const char*, const char*);

#ifndef soap_read_om__SamplerType
#define soap_read_om__SamplerType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__SamplerType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__SamplerType * SOAP_FMAC2 soap_instantiate_om__SamplerType(struct soap*, int, const char*, const char*, size_t*);

inline om__SamplerType * soap_new_om__SamplerType(struct soap *soap, int n = -1) { return soap_instantiate_om__SamplerType(soap, n, NULL, NULL, NULL); }

inline om__SamplerType * soap_new_req_om__SamplerType(struct soap *soap, om__EnvironmentType *Environment) { om__SamplerType *_p = soap_instantiate_om__SamplerType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SamplerType::Environment = Environment; } return _p; }

inline om__SamplerType * soap_new_set_om__SamplerType(struct soap *soap, om__EnvironmentType *Environment, om__OccurrencesType *Presence, om__OccurrencesType *Absence, om__OccurrencesType *Absence_) { om__SamplerType *_p = soap_instantiate_om__SamplerType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SamplerType::Environment = Environment; _p->om__SamplerType::Presence = Presence; _p->om__SamplerType::Absence = Absence; _p->om__SamplerType::Absence_ = Absence_; } return _p; }

inline void soap_delete_om__SamplerType(struct soap *soap, om__SamplerType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__SamplerType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__OccurrencesType
#define SOAP_TYPE_om_om__OccurrencesType (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__OccurrencesType(struct soap*, const char*, int, const om__OccurrencesType *, const char*);
SOAP_FMAC3 om__OccurrencesType * SOAP_FMAC4 soap_in_om__OccurrencesType(struct soap*, const char*, om__OccurrencesType *, const char*);

#ifndef soap_write_om__OccurrencesType
#define soap_write_om__OccurrencesType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:OccurrencesType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__OccurrencesType * SOAP_FMAC4 soap_get_om__OccurrencesType(struct soap*, om__OccurrencesType *, const char*, const char*);

#ifndef soap_read_om__OccurrencesType
#define soap_read_om__OccurrencesType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__OccurrencesType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__OccurrencesType * SOAP_FMAC2 soap_instantiate_om__OccurrencesType(struct soap*, int, const char*, const char*, size_t*);

inline om__OccurrencesType * soap_new_om__OccurrencesType(struct soap *soap, int n = -1) { return soap_instantiate_om__OccurrencesType(soap, n, NULL, NULL, NULL); }

inline om__OccurrencesType * soap_new_req_om__OccurrencesType(struct soap *soap, std::vector<_om__OccurrencesType_Point >& Point) { om__OccurrencesType *_p = soap_instantiate_om__OccurrencesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__OccurrencesType::Point = Point; } return _p; }

inline om__OccurrencesType * soap_new_set_om__OccurrencesType(struct soap *soap, std::string *CoordinateSystem, std::vector<_om__OccurrencesType_Point >& Point, int *Count, std::string *Label) { om__OccurrencesType *_p = soap_instantiate_om__OccurrencesType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__OccurrencesType::CoordinateSystem = CoordinateSystem; _p->om__OccurrencesType::Point = Point; _p->om__OccurrencesType::Count = Count; _p->om__OccurrencesType::Label = Label; } return _p; }

inline void soap_delete_om__OccurrencesType(struct soap *soap, om__OccurrencesType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__OccurrencesType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__EnvironmentType
#define SOAP_TYPE_om_om__EnvironmentType (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__EnvironmentType(struct soap*, const char*, int, const om__EnvironmentType *, const char*);
SOAP_FMAC3 om__EnvironmentType * SOAP_FMAC4 soap_in_om__EnvironmentType(struct soap*, const char*, om__EnvironmentType *, const char*);

#ifndef soap_write_om__EnvironmentType
#define soap_write_om__EnvironmentType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:EnvironmentType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__EnvironmentType * SOAP_FMAC4 soap_get_om__EnvironmentType(struct soap*, om__EnvironmentType *, const char*, const char*);

#ifndef soap_read_om__EnvironmentType
#define soap_read_om__EnvironmentType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__EnvironmentType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__EnvironmentType * SOAP_FMAC2 soap_instantiate_om__EnvironmentType(struct soap*, int, const char*, const char*, size_t*);

inline om__EnvironmentType * soap_new_om__EnvironmentType(struct soap *soap, int n = -1) { return soap_instantiate_om__EnvironmentType(soap, n, NULL, NULL, NULL); }

inline om__EnvironmentType * soap_new_req_om__EnvironmentType(struct soap *soap, std::vector<om__ModellingLayerType * >& Map, om__BasicLayerType *Mask) { om__EnvironmentType *_p = soap_instantiate_om__EnvironmentType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__EnvironmentType::Map = Map; _p->om__EnvironmentType::Mask = Mask; } return _p; }

inline om__EnvironmentType * soap_new_set_om__EnvironmentType(struct soap *soap, std::vector<om__ModellingLayerType * >& Map, om__BasicLayerType *Mask, int *NumLayers) { om__EnvironmentType *_p = soap_instantiate_om__EnvironmentType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__EnvironmentType::Map = Map; _p->om__EnvironmentType::Mask = Mask; _p->om__EnvironmentType::NumLayers = NumLayers; } return _p; }

inline void soap_delete_om__EnvironmentType(struct soap *soap, om__EnvironmentType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__EnvironmentType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__LayersGroupType
#define SOAP_TYPE_om_om__LayersGroupType (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__LayersGroupType(struct soap*, const char*, int, const om__LayersGroupType *, const char*);
SOAP_FMAC3 om__LayersGroupType * SOAP_FMAC4 soap_in_om__LayersGroupType(struct soap*, const char*, om__LayersGroupType *, const char*);

#ifndef soap_write_om__LayersGroupType
#define soap_write_om__LayersGroupType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:LayersGroupType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__LayersGroupType * SOAP_FMAC4 soap_get_om__LayersGroupType(struct soap*, om__LayersGroupType *, const char*, const char*);

#ifndef soap_read_om__LayersGroupType
#define soap_read_om__LayersGroupType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__LayersGroupType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__LayersGroupType * SOAP_FMAC2 soap_instantiate_om__LayersGroupType(struct soap*, int, const char*, const char*, size_t*);

inline om__LayersGroupType * soap_new_om__LayersGroupType(struct soap *soap, int n = -1) { return soap_instantiate_om__LayersGroupType(soap, n, NULL, NULL, NULL); }

inline om__LayersGroupType * soap_new_req_om__LayersGroupType(struct soap *soap, std::string& Label, std::string& Id) { om__LayersGroupType *_p = soap_instantiate_om__LayersGroupType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__LayersGroupType::Label = Label; _p->om__LayersGroupType::Id = Id; } return _p; }

inline om__LayersGroupType * soap_new_set_om__LayersGroupType(struct soap *soap, std::string& Label, std::vector<om__LayersGroupType * >& LayersGroup, std::vector<om__LayerMetadataType * >& Layer, std::string& Id) { om__LayersGroupType *_p = soap_instantiate_om__LayersGroupType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__LayersGroupType::Label = Label; _p->om__LayersGroupType::LayersGroup = LayersGroup; _p->om__LayersGroupType::Layer = Layer; _p->om__LayersGroupType::Id = Id; } return _p; }

inline void soap_delete_om__LayersGroupType(struct soap *soap, om__LayersGroupType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__LayersGroupType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__LayerMetadataType
#define SOAP_TYPE_om_om__LayerMetadataType (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__LayerMetadataType(struct soap*, const char*, int, const om__LayerMetadataType *, const char*);
SOAP_FMAC3 om__LayerMetadataType * SOAP_FMAC4 soap_in_om__LayerMetadataType(struct soap*, const char*, om__LayerMetadataType *, const char*);

#ifndef soap_write_om__LayerMetadataType
#define soap_write_om__LayerMetadataType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:LayerMetadataType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__LayerMetadataType * SOAP_FMAC4 soap_get_om__LayerMetadataType(struct soap*, om__LayerMetadataType *, const char*, const char*);

#ifndef soap_read_om__LayerMetadataType
#define soap_read_om__LayerMetadataType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__LayerMetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__LayerMetadataType * SOAP_FMAC2 soap_instantiate_om__LayerMetadataType(struct soap*, int, const char*, const char*, size_t*);

inline om__LayerMetadataType * soap_new_om__LayerMetadataType(struct soap *soap, int n = -1) { return soap_instantiate_om__LayerMetadataType(soap, n, NULL, NULL, NULL); }

inline om__LayerMetadataType * soap_new_req_om__LayerMetadataType(struct soap *soap, std::string& Id2) { om__LayerMetadataType *_p = soap_instantiate_om__LayerMetadataType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__BasicLayerType::Id = Id2; } return _p; }

inline om__LayerMetadataType * soap_new_set_om__LayerMetadataType(struct soap *soap, std::string *Label, bool *HasProjection, bool *IsCategorical1, double *Min1, double *Max1, std::string& Id2) { om__LayerMetadataType *_p = soap_instantiate_om__LayerMetadataType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__LayerMetadataType::Label = Label; _p->om__LayerMetadataType::HasProjection = HasProjection; _p->om__ModellingLayerType::IsCategorical = IsCategorical1; _p->om__ModellingLayerType::Min = Min1; _p->om__ModellingLayerType::Max = Max1; _p->om__BasicLayerType::Id = Id2; } return _p; }

inline void soap_delete_om__LayerMetadataType(struct soap *soap, om__LayerMetadataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__LayerMetadataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__ModellingLayerType
#define SOAP_TYPE_om_om__ModellingLayerType (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__ModellingLayerType(struct soap*, const char*, int, const om__ModellingLayerType *, const char*);
SOAP_FMAC3 om__ModellingLayerType * SOAP_FMAC4 soap_in_om__ModellingLayerType(struct soap*, const char*, om__ModellingLayerType *, const char*);

#ifndef soap_write_om__ModellingLayerType
#define soap_write_om__ModellingLayerType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:ModellingLayerType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModellingLayerType * SOAP_FMAC4 soap_get_om__ModellingLayerType(struct soap*, om__ModellingLayerType *, const char*, const char*);

#ifndef soap_read_om__ModellingLayerType
#define soap_read_om__ModellingLayerType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__ModellingLayerType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__ModellingLayerType * SOAP_FMAC2 soap_instantiate_om__ModellingLayerType(struct soap*, int, const char*, const char*, size_t*);

inline om__ModellingLayerType * soap_new_om__ModellingLayerType(struct soap *soap, int n = -1) { return soap_instantiate_om__ModellingLayerType(soap, n, NULL, NULL, NULL); }

inline om__ModellingLayerType * soap_new_req_om__ModellingLayerType(struct soap *soap, std::string& Id1) { om__ModellingLayerType *_p = soap_instantiate_om__ModellingLayerType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__BasicLayerType::Id = Id1; } return _p; }

inline om__ModellingLayerType * soap_new_set_om__ModellingLayerType(struct soap *soap, bool *IsCategorical, double *Min, double *Max, std::string& Id1) { om__ModellingLayerType *_p = soap_instantiate_om__ModellingLayerType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__ModellingLayerType::IsCategorical = IsCategorical; _p->om__ModellingLayerType::Min = Min; _p->om__ModellingLayerType::Max = Max; _p->om__BasicLayerType::Id = Id1; } return _p; }

inline void soap_delete_om__ModellingLayerType(struct soap *soap, om__ModellingLayerType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__ModellingLayerType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__BasicLayerType
#define SOAP_TYPE_om_om__BasicLayerType (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__BasicLayerType(struct soap*, const char*, int, const om__BasicLayerType *, const char*);
SOAP_FMAC3 om__BasicLayerType * SOAP_FMAC4 soap_in_om__BasicLayerType(struct soap*, const char*, om__BasicLayerType *, const char*);

#ifndef soap_write_om__BasicLayerType
#define soap_write_om__BasicLayerType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:BasicLayerType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__BasicLayerType * SOAP_FMAC4 soap_get_om__BasicLayerType(struct soap*, om__BasicLayerType *, const char*, const char*);

#ifndef soap_read_om__BasicLayerType
#define soap_read_om__BasicLayerType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__BasicLayerType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__BasicLayerType * SOAP_FMAC2 soap_instantiate_om__BasicLayerType(struct soap*, int, const char*, const char*, size_t*);

inline om__BasicLayerType * soap_new_om__BasicLayerType(struct soap *soap, int n = -1) { return soap_instantiate_om__BasicLayerType(soap, n, NULL, NULL, NULL); }

inline om__BasicLayerType * soap_new_req_om__BasicLayerType(struct soap *soap, std::string& Id) { om__BasicLayerType *_p = soap_instantiate_om__BasicLayerType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__BasicLayerType::Id = Id; } return _p; }

inline om__BasicLayerType * soap_new_set_om__BasicLayerType(struct soap *soap, std::string& Id) { om__BasicLayerType *_p = soap_instantiate_om__BasicLayerType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__BasicLayerType::Id = Id; } return _p; }

inline void soap_delete_om__BasicLayerType(struct soap *soap, om__BasicLayerType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__BasicLayerType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__AvailableLayersType
#define SOAP_TYPE_om_om__AvailableLayersType (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AvailableLayersType(struct soap*, const char*, int, const om__AvailableLayersType *, const char*);
SOAP_FMAC3 om__AvailableLayersType * SOAP_FMAC4 soap_in_om__AvailableLayersType(struct soap*, const char*, om__AvailableLayersType *, const char*);

#ifndef soap_write_om__AvailableLayersType
#define soap_write_om__AvailableLayersType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AvailableLayersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__AvailableLayersType * SOAP_FMAC4 soap_get_om__AvailableLayersType(struct soap*, om__AvailableLayersType *, const char*, const char*);

#ifndef soap_read_om__AvailableLayersType
#define soap_read_om__AvailableLayersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__AvailableLayersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__AvailableLayersType * SOAP_FMAC2 soap_instantiate_om__AvailableLayersType(struct soap*, int, const char*, const char*, size_t*);

inline om__AvailableLayersType * soap_new_om__AvailableLayersType(struct soap *soap, int n = -1) { return soap_instantiate_om__AvailableLayersType(soap, n, NULL, NULL, NULL); }

inline om__AvailableLayersType * soap_new_req_om__AvailableLayersType(struct soap *soap, om__LayersGroupType *LayersGroup) { om__AvailableLayersType *_p = soap_instantiate_om__AvailableLayersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AvailableLayersType::LayersGroup = LayersGroup; } return _p; }

inline om__AvailableLayersType * soap_new_set_om__AvailableLayersType(struct soap *soap, om__LayersGroupType *LayersGroup) { om__AvailableLayersType *_p = soap_instantiate_om__AvailableLayersType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AvailableLayersType::LayersGroup = LayersGroup; } return _p; }

inline void soap_delete_om__AvailableLayersType(struct soap *soap, om__AvailableLayersType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__AvailableLayersType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__SerializedAlgorithmType
#define SOAP_TYPE_om_om__SerializedAlgorithmType (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__SerializedAlgorithmType(struct soap*, const char*, int, const om__SerializedAlgorithmType *, const char*);
SOAP_FMAC3 om__SerializedAlgorithmType * SOAP_FMAC4 soap_in_om__SerializedAlgorithmType(struct soap*, const char*, om__SerializedAlgorithmType *, const char*);

#ifndef soap_write_om__SerializedAlgorithmType
#define soap_write_om__SerializedAlgorithmType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:SerializedAlgorithmType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SerializedAlgorithmType * SOAP_FMAC4 soap_get_om__SerializedAlgorithmType(struct soap*, om__SerializedAlgorithmType *, const char*, const char*);

#ifndef soap_read_om__SerializedAlgorithmType
#define soap_read_om__SerializedAlgorithmType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__SerializedAlgorithmType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__SerializedAlgorithmType * SOAP_FMAC2 soap_instantiate_om__SerializedAlgorithmType(struct soap*, int, const char*, const char*, size_t*);

inline om__SerializedAlgorithmType * soap_new_om__SerializedAlgorithmType(struct soap *soap, int n = -1) { return soap_instantiate_om__SerializedAlgorithmType(soap, n, NULL, NULL, NULL); }

inline om__SerializedAlgorithmType * soap_new_req_om__SerializedAlgorithmType(struct soap *soap, _om__SerializedAlgorithmType_Parameters& Parameters, _om__SerializedAlgorithmType_Model& Model, std::string& Id, std::string& Version) { om__SerializedAlgorithmType *_p = soap_instantiate_om__SerializedAlgorithmType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SerializedAlgorithmType::Parameters = Parameters; _p->om__SerializedAlgorithmType::Model = Model; _p->om__SerializedAlgorithmType::Id = Id; _p->om__SerializedAlgorithmType::Version = Version; } return _p; }

inline om__SerializedAlgorithmType * soap_new_set_om__SerializedAlgorithmType(struct soap *soap, _om__SerializedAlgorithmType_Parameters& Parameters, om__NormalizationType *Normalization, _om__SerializedAlgorithmType_Model& Model, std::string& Id, std::string& Version) { om__SerializedAlgorithmType *_p = soap_instantiate_om__SerializedAlgorithmType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__SerializedAlgorithmType::Parameters = Parameters; _p->om__SerializedAlgorithmType::Normalization = Normalization; _p->om__SerializedAlgorithmType::Model = Model; _p->om__SerializedAlgorithmType::Id = Id; _p->om__SerializedAlgorithmType::Version = Version; } return _p; }

inline void soap_delete_om__SerializedAlgorithmType(struct soap *soap, om__SerializedAlgorithmType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__SerializedAlgorithmType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__BasicAlgorithmDefinitionType
#define SOAP_TYPE_om_om__BasicAlgorithmDefinitionType (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__BasicAlgorithmDefinitionType(struct soap*, const char*, int, const om__BasicAlgorithmDefinitionType *, const char*);
SOAP_FMAC3 om__BasicAlgorithmDefinitionType * SOAP_FMAC4 soap_in_om__BasicAlgorithmDefinitionType(struct soap*, const char*, om__BasicAlgorithmDefinitionType *, const char*);

#ifndef soap_write_om__BasicAlgorithmDefinitionType
#define soap_write_om__BasicAlgorithmDefinitionType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:BasicAlgorithmDefinitionType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__BasicAlgorithmDefinitionType * SOAP_FMAC4 soap_get_om__BasicAlgorithmDefinitionType(struct soap*, om__BasicAlgorithmDefinitionType *, const char*, const char*);

#ifndef soap_read_om__BasicAlgorithmDefinitionType
#define soap_read_om__BasicAlgorithmDefinitionType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__BasicAlgorithmDefinitionType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__BasicAlgorithmDefinitionType * SOAP_FMAC2 soap_instantiate_om__BasicAlgorithmDefinitionType(struct soap*, int, const char*, const char*, size_t*);

inline om__BasicAlgorithmDefinitionType * soap_new_om__BasicAlgorithmDefinitionType(struct soap *soap, int n = -1) { return soap_instantiate_om__BasicAlgorithmDefinitionType(soap, n, NULL, NULL, NULL); }

inline om__BasicAlgorithmDefinitionType * soap_new_req_om__BasicAlgorithmDefinitionType(struct soap *soap, _om__BasicAlgorithmDefinitionType_Parameters& Parameters, std::string& Id, std::string& Version) { om__BasicAlgorithmDefinitionType *_p = soap_instantiate_om__BasicAlgorithmDefinitionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__BasicAlgorithmDefinitionType::Parameters = Parameters; _p->om__BasicAlgorithmDefinitionType::Id = Id; _p->om__BasicAlgorithmDefinitionType::Version = Version; } return _p; }

inline om__BasicAlgorithmDefinitionType * soap_new_set_om__BasicAlgorithmDefinitionType(struct soap *soap, _om__BasicAlgorithmDefinitionType_Parameters& Parameters, std::string& Id, std::string& Version) { om__BasicAlgorithmDefinitionType *_p = soap_instantiate_om__BasicAlgorithmDefinitionType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__BasicAlgorithmDefinitionType::Parameters = Parameters; _p->om__BasicAlgorithmDefinitionType::Id = Id; _p->om__BasicAlgorithmDefinitionType::Version = Version; } return _p; }

inline void soap_delete_om__BasicAlgorithmDefinitionType(struct soap *soap, om__BasicAlgorithmDefinitionType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__BasicAlgorithmDefinitionType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__AlgorithmMetadataType
#define SOAP_TYPE_om_om__AlgorithmMetadataType (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AlgorithmMetadataType(struct soap*, const char*, int, const om__AlgorithmMetadataType *, const char*);
SOAP_FMAC3 om__AlgorithmMetadataType * SOAP_FMAC4 soap_in_om__AlgorithmMetadataType(struct soap*, const char*, om__AlgorithmMetadataType *, const char*);

#ifndef soap_write_om__AlgorithmMetadataType
#define soap_write_om__AlgorithmMetadataType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmMetadataType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__AlgorithmMetadataType * SOAP_FMAC4 soap_get_om__AlgorithmMetadataType(struct soap*, om__AlgorithmMetadataType *, const char*, const char*);

#ifndef soap_read_om__AlgorithmMetadataType
#define soap_read_om__AlgorithmMetadataType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__AlgorithmMetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__AlgorithmMetadataType * SOAP_FMAC2 soap_instantiate_om__AlgorithmMetadataType(struct soap*, int, const char*, const char*, size_t*);

inline om__AlgorithmMetadataType * soap_new_om__AlgorithmMetadataType(struct soap *soap, int n = -1) { return soap_instantiate_om__AlgorithmMetadataType(soap, n, NULL, NULL, NULL); }

inline om__AlgorithmMetadataType * soap_new_req_om__AlgorithmMetadataType(struct soap *soap, std::string& Name, std::string& Overview, std::string& Description, _om__AlgorithmMetadataType_Designers& Designers, _om__AlgorithmMetadataType_Developers& Developers, bool AcceptsCategoricalMaps, bool RequiresAbsencePoints, _om__AlgorithmMetadataType_Parameters& Parameters, std::string& Id, std::string& Version) { om__AlgorithmMetadataType *_p = soap_instantiate_om__AlgorithmMetadataType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AlgorithmMetadataType::Name = Name; _p->om__AlgorithmMetadataType::Overview = Overview; _p->om__AlgorithmMetadataType::Description = Description; _p->om__AlgorithmMetadataType::Designers = Designers; _p->om__AlgorithmMetadataType::Developers = Developers; _p->om__AlgorithmMetadataType::AcceptsCategoricalMaps = AcceptsCategoricalMaps; _p->om__AlgorithmMetadataType::RequiresAbsencePoints = RequiresAbsencePoints; _p->om__AlgorithmMetadataType::Parameters = Parameters; _p->om__AlgorithmMetadataType::Id = Id; _p->om__AlgorithmMetadataType::Version = Version; } return _p; }

inline om__AlgorithmMetadataType * soap_new_set_om__AlgorithmMetadataType(struct soap *soap, std::string& Name, std::string& Overview, std::string& Description, _om__AlgorithmMetadataType_Designers& Designers, std::string *Bibliography, _om__AlgorithmMetadataType_Developers& Developers, bool AcceptsCategoricalMaps, bool RequiresAbsencePoints, _om__AlgorithmMetadataType_Parameters& Parameters, std::string& Id, std::string& Version) { om__AlgorithmMetadataType *_p = soap_instantiate_om__AlgorithmMetadataType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AlgorithmMetadataType::Name = Name; _p->om__AlgorithmMetadataType::Overview = Overview; _p->om__AlgorithmMetadataType::Description = Description; _p->om__AlgorithmMetadataType::Designers = Designers; _p->om__AlgorithmMetadataType::Bibliography = Bibliography; _p->om__AlgorithmMetadataType::Developers = Developers; _p->om__AlgorithmMetadataType::AcceptsCategoricalMaps = AcceptsCategoricalMaps; _p->om__AlgorithmMetadataType::RequiresAbsencePoints = RequiresAbsencePoints; _p->om__AlgorithmMetadataType::Parameters = Parameters; _p->om__AlgorithmMetadataType::Id = Id; _p->om__AlgorithmMetadataType::Version = Version; } return _p; }

inline void soap_delete_om__AlgorithmMetadataType(struct soap *soap, om__AlgorithmMetadataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__AlgorithmMetadataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__AlgorithmsMetadataType
#define SOAP_TYPE_om_om__AlgorithmsMetadataType (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AlgorithmsMetadataType(struct soap*, const char*, int, const om__AlgorithmsMetadataType *, const char*);
SOAP_FMAC3 om__AlgorithmsMetadataType * SOAP_FMAC4 soap_in_om__AlgorithmsMetadataType(struct soap*, const char*, om__AlgorithmsMetadataType *, const char*);

#ifndef soap_write_om__AlgorithmsMetadataType
#define soap_write_om__AlgorithmsMetadataType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AlgorithmsMetadataType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__AlgorithmsMetadataType * SOAP_FMAC4 soap_get_om__AlgorithmsMetadataType(struct soap*, om__AlgorithmsMetadataType *, const char*, const char*);

#ifndef soap_read_om__AlgorithmsMetadataType
#define soap_read_om__AlgorithmsMetadataType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__AlgorithmsMetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__AlgorithmsMetadataType * SOAP_FMAC2 soap_instantiate_om__AlgorithmsMetadataType(struct soap*, int, const char*, const char*, size_t*);

inline om__AlgorithmsMetadataType * soap_new_om__AlgorithmsMetadataType(struct soap *soap, int n = -1) { return soap_instantiate_om__AlgorithmsMetadataType(soap, n, NULL, NULL, NULL); }

inline om__AlgorithmsMetadataType * soap_new_req_om__AlgorithmsMetadataType(struct soap *soap) { om__AlgorithmsMetadataType *_p = soap_instantiate_om__AlgorithmsMetadataType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline om__AlgorithmsMetadataType * soap_new_set_om__AlgorithmsMetadataType(struct soap *soap, std::vector<om__AlgorithmMetadataType * >& Algorithm) { om__AlgorithmsMetadataType *_p = soap_instantiate_om__AlgorithmsMetadataType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AlgorithmsMetadataType::Algorithm = Algorithm; } return _p; }

inline void soap_delete_om__AlgorithmsMetadataType(struct soap *soap, om__AlgorithmsMetadataType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__AlgorithmsMetadataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_om__AvailableAlgorithmsType
#define SOAP_TYPE_om_om__AvailableAlgorithmsType (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_om__AvailableAlgorithmsType(struct soap*, const char*, int, const om__AvailableAlgorithmsType *, const char*);
SOAP_FMAC3 om__AvailableAlgorithmsType * SOAP_FMAC4 soap_in_om__AvailableAlgorithmsType(struct soap*, const char*, om__AvailableAlgorithmsType *, const char*);

#ifndef soap_write_om__AvailableAlgorithmsType
#define soap_write_om__AvailableAlgorithmsType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "om:AvailableAlgorithmsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__AvailableAlgorithmsType * SOAP_FMAC4 soap_get_om__AvailableAlgorithmsType(struct soap*, om__AvailableAlgorithmsType *, const char*, const char*);

#ifndef soap_read_om__AvailableAlgorithmsType
#define soap_read_om__AvailableAlgorithmsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_om__AvailableAlgorithmsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 om__AvailableAlgorithmsType * SOAP_FMAC2 soap_instantiate_om__AvailableAlgorithmsType(struct soap*, int, const char*, const char*, size_t*);

inline om__AvailableAlgorithmsType * soap_new_om__AvailableAlgorithmsType(struct soap *soap, int n = -1) { return soap_instantiate_om__AvailableAlgorithmsType(soap, n, NULL, NULL, NULL); }

inline om__AvailableAlgorithmsType * soap_new_req_om__AvailableAlgorithmsType(struct soap *soap, om__AlgorithmsMetadataType *Algorithms) { om__AvailableAlgorithmsType *_p = soap_instantiate_om__AvailableAlgorithmsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AvailableAlgorithmsType::Algorithms = Algorithms; } return _p; }

inline om__AvailableAlgorithmsType * soap_new_set_om__AvailableAlgorithmsType(struct soap *soap, om__AlgorithmsMetadataType *Algorithms) { om__AvailableAlgorithmsType *_p = soap_instantiate_om__AvailableAlgorithmsType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->om__AvailableAlgorithmsType::Algorithms = Algorithms; } return _p; }

inline void soap_delete_om__AvailableAlgorithmsType(struct soap *soap, om__AvailableAlgorithmsType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_om__AvailableAlgorithmsType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_xsd__anyURI
#define SOAP_TYPE_om_xsd__anyURI (16)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_serialize_xsd__anyURI(soap, data), soap_begin_send(soap) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_copy_xsd__anyURI soap_copy_std__string

#ifndef SOAP_TYPE_om_xsd__IDREF
#define SOAP_TYPE_om_xsd__IDREF (15)
#endif

#define soap_default_xsd__IDREF(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__IDREF
#define soap_write_xsd__IDREF(soap, data) ( soap_serialize_xsd__IDREF(soap, data), soap_begin_send(soap) || soap_put_xsd__IDREF(soap, data, "xsd:IDREF", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__IDREF
#define soap_read_xsd__IDREF(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__IDREF(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__IDREF soap_instantiate_std__string


#define soap_copy_xsd__IDREF soap_copy_std__string

#ifndef SOAP_TYPE_om_xsd__ID
#define SOAP_TYPE_om_xsd__ID (14)
#endif

#define soap_default_xsd__ID(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__ID
#define soap_write_xsd__ID(soap, data) ( soap_serialize_xsd__ID(soap, data), soap_begin_send(soap) || soap_put_xsd__ID(soap, data, "xsd:ID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__ID
#define soap_read_xsd__ID(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__ID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__ID soap_instantiate_std__string


#define soap_copy_xsd__ID soap_copy_std__string

#ifndef SOAP_TYPE_om_std__string
#define SOAP_TYPE_om_std__string (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_om_SOAP_ENV__Fault
#define SOAP_TYPE_om_SOAP_ENV__Fault (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( om::soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || om::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !om::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_om_SOAP_ENV__Reason
#define SOAP_TYPE_om_SOAP_ENV__Reason (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( om::soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || om::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !om::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_om_SOAP_ENV__Detail
#define SOAP_TYPE_om_SOAP_ENV__Detail (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( om::soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || om::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !om::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_om_SOAP_ENV__Code
#define SOAP_TYPE_om_SOAP_ENV__Code (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( om::soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || om::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !om::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_om_SOAP_ENV__Header
#define SOAP_TYPE_om_SOAP_ENV__Header (202)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( om::soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || om::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !om::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

}

#ifndef SOAP_TYPE_xsd__anyAttribute
#define SOAP_TYPE_xsd__anyAttribute (11)
#endif

#ifndef SOAP_TYPE_om_xsd__anyAttribute
#define SOAP_TYPE_om_xsd__anyAttribute (11)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyAttribute(struct soap*, struct soap_dom_attribute *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__anyAttribute(struct soap*, const struct soap_dom_attribute *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__anyAttribute2s(struct soap*, struct soap_dom_attribute);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyAttribute(struct soap*, const char*, int, const struct soap_dom_attribute *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__anyAttribute(struct soap*, const char*, struct soap_dom_attribute *);
SOAP_FMAC1 struct soap_dom_attribute * SOAP_FMAC2 soap_in_xsd__anyAttribute(struct soap*, const char*, struct soap_dom_attribute *, const char*);

namespace om {

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyAttribute(struct soap*, const struct soap_dom_attribute *, const char*, const char*);

#ifndef soap_write_xsd__anyAttribute
#define soap_write_xsd__anyAttribute(soap, data) ( soap_serialize_xsd__anyAttribute(soap, data), soap_begin_send(soap) || soap_put_xsd__anyAttribute(soap, data, "xsd:anyAttribute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct soap_dom_attribute * SOAP_FMAC4 soap_get_xsd__anyAttribute(struct soap*, struct soap_dom_attribute *, const char*, const char*);

#ifndef soap_read_xsd__anyAttribute
#define soap_read_xsd__anyAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct soap_dom_attribute * SOAP_FMAC2 soap_instantiate_xsd__anyAttribute(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_dom_attribute * soap_new_xsd__anyAttribute(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyAttribute(soap, n, NULL, NULL, NULL); }

inline struct soap_dom_attribute * soap_new_req_xsd__anyAttribute(struct soap *soap) { struct soap_dom_attribute *_p = soap_instantiate_xsd__anyAttribute(soap, -1, NULL, NULL, NULL); if (_p) { } return _p; }

inline struct soap_dom_attribute * soap_new_set_xsd__anyAttribute(struct soap *soap) { struct soap_dom_attribute *_p = soap_instantiate_xsd__anyAttribute(soap, -1, NULL, NULL, NULL); if (_p) { } return _p; }

inline void soap_delete_xsd__anyAttribute(struct soap *soap, struct soap_dom_attribute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyAttribute(struct soap*, int, int, void*, size_t, const void*, size_t);

}

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (9)
#endif

#ifndef SOAP_TYPE_om_xsd__anyType
#define SOAP_TYPE_om_xsd__anyType (9)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyType(struct soap*, struct soap_dom_element *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__anyType(struct soap*, const struct soap_dom_element *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__anyType2s(struct soap*, struct soap_dom_element);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyType(struct soap*, const char*, int, const struct soap_dom_element *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__anyType(struct soap*, const char*, struct soap_dom_element *);
SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_in_xsd__anyType(struct soap*, const char*, struct soap_dom_element *, const char*);

namespace om {

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyType(struct soap*, const struct soap_dom_element *, const char*, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_serialize_xsd__anyType(soap, data), soap_begin_send(soap) || soap_put_xsd__anyType(soap, data, "xsd:anyType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct soap_dom_element * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, struct soap_dom_element *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_dom_element * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline struct soap_dom_element * soap_new_req_xsd__anyType(struct soap *soap) { struct soap_dom_element *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { } return _p; }

inline struct soap_dom_element * soap_new_set_xsd__anyType(struct soap *soap) { struct soap_dom_element *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, struct soap_dom_element *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om__om__union_ResultSetType_Job
#define SOAP_TYPE_om__om__union_ResultSetType_Job (177)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__om__union_ResultSetType_Job(struct soap*, int, const union _om__union_ResultSetType_Job *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__union_ResultSetType_Job(struct soap*, int, const union _om__union_ResultSetType_Job *);
SOAP_FMAC3 union _om__union_ResultSetType_Job * SOAP_FMAC4 soap_in__om__union_ResultSetType_Job(struct soap*, int*, union _om__union_ResultSetType_Job *);

#ifndef SOAP_TYPE_om__om__union_ExperimentParametersType_Jobs
#define SOAP_TYPE_om__om__union_ExperimentParametersType_Jobs (165)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__om__union_ExperimentParametersType_Jobs(struct soap*, int, const union _om__union_ExperimentParametersType_Jobs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__union_ExperimentParametersType_Jobs(struct soap*, int, const union _om__union_ExperimentParametersType_Jobs *);
SOAP_FMAC3 union _om__union_ExperimentParametersType_Jobs * SOAP_FMAC4 soap_in__om__union_ExperimentParametersType_Jobs(struct soap*, int*, union _om__union_ExperimentParametersType_Jobs *);

#ifndef SOAP_TYPE_om__om__union_OccurrencesFilterType
#define SOAP_TYPE_om__om__union_OccurrencesFilterType (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__om__union_OccurrencesFilterType(struct soap*, int, const union _om__union_OccurrencesFilterType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__om__union_OccurrencesFilterType(struct soap*, int, const union _om__union_OccurrencesFilterType *);
SOAP_FMAC3 union _om__union_OccurrencesFilterType * SOAP_FMAC4 soap_in__om__union_OccurrencesFilterType(struct soap*, int*, union _om__union_OccurrencesFilterType *);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_om_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_om_PointerToSOAP_ENV__Reason (211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( om::soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || om::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_om_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_om_PointerToSOAP_ENV__Detail (210)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( om::soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || om::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_om_PointerToSOAP_ENV__Code
#define SOAP_TYPE_om_PointerToSOAP_ENV__Code (204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( om::soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || om::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_om_PointerToom__ReferenceType
#define SOAP_TYPE_om_PointerToom__ReferenceType (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ReferenceType(struct soap*, om__ReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ReferenceType(struct soap*, const char *, int, om__ReferenceType *const*, const char *);
SOAP_FMAC3 om__ReferenceType ** SOAP_FMAC4 soap_in_PointerToom__ReferenceType(struct soap*, const char*, om__ReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ReferenceType(struct soap*, om__ReferenceType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ReferenceType
#define soap_write_PointerToom__ReferenceType(soap, data) ( om::soap_serialize_PointerToom__ReferenceType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ReferenceType(soap, data, "om:ReferenceType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ReferenceType ** SOAP_FMAC4 soap_get_PointerToom__ReferenceType(struct soap*, om__ReferenceType **, const char*, const char*);

#ifndef soap_read_PointerToom__ReferenceType
#define soap_read_PointerToom__ReferenceType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ReferenceType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__ResultSetType_Job_Values
#define SOAP_TYPE_om_PointerTo_om__ResultSetType_Job_Values (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__ResultSetType_Job_Values(struct soap*, _om__ResultSetType_Job_Values *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__ResultSetType_Job_Values(struct soap*, const char *, int, _om__ResultSetType_Job_Values *const*, const char *);
SOAP_FMAC3 _om__ResultSetType_Job_Values ** SOAP_FMAC4 soap_in_PointerTo_om__ResultSetType_Job_Values(struct soap*, const char*, _om__ResultSetType_Job_Values **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__ResultSetType_Job_Values(struct soap*, _om__ResultSetType_Job_Values *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__ResultSetType_Job_Values
#define soap_write_PointerTo_om__ResultSetType_Job_Values(soap, data) ( om::soap_serialize_PointerTo_om__ResultSetType_Job_Values(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__ResultSetType_Job_Values(soap, data, "om:ResultSetType-Job-Values", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ResultSetType_Job_Values ** SOAP_FMAC4 soap_get_PointerTo_om__ResultSetType_Job_Values(struct soap*, _om__ResultSetType_Job_Values **, const char*, const char*);

#ifndef soap_read_PointerTo_om__ResultSetType_Job_Values
#define soap_read_PointerTo_om__ResultSetType_Job_Values(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__ResultSetType_Job_Values(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__ResultSetType_Job_ProjectionEnvelope
#define SOAP_TYPE_om_PointerTo_om__ResultSetType_Job_ProjectionEnvelope (174)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(struct soap*, _om__ResultSetType_Job_ProjectionEnvelope *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(struct soap*, const char *, int, _om__ResultSetType_Job_ProjectionEnvelope *const*, const char *);
SOAP_FMAC3 _om__ResultSetType_Job_ProjectionEnvelope ** SOAP_FMAC4 soap_in_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(struct soap*, const char*, _om__ResultSetType_Job_ProjectionEnvelope **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(struct soap*, _om__ResultSetType_Job_ProjectionEnvelope *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__ResultSetType_Job_ProjectionEnvelope
#define soap_write_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(soap, data) ( om::soap_serialize_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(soap, data, "om:ResultSetType-Job-ProjectionEnvelope", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ResultSetType_Job_ProjectionEnvelope ** SOAP_FMAC4 soap_get_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(struct soap*, _om__ResultSetType_Job_ProjectionEnvelope **, const char*, const char*);

#ifndef soap_read_PointerTo_om__ResultSetType_Job_ProjectionEnvelope
#define soap_read_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__ResultSetType_Job_ProjectionEnvelope(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__ProjectionEnvelopeType
#define SOAP_TYPE_om_PointerToom__ProjectionEnvelopeType (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ProjectionEnvelopeType(struct soap*, om__ProjectionEnvelopeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ProjectionEnvelopeType(struct soap*, const char *, int, om__ProjectionEnvelopeType *const*, const char *);
SOAP_FMAC3 om__ProjectionEnvelopeType ** SOAP_FMAC4 soap_in_PointerToom__ProjectionEnvelopeType(struct soap*, const char*, om__ProjectionEnvelopeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ProjectionEnvelopeType(struct soap*, om__ProjectionEnvelopeType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ProjectionEnvelopeType
#define soap_write_PointerToom__ProjectionEnvelopeType(soap, data) ( om::soap_serialize_PointerToom__ProjectionEnvelopeType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ProjectionEnvelopeType(soap, data, "om:ProjectionEnvelopeType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ProjectionEnvelopeType ** SOAP_FMAC4 soap_get_PointerToom__ProjectionEnvelopeType(struct soap*, om__ProjectionEnvelopeType **, const char*, const char*);

#ifndef soap_read_PointerToom__ProjectionEnvelopeType
#define soap_read_PointerToom__ProjectionEnvelopeType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ProjectionEnvelopeType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__TestResultEnvelopeType
#define SOAP_TYPE_om_PointerToom__TestResultEnvelopeType (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__TestResultEnvelopeType(struct soap*, om__TestResultEnvelopeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__TestResultEnvelopeType(struct soap*, const char *, int, om__TestResultEnvelopeType *const*, const char *);
SOAP_FMAC3 om__TestResultEnvelopeType ** SOAP_FMAC4 soap_in_PointerToom__TestResultEnvelopeType(struct soap*, const char*, om__TestResultEnvelopeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__TestResultEnvelopeType(struct soap*, om__TestResultEnvelopeType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__TestResultEnvelopeType
#define soap_write_PointerToom__TestResultEnvelopeType(soap, data) ( om::soap_serialize_PointerToom__TestResultEnvelopeType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__TestResultEnvelopeType(soap, data, "om:TestResultEnvelopeType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestResultEnvelopeType ** SOAP_FMAC4 soap_get_PointerToom__TestResultEnvelopeType(struct soap*, om__TestResultEnvelopeType **, const char*, const char*);

#ifndef soap_read_PointerToom__TestResultEnvelopeType
#define soap_read_PointerToom__TestResultEnvelopeType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__TestResultEnvelopeType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__ModelEnvelopeType
#define SOAP_TYPE_om_PointerToom__ModelEnvelopeType (170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ModelEnvelopeType(struct soap*, om__ModelEnvelopeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ModelEnvelopeType(struct soap*, const char *, int, om__ModelEnvelopeType *const*, const char *);
SOAP_FMAC3 om__ModelEnvelopeType ** SOAP_FMAC4 soap_in_PointerToom__ModelEnvelopeType(struct soap*, const char*, om__ModelEnvelopeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ModelEnvelopeType(struct soap*, om__ModelEnvelopeType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ModelEnvelopeType
#define soap_write_PointerToom__ModelEnvelopeType(soap, data) ( om::soap_serialize_PointerToom__ModelEnvelopeType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ModelEnvelopeType(soap, data, "om:ModelEnvelopeType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModelEnvelopeType ** SOAP_FMAC4 soap_get_PointerToom__ModelEnvelopeType(struct soap*, om__ModelEnvelopeType **, const char*, const char*);

#ifndef soap_read_PointerToom__ModelEnvelopeType
#define soap_read_PointerToom__ModelEnvelopeType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ModelEnvelopeType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo__om__union_ExperimentParametersType_Jobs
#define SOAP_TYPE_om_PointerTo__om__union_ExperimentParametersType_Jobs (166)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__om__union_ExperimentParametersType_Jobs(struct soap*, __om__union_ExperimentParametersType_Jobs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__om__union_ExperimentParametersType_Jobs(struct soap*, const char *, int, __om__union_ExperimentParametersType_Jobs *const*, const char *);
SOAP_FMAC3 __om__union_ExperimentParametersType_Jobs ** SOAP_FMAC4 soap_in_PointerTo__om__union_ExperimentParametersType_Jobs(struct soap*, const char*, __om__union_ExperimentParametersType_Jobs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__om__union_ExperimentParametersType_Jobs(struct soap*, __om__union_ExperimentParametersType_Jobs *const*, const char*, const char*);

#ifndef soap_write_PointerTo__om__union_ExperimentParametersType_Jobs
#define soap_write_PointerTo__om__union_ExperimentParametersType_Jobs(soap, data) ( om::soap_serialize_PointerTo__om__union_ExperimentParametersType_Jobs(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo__om__union_ExperimentParametersType_Jobs(soap, data, "-om:union-ExperimentParametersType-Jobs", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __om__union_ExperimentParametersType_Jobs ** SOAP_FMAC4 soap_get_PointerTo__om__union_ExperimentParametersType_Jobs(struct soap*, __om__union_ExperimentParametersType_Jobs **, const char*, const char*);

#ifndef soap_read_PointerTo__om__union_ExperimentParametersType_Jobs
#define soap_read_PointerTo__om__union_ExperimentParametersType_Jobs(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo__om__union_ExperimentParametersType_Jobs(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__EvaluateModelJobType
#define SOAP_TYPE_om_PointerToom__EvaluateModelJobType (164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__EvaluateModelJobType(struct soap*, om__EvaluateModelJobType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__EvaluateModelJobType(struct soap*, const char *, int, om__EvaluateModelJobType *const*, const char *);
SOAP_FMAC3 om__EvaluateModelJobType ** SOAP_FMAC4 soap_in_PointerToom__EvaluateModelJobType(struct soap*, const char*, om__EvaluateModelJobType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__EvaluateModelJobType(struct soap*, om__EvaluateModelJobType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__EvaluateModelJobType
#define soap_write_PointerToom__EvaluateModelJobType(soap, data) ( om::soap_serialize_PointerToom__EvaluateModelJobType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__EvaluateModelJobType(soap, data, "om:EvaluateModelJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__EvaluateModelJobType ** SOAP_FMAC4 soap_get_PointerToom__EvaluateModelJobType(struct soap*, om__EvaluateModelJobType **, const char*, const char*);

#ifndef soap_read_PointerToom__EvaluateModelJobType
#define soap_read_PointerToom__EvaluateModelJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__EvaluateModelJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__ProjectModelJobType
#define SOAP_TYPE_om_PointerToom__ProjectModelJobType (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ProjectModelJobType(struct soap*, om__ProjectModelJobType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ProjectModelJobType(struct soap*, const char *, int, om__ProjectModelJobType *const*, const char *);
SOAP_FMAC3 om__ProjectModelJobType ** SOAP_FMAC4 soap_in_PointerToom__ProjectModelJobType(struct soap*, const char*, om__ProjectModelJobType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ProjectModelJobType(struct soap*, om__ProjectModelJobType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ProjectModelJobType
#define soap_write_PointerToom__ProjectModelJobType(soap, data) ( om::soap_serialize_PointerToom__ProjectModelJobType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ProjectModelJobType(soap, data, "om:ProjectModelJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ProjectModelJobType ** SOAP_FMAC4 soap_get_PointerToom__ProjectModelJobType(struct soap*, om__ProjectModelJobType **, const char*, const char*);

#ifndef soap_read_PointerToom__ProjectModelJobType
#define soap_read_PointerToom__ProjectModelJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ProjectModelJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__TestModelJobType
#define SOAP_TYPE_om_PointerToom__TestModelJobType (162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__TestModelJobType(struct soap*, om__TestModelJobType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__TestModelJobType(struct soap*, const char *, int, om__TestModelJobType *const*, const char *);
SOAP_FMAC3 om__TestModelJobType ** SOAP_FMAC4 soap_in_PointerToom__TestModelJobType(struct soap*, const char*, om__TestModelJobType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__TestModelJobType(struct soap*, om__TestModelJobType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__TestModelJobType
#define soap_write_PointerToom__TestModelJobType(soap, data) ( om::soap_serialize_PointerToom__TestModelJobType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__TestModelJobType(soap, data, "om:TestModelJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestModelJobType ** SOAP_FMAC4 soap_get_PointerToom__TestModelJobType(struct soap*, om__TestModelJobType **, const char*, const char*);

#ifndef soap_read_PointerToom__TestModelJobType
#define soap_read_PointerToom__TestModelJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__TestModelJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__CreateModelJobType
#define SOAP_TYPE_om_PointerToom__CreateModelJobType (161)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__CreateModelJobType(struct soap*, om__CreateModelJobType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__CreateModelJobType(struct soap*, const char *, int, om__CreateModelJobType *const*, const char *);
SOAP_FMAC3 om__CreateModelJobType ** SOAP_FMAC4 soap_in_PointerToom__CreateModelJobType(struct soap*, const char*, om__CreateModelJobType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__CreateModelJobType(struct soap*, om__CreateModelJobType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__CreateModelJobType
#define soap_write_PointerToom__CreateModelJobType(soap, data) ( om::soap_serialize_PointerToom__CreateModelJobType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__CreateModelJobType(soap, data, "om:CreateModelJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__CreateModelJobType ** SOAP_FMAC4 soap_get_PointerToom__CreateModelJobType(struct soap*, om__CreateModelJobType **, const char*, const char*);

#ifndef soap_read_PointerToom__CreateModelJobType
#define soap_read_PointerToom__CreateModelJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__CreateModelJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__SamplingJobType
#define SOAP_TYPE_om_PointerToom__SamplingJobType (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__SamplingJobType(struct soap*, om__SamplingJobType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__SamplingJobType(struct soap*, const char *, int, om__SamplingJobType *const*, const char *);
SOAP_FMAC3 om__SamplingJobType ** SOAP_FMAC4 soap_in_PointerToom__SamplingJobType(struct soap*, const char*, om__SamplingJobType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__SamplingJobType(struct soap*, om__SamplingJobType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__SamplingJobType
#define soap_write_PointerToom__SamplingJobType(soap, data) ( om::soap_serialize_PointerToom__SamplingJobType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__SamplingJobType(soap, data, "om:SamplingJobType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SamplingJobType ** SOAP_FMAC4 soap_get_PointerToom__SamplingJobType(struct soap*, om__SamplingJobType **, const char*, const char*);

#ifndef soap_read_PointerToom__SamplingJobType
#define soap_read_PointerToom__SamplingJobType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__SamplingJobType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm
#define SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm (157)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, const char *, int, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*const*, const char *);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_SerializedAlgorithm >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, const char*, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm
#define soap_write_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(soap, data) ( om::soap_serialize_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(soap, data), soap_begin_send(soap) || om::soap_put_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(soap, data, "", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::vector<_om__ExperimentParametersType_SerializedAlgorithm >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm
#define soap_read_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings
#define SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings (154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, std::vector<_om__ExperimentParametersType_AlgorithmSettings >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, const char *, int, std::vector<_om__ExperimentParametersType_AlgorithmSettings >*const*, const char *);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_AlgorithmSettings >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, const char*, std::vector<_om__ExperimentParametersType_AlgorithmSettings >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, std::vector<_om__ExperimentParametersType_AlgorithmSettings >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings
#define soap_write_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(soap, data) ( om::soap_serialize_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(soap, data), soap_begin_send(soap) || om::soap_put_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(soap, data, "", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::vector<_om__ExperimentParametersType_AlgorithmSettings >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, std::vector<_om__ExperimentParametersType_AlgorithmSettings >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings
#define soap_read_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence
#define SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, std::vector<_om__ExperimentParametersType_Absence >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, const char *, int, std::vector<_om__ExperimentParametersType_Absence >*const*, const char *);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Absence >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, const char*, std::vector<_om__ExperimentParametersType_Absence >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, std::vector<_om__ExperimentParametersType_Absence >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence
#define soap_write_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(soap, data) ( om::soap_serialize_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(soap, data), soap_begin_send(soap) || om::soap_put_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(soap, data, "", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Absence >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, std::vector<_om__ExperimentParametersType_Absence >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence
#define soap_read_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Absence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence
#define SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, std::vector<_om__ExperimentParametersType_Presence >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, const char *, int, std::vector<_om__ExperimentParametersType_Presence >*const*, const char *);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Presence >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, const char*, std::vector<_om__ExperimentParametersType_Presence >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, std::vector<_om__ExperimentParametersType_Presence >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence
#define soap_write_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(soap, data) ( om::soap_serialize_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(soap, data), soap_begin_send(soap) || om::soap_put_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(soap, data, "", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Presence >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, std::vector<_om__ExperimentParametersType_Presence >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence
#define soap_read_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTostd__vectorTemplateOf_om__ExperimentParametersType_Presence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__SamplingOptionsType
#define SOAP_TYPE_om_PointerToom__SamplingOptionsType (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__SamplingOptionsType(struct soap*, om__SamplingOptionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__SamplingOptionsType(struct soap*, const char *, int, om__SamplingOptionsType *const*, const char *);
SOAP_FMAC3 om__SamplingOptionsType ** SOAP_FMAC4 soap_in_PointerToom__SamplingOptionsType(struct soap*, const char*, om__SamplingOptionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__SamplingOptionsType(struct soap*, om__SamplingOptionsType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__SamplingOptionsType
#define soap_write_PointerToom__SamplingOptionsType(soap, data) ( om::soap_serialize_PointerToom__SamplingOptionsType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__SamplingOptionsType(soap, data, "om:SamplingOptionsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SamplingOptionsType ** SOAP_FMAC4 soap_get_PointerToom__SamplingOptionsType(struct soap*, om__SamplingOptionsType **, const char*, const char*);

#ifndef soap_read_PointerToom__SamplingOptionsType
#define soap_read_PointerToom__SamplingOptionsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__SamplingOptionsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__ProjectionStatisticsParametersType
#define SOAP_TYPE_om_PointerToom__ProjectionStatisticsParametersType (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ProjectionStatisticsParametersType(struct soap*, om__ProjectionStatisticsParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ProjectionStatisticsParametersType(struct soap*, const char *, int, om__ProjectionStatisticsParametersType *const*, const char *);
SOAP_FMAC3 om__ProjectionStatisticsParametersType ** SOAP_FMAC4 soap_in_PointerToom__ProjectionStatisticsParametersType(struct soap*, const char*, om__ProjectionStatisticsParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ProjectionStatisticsParametersType(struct soap*, om__ProjectionStatisticsParametersType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ProjectionStatisticsParametersType
#define soap_write_PointerToom__ProjectionStatisticsParametersType(soap, data) ( om::soap_serialize_PointerToom__ProjectionStatisticsParametersType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ProjectionStatisticsParametersType(soap, data, "om:ProjectionStatisticsParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ProjectionStatisticsParametersType ** SOAP_FMAC4 soap_get_PointerToom__ProjectionStatisticsParametersType(struct soap*, om__ProjectionStatisticsParametersType **, const char*, const char*);

#ifndef soap_read_PointerToom__ProjectionStatisticsParametersType
#define soap_read_PointerToom__ProjectionStatisticsParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ProjectionStatisticsParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__MapOutputParametersType
#define SOAP_TYPE_om_PointerToom__MapOutputParametersType (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__MapOutputParametersType(struct soap*, om__MapOutputParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__MapOutputParametersType(struct soap*, const char *, int, om__MapOutputParametersType *const*, const char *);
SOAP_FMAC3 om__MapOutputParametersType ** SOAP_FMAC4 soap_in_PointerToom__MapOutputParametersType(struct soap*, const char*, om__MapOutputParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__MapOutputParametersType(struct soap*, om__MapOutputParametersType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__MapOutputParametersType
#define soap_write_PointerToom__MapOutputParametersType(soap, data) ( om::soap_serialize_PointerToom__MapOutputParametersType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__MapOutputParametersType(soap, data, "om:MapOutputParametersType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__MapOutputParametersType ** SOAP_FMAC4 soap_get_PointerToom__MapOutputParametersType(struct soap*, om__MapOutputParametersType **, const char*, const char*);

#ifndef soap_read_PointerToom__MapOutputParametersType
#define soap_read_PointerToom__MapOutputParametersType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__MapOutputParametersType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__TestOptionsType
#define SOAP_TYPE_om_PointerToom__TestOptionsType (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__TestOptionsType(struct soap*, om__TestOptionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__TestOptionsType(struct soap*, const char *, int, om__TestOptionsType *const*, const char *);
SOAP_FMAC3 om__TestOptionsType ** SOAP_FMAC4 soap_in_PointerToom__TestOptionsType(struct soap*, const char*, om__TestOptionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__TestOptionsType(struct soap*, om__TestOptionsType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__TestOptionsType
#define soap_write_PointerToom__TestOptionsType(soap, data) ( om::soap_serialize_PointerToom__TestOptionsType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__TestOptionsType(soap, data, "om:TestOptionsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestOptionsType ** SOAP_FMAC4 soap_get_PointerToom__TestOptionsType(struct soap*, om__TestOptionsType **, const char*, const char*);

#ifndef soap_read_PointerToom__TestOptionsType
#define soap_read_PointerToom__TestOptionsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__TestOptionsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__TestResultType
#define SOAP_TYPE_om_PointerToom__TestResultType (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__TestResultType(struct soap*, om__TestResultType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__TestResultType(struct soap*, const char *, int, om__TestResultType *const*, const char *);
SOAP_FMAC3 om__TestResultType ** SOAP_FMAC4 soap_in_PointerToom__TestResultType(struct soap*, const char*, om__TestResultType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__TestResultType(struct soap*, om__TestResultType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__TestResultType
#define soap_write_PointerToom__TestResultType(soap, data) ( om::soap_serialize_PointerToom__TestResultType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__TestResultType(soap, data, "om:TestResultType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__TestResultType ** SOAP_FMAC4 soap_get_PointerToom__TestResultType(struct soap*, om__TestResultType **, const char*, const char*);

#ifndef soap_read_PointerToom__TestResultType
#define soap_read_PointerToom__TestResultType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__TestResultType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__SerializedAlgorithmType
#define SOAP_TYPE_om_PointerToom__SerializedAlgorithmType (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__SerializedAlgorithmType(struct soap*, om__SerializedAlgorithmType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__SerializedAlgorithmType(struct soap*, const char *, int, om__SerializedAlgorithmType *const*, const char *);
SOAP_FMAC3 om__SerializedAlgorithmType ** SOAP_FMAC4 soap_in_PointerToom__SerializedAlgorithmType(struct soap*, const char*, om__SerializedAlgorithmType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__SerializedAlgorithmType(struct soap*, om__SerializedAlgorithmType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__SerializedAlgorithmType
#define soap_write_PointerToom__SerializedAlgorithmType(soap, data) ( om::soap_serialize_PointerToom__SerializedAlgorithmType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__SerializedAlgorithmType(soap, data, "om:SerializedAlgorithmType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SerializedAlgorithmType ** SOAP_FMAC4 soap_get_PointerToom__SerializedAlgorithmType(struct soap*, om__SerializedAlgorithmType **, const char*, const char*);

#ifndef soap_read_PointerToom__SerializedAlgorithmType
#define soap_read_PointerToom__SerializedAlgorithmType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__SerializedAlgorithmType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__SerializedModelType
#define SOAP_TYPE_om_PointerToom__SerializedModelType (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__SerializedModelType(struct soap*, om__SerializedModelType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__SerializedModelType(struct soap*, const char *, int, om__SerializedModelType *const*, const char *);
SOAP_FMAC3 om__SerializedModelType ** SOAP_FMAC4 soap_in_PointerToom__SerializedModelType(struct soap*, const char*, om__SerializedModelType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__SerializedModelType(struct soap*, om__SerializedModelType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__SerializedModelType
#define soap_write_PointerToom__SerializedModelType(soap, data) ( om::soap_serialize_PointerToom__SerializedModelType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__SerializedModelType(soap, data, "om:SerializedModelType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SerializedModelType ** SOAP_FMAC4 soap_get_PointerToom__SerializedModelType(struct soap*, om__SerializedModelType **, const char*, const char*);

#ifndef soap_read_PointerToom__SerializedModelType
#define soap_read_PointerToom__SerializedModelType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__SerializedModelType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__OccurrencesFilterType
#define SOAP_TYPE_om_PointerToom__OccurrencesFilterType (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__OccurrencesFilterType(struct soap*, om__OccurrencesFilterType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__OccurrencesFilterType(struct soap*, const char *, int, om__OccurrencesFilterType *const*, const char *);
SOAP_FMAC3 om__OccurrencesFilterType ** SOAP_FMAC4 soap_in_PointerToom__OccurrencesFilterType(struct soap*, const char*, om__OccurrencesFilterType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__OccurrencesFilterType(struct soap*, om__OccurrencesFilterType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__OccurrencesFilterType
#define soap_write_PointerToom__OccurrencesFilterType(soap, data) ( om::soap_serialize_PointerToom__OccurrencesFilterType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__OccurrencesFilterType(soap, data, "om:OccurrencesFilterType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__OccurrencesFilterType ** SOAP_FMAC4 soap_get_PointerToom__OccurrencesFilterType(struct soap*, om__OccurrencesFilterType **, const char*, const char*);

#ifndef soap_read_PointerToom__OccurrencesFilterType
#define soap_read_PointerToom__OccurrencesFilterType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__OccurrencesFilterType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique
#define SOAP_TYPE_om_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, _om__OccurrencesFilterType_EnvironmentallyUnique *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, const char *, int, _om__OccurrencesFilterType_EnvironmentallyUnique *const*, const char *);
SOAP_FMAC3 _om__OccurrencesFilterType_EnvironmentallyUnique ** SOAP_FMAC4 soap_in_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, const char*, _om__OccurrencesFilterType_EnvironmentallyUnique **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, _om__OccurrencesFilterType_EnvironmentallyUnique *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique
#define soap_write_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(soap, data) ( om::soap_serialize_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(soap, data, "om:OccurrencesFilterType-EnvironmentallyUnique", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__OccurrencesFilterType_EnvironmentallyUnique ** SOAP_FMAC4 soap_get_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(struct soap*, _om__OccurrencesFilterType_EnvironmentallyUnique **, const char*, const char*);

#ifndef soap_read_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique
#define soap_read_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__OccurrencesFilterType_EnvironmentallyUnique(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__OccurrencesFilterType_SpatiallyUnique
#define SOAP_TYPE_om_PointerTo_om__OccurrencesFilterType_SpatiallyUnique (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(struct soap*, _om__OccurrencesFilterType_SpatiallyUnique *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(struct soap*, const char *, int, _om__OccurrencesFilterType_SpatiallyUnique *const*, const char *);
SOAP_FMAC3 _om__OccurrencesFilterType_SpatiallyUnique ** SOAP_FMAC4 soap_in_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(struct soap*, const char*, _om__OccurrencesFilterType_SpatiallyUnique **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(struct soap*, _om__OccurrencesFilterType_SpatiallyUnique *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__OccurrencesFilterType_SpatiallyUnique
#define soap_write_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(soap, data) ( om::soap_serialize_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(soap, data, "om:OccurrencesFilterType-SpatiallyUnique", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__OccurrencesFilterType_SpatiallyUnique ** SOAP_FMAC4 soap_get_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(struct soap*, _om__OccurrencesFilterType_SpatiallyUnique **, const char*, const char*);

#ifndef soap_read_PointerTo_om__OccurrencesFilterType_SpatiallyUnique
#define soap_read_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__OccurrencesFilterType_SpatiallyUnique(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__ModelOptionsType
#define SOAP_TYPE_om_PointerToom__ModelOptionsType (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ModelOptionsType(struct soap*, om__ModelOptionsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ModelOptionsType(struct soap*, const char *, int, om__ModelOptionsType *const*, const char *);
SOAP_FMAC3 om__ModelOptionsType ** SOAP_FMAC4 soap_in_PointerToom__ModelOptionsType(struct soap*, const char*, om__ModelOptionsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ModelOptionsType(struct soap*, om__ModelOptionsType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ModelOptionsType
#define soap_write_PointerToom__ModelOptionsType(soap, data) ( om::soap_serialize_PointerToom__ModelOptionsType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ModelOptionsType(soap, data, "om:ModelOptionsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModelOptionsType ** SOAP_FMAC4 soap_get_PointerToom__ModelOptionsType(struct soap*, om__ModelOptionsType **, const char*, const char*);

#ifndef soap_read_PointerToom__ModelOptionsType
#define soap_read_PointerToom__ModelOptionsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ModelOptionsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__BasicAlgorithmDefinitionType
#define SOAP_TYPE_om_PointerToom__BasicAlgorithmDefinitionType (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__BasicAlgorithmDefinitionType(struct soap*, om__BasicAlgorithmDefinitionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__BasicAlgorithmDefinitionType(struct soap*, const char *, int, om__BasicAlgorithmDefinitionType *const*, const char *);
SOAP_FMAC3 om__BasicAlgorithmDefinitionType ** SOAP_FMAC4 soap_in_PointerToom__BasicAlgorithmDefinitionType(struct soap*, const char*, om__BasicAlgorithmDefinitionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__BasicAlgorithmDefinitionType(struct soap*, om__BasicAlgorithmDefinitionType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__BasicAlgorithmDefinitionType
#define soap_write_PointerToom__BasicAlgorithmDefinitionType(soap, data) ( om::soap_serialize_PointerToom__BasicAlgorithmDefinitionType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__BasicAlgorithmDefinitionType(soap, data, "om:BasicAlgorithmDefinitionType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__BasicAlgorithmDefinitionType ** SOAP_FMAC4 soap_get_PointerToom__BasicAlgorithmDefinitionType(struct soap*, om__BasicAlgorithmDefinitionType **, const char*, const char*);

#ifndef soap_read_PointerToom__BasicAlgorithmDefinitionType
#define soap_read_PointerToom__BasicAlgorithmDefinitionType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__BasicAlgorithmDefinitionType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__SamplerType
#define SOAP_TYPE_om_PointerToom__SamplerType (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__SamplerType(struct soap*, om__SamplerType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__SamplerType(struct soap*, const char *, int, om__SamplerType *const*, const char *);
SOAP_FMAC3 om__SamplerType ** SOAP_FMAC4 soap_in_PointerToom__SamplerType(struct soap*, const char*, om__SamplerType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__SamplerType(struct soap*, om__SamplerType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__SamplerType
#define soap_write_PointerToom__SamplerType(soap, data) ( om::soap_serialize_PointerToom__SamplerType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__SamplerType(soap, data, "om:SamplerType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__SamplerType ** SOAP_FMAC4 soap_get_PointerToom__SamplerType(struct soap*, om__SamplerType **, const char*, const char*);

#ifndef soap_read_PointerToom__SamplerType
#define soap_read_PointerToom__SamplerType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__SamplerType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__AreaStatisticsType
#define SOAP_TYPE_om_PointerToom__AreaStatisticsType (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AreaStatisticsType(struct soap*, om__AreaStatisticsType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AreaStatisticsType(struct soap*, const char *, int, om__AreaStatisticsType *const*, const char *);
SOAP_FMAC3 om__AreaStatisticsType ** SOAP_FMAC4 soap_in_PointerToom__AreaStatisticsType(struct soap*, const char*, om__AreaStatisticsType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AreaStatisticsType(struct soap*, om__AreaStatisticsType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__AreaStatisticsType
#define soap_write_PointerToom__AreaStatisticsType(soap, data) ( om::soap_serialize_PointerToom__AreaStatisticsType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__AreaStatisticsType(soap, data, "om:AreaStatisticsType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__AreaStatisticsType ** SOAP_FMAC4 soap_get_PointerToom__AreaStatisticsType(struct soap*, om__AreaStatisticsType **, const char*, const char*);

#ifndef soap_read_PointerToom__AreaStatisticsType
#define soap_read_PointerToom__AreaStatisticsType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__AreaStatisticsType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics
#define SOAP_TYPE_om_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, _om__ProjectionStatisticsParametersType_AreaStatistics *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, const char *, int, _om__ProjectionStatisticsParametersType_AreaStatistics *const*, const char *);
SOAP_FMAC3 _om__ProjectionStatisticsParametersType_AreaStatistics ** SOAP_FMAC4 soap_in_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, const char*, _om__ProjectionStatisticsParametersType_AreaStatistics **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, _om__ProjectionStatisticsParametersType_AreaStatistics *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics
#define soap_write_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(soap, data) ( om::soap_serialize_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(soap, data, "om:ProjectionStatisticsParametersType-AreaStatistics", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__ProjectionStatisticsParametersType_AreaStatistics ** SOAP_FMAC4 soap_get_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(struct soap*, _om__ProjectionStatisticsParametersType_AreaStatistics **, const char*, const char*);

#ifndef soap_read_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics
#define soap_read_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__ProjectionStatisticsParametersType_AreaStatistics(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__TestResultType_RocCurve
#define SOAP_TYPE_om_PointerTo_om__TestResultType_RocCurve (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__TestResultType_RocCurve(struct soap*, _om__TestResultType_RocCurve *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__TestResultType_RocCurve(struct soap*, const char *, int, _om__TestResultType_RocCurve *const*, const char *);
SOAP_FMAC3 _om__TestResultType_RocCurve ** SOAP_FMAC4 soap_in_PointerTo_om__TestResultType_RocCurve(struct soap*, const char*, _om__TestResultType_RocCurve **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__TestResultType_RocCurve(struct soap*, _om__TestResultType_RocCurve *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__TestResultType_RocCurve
#define soap_write_PointerTo_om__TestResultType_RocCurve(soap, data) ( om::soap_serialize_PointerTo_om__TestResultType_RocCurve(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__TestResultType_RocCurve(soap, data, "om:TestResultType-RocCurve", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestResultType_RocCurve ** SOAP_FMAC4 soap_get_PointerTo_om__TestResultType_RocCurve(struct soap*, _om__TestResultType_RocCurve **, const char*, const char*);

#ifndef soap_read_PointerTo_om__TestResultType_RocCurve
#define soap_read_PointerTo_om__TestResultType_RocCurve(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__TestResultType_RocCurve(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__TestResultType_RocCurve_Ratio
#define SOAP_TYPE_om_PointerTo_om__TestResultType_RocCurve_Ratio (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__TestResultType_RocCurve_Ratio(struct soap*, _om__TestResultType_RocCurve_Ratio *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__TestResultType_RocCurve_Ratio(struct soap*, const char *, int, _om__TestResultType_RocCurve_Ratio *const*, const char *);
SOAP_FMAC3 _om__TestResultType_RocCurve_Ratio ** SOAP_FMAC4 soap_in_PointerTo_om__TestResultType_RocCurve_Ratio(struct soap*, const char*, _om__TestResultType_RocCurve_Ratio **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__TestResultType_RocCurve_Ratio(struct soap*, _om__TestResultType_RocCurve_Ratio *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__TestResultType_RocCurve_Ratio
#define soap_write_PointerTo_om__TestResultType_RocCurve_Ratio(soap, data) ( om::soap_serialize_PointerTo_om__TestResultType_RocCurve_Ratio(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__TestResultType_RocCurve_Ratio(soap, data, "om:TestResultType-RocCurve-Ratio", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestResultType_RocCurve_Ratio ** SOAP_FMAC4 soap_get_PointerTo_om__TestResultType_RocCurve_Ratio(struct soap*, _om__TestResultType_RocCurve_Ratio **, const char*, const char*);

#ifndef soap_read_PointerTo_om__TestResultType_RocCurve_Ratio
#define soap_read_PointerTo_om__TestResultType_RocCurve_Ratio(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__TestResultType_RocCurve_Ratio(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__TestResultType_ConfusionMatrix
#define SOAP_TYPE_om_PointerTo_om__TestResultType_ConfusionMatrix (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__TestResultType_ConfusionMatrix(struct soap*, _om__TestResultType_ConfusionMatrix *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__TestResultType_ConfusionMatrix(struct soap*, const char *, int, _om__TestResultType_ConfusionMatrix *const*, const char *);
SOAP_FMAC3 _om__TestResultType_ConfusionMatrix ** SOAP_FMAC4 soap_in_PointerTo_om__TestResultType_ConfusionMatrix(struct soap*, const char*, _om__TestResultType_ConfusionMatrix **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__TestResultType_ConfusionMatrix(struct soap*, _om__TestResultType_ConfusionMatrix *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__TestResultType_ConfusionMatrix
#define soap_write_PointerTo_om__TestResultType_ConfusionMatrix(soap, data) ( om::soap_serialize_PointerTo_om__TestResultType_ConfusionMatrix(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__TestResultType_ConfusionMatrix(soap, data, "om:TestResultType-ConfusionMatrix", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestResultType_ConfusionMatrix ** SOAP_FMAC4 soap_get_PointerTo_om__TestResultType_ConfusionMatrix(struct soap*, _om__TestResultType_ConfusionMatrix **, const char*, const char*);

#ifndef soap_read_PointerTo_om__TestResultType_ConfusionMatrix
#define soap_read_PointerTo_om__TestResultType_ConfusionMatrix(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__TestResultType_ConfusionMatrix(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__TestOptionsType_RocCurve
#define SOAP_TYPE_om_PointerTo_om__TestOptionsType_RocCurve (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__TestOptionsType_RocCurve(struct soap*, _om__TestOptionsType_RocCurve *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__TestOptionsType_RocCurve(struct soap*, const char *, int, _om__TestOptionsType_RocCurve *const*, const char *);
SOAP_FMAC3 _om__TestOptionsType_RocCurve ** SOAP_FMAC4 soap_in_PointerTo_om__TestOptionsType_RocCurve(struct soap*, const char*, _om__TestOptionsType_RocCurve **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__TestOptionsType_RocCurve(struct soap*, _om__TestOptionsType_RocCurve *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__TestOptionsType_RocCurve
#define soap_write_PointerTo_om__TestOptionsType_RocCurve(soap, data) ( om::soap_serialize_PointerTo_om__TestOptionsType_RocCurve(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__TestOptionsType_RocCurve(soap, data, "om:TestOptionsType-RocCurve", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestOptionsType_RocCurve ** SOAP_FMAC4 soap_get_PointerTo_om__TestOptionsType_RocCurve(struct soap*, _om__TestOptionsType_RocCurve **, const char*, const char*);

#ifndef soap_read_PointerTo_om__TestOptionsType_RocCurve
#define soap_read_PointerTo_om__TestOptionsType_RocCurve(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__TestOptionsType_RocCurve(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__ZeroOneIntervalType
#define SOAP_TYPE_om_PointerToom__ZeroOneIntervalType (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ZeroOneIntervalType(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ZeroOneIntervalType(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerToom__ZeroOneIntervalType(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ZeroOneIntervalType(struct soap*, double *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ZeroOneIntervalType
#define soap_write_PointerToom__ZeroOneIntervalType(soap, data) ( om::soap_serialize_PointerToom__ZeroOneIntervalType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ZeroOneIntervalType(soap, data, "om:ZeroOneIntervalType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerToom__ZeroOneIntervalType(struct soap*, double **, const char*, const char*);

#ifndef soap_read_PointerToom__ZeroOneIntervalType
#define soap_read_PointerToom__ZeroOneIntervalType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ZeroOneIntervalType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__TestOptionsType_ConfusionMatrix
#define SOAP_TYPE_om_PointerTo_om__TestOptionsType_ConfusionMatrix (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__TestOptionsType_ConfusionMatrix(struct soap*, _om__TestOptionsType_ConfusionMatrix *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__TestOptionsType_ConfusionMatrix(struct soap*, const char *, int, _om__TestOptionsType_ConfusionMatrix *const*, const char *);
SOAP_FMAC3 _om__TestOptionsType_ConfusionMatrix ** SOAP_FMAC4 soap_in_PointerTo_om__TestOptionsType_ConfusionMatrix(struct soap*, const char*, _om__TestOptionsType_ConfusionMatrix **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__TestOptionsType_ConfusionMatrix(struct soap*, _om__TestOptionsType_ConfusionMatrix *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__TestOptionsType_ConfusionMatrix
#define soap_write_PointerTo_om__TestOptionsType_ConfusionMatrix(soap, data) ( om::soap_serialize_PointerTo_om__TestOptionsType_ConfusionMatrix(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__TestOptionsType_ConfusionMatrix(soap, data, "om:TestOptionsType-ConfusionMatrix", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__TestOptionsType_ConfusionMatrix ** SOAP_FMAC4 soap_get_PointerTo_om__TestOptionsType_ConfusionMatrix(struct soap*, _om__TestOptionsType_ConfusionMatrix **, const char*, const char*);

#ifndef soap_read_PointerTo_om__TestOptionsType_ConfusionMatrix
#define soap_read_PointerTo_om__TestOptionsType_ConfusionMatrix(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__TestOptionsType_ConfusionMatrix(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__ThresholdParameterType
#define SOAP_TYPE_om_PointerToom__ThresholdParameterType (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ThresholdParameterType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ThresholdParameterType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToom__ThresholdParameterType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ThresholdParameterType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ThresholdParameterType
#define soap_write_PointerToom__ThresholdParameterType(soap, data) ( om::soap_serialize_PointerToom__ThresholdParameterType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ThresholdParameterType(soap, data, "om:ThresholdParameterType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToom__ThresholdParameterType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToom__ThresholdParameterType
#define soap_read_PointerToom__ThresholdParameterType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ThresholdParameterType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTobool
#define SOAP_TYPE_om_PointerTobool (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( om::soap_serialize_PointerTobool(soap, data), soap_begin_send(soap) || om::soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__OccurrencesType
#define SOAP_TYPE_om_PointerToom__OccurrencesType (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__OccurrencesType(struct soap*, om__OccurrencesType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__OccurrencesType(struct soap*, const char *, int, om__OccurrencesType *const*, const char *);
SOAP_FMAC3 om__OccurrencesType ** SOAP_FMAC4 soap_in_PointerToom__OccurrencesType(struct soap*, const char*, om__OccurrencesType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__OccurrencesType(struct soap*, om__OccurrencesType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__OccurrencesType
#define soap_write_PointerToom__OccurrencesType(soap, data) ( om::soap_serialize_PointerToom__OccurrencesType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__OccurrencesType(soap, data, "om:OccurrencesType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__OccurrencesType ** SOAP_FMAC4 soap_get_PointerToom__OccurrencesType(struct soap*, om__OccurrencesType **, const char*, const char*);

#ifndef soap_read_PointerToom__OccurrencesType
#define soap_read_PointerToom__OccurrencesType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__OccurrencesType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__EnvironmentType
#define SOAP_TYPE_om_PointerToom__EnvironmentType (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__EnvironmentType(struct soap*, om__EnvironmentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__EnvironmentType(struct soap*, const char *, int, om__EnvironmentType *const*, const char *);
SOAP_FMAC3 om__EnvironmentType ** SOAP_FMAC4 soap_in_PointerToom__EnvironmentType(struct soap*, const char*, om__EnvironmentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__EnvironmentType(struct soap*, om__EnvironmentType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__EnvironmentType
#define soap_write_PointerToom__EnvironmentType(soap, data) ( om::soap_serialize_PointerToom__EnvironmentType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__EnvironmentType(soap, data, "om:EnvironmentType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__EnvironmentType ** SOAP_FMAC4 soap_get_PointerToom__EnvironmentType(struct soap*, om__EnvironmentType **, const char*, const char*);

#ifndef soap_read_PointerToom__EnvironmentType
#define soap_read_PointerToom__EnvironmentType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__EnvironmentType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToint
#define SOAP_TYPE_om_PointerToint (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( om::soap_serialize_PointerToint(soap, data), soap_begin_send(soap) || om::soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__BasicLayerType
#define SOAP_TYPE_om_PointerToom__BasicLayerType (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__BasicLayerType(struct soap*, om__BasicLayerType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__BasicLayerType(struct soap*, const char *, int, om__BasicLayerType *const*, const char *);
SOAP_FMAC3 om__BasicLayerType ** SOAP_FMAC4 soap_in_PointerToom__BasicLayerType(struct soap*, const char*, om__BasicLayerType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__BasicLayerType(struct soap*, om__BasicLayerType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__BasicLayerType
#define soap_write_PointerToom__BasicLayerType(soap, data) ( om::soap_serialize_PointerToom__BasicLayerType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__BasicLayerType(soap, data, "om:BasicLayerType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__BasicLayerType ** SOAP_FMAC4 soap_get_PointerToom__BasicLayerType(struct soap*, om__BasicLayerType **, const char*, const char*);

#ifndef soap_read_PointerToom__BasicLayerType
#define soap_read_PointerToom__BasicLayerType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__BasicLayerType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__ModellingLayerType
#define SOAP_TYPE_om_PointerToom__ModellingLayerType (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__ModellingLayerType(struct soap*, om__ModellingLayerType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__ModellingLayerType(struct soap*, const char *, int, om__ModellingLayerType *const*, const char *);
SOAP_FMAC3 om__ModellingLayerType ** SOAP_FMAC4 soap_in_PointerToom__ModellingLayerType(struct soap*, const char*, om__ModellingLayerType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__ModellingLayerType(struct soap*, om__ModellingLayerType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__ModellingLayerType
#define soap_write_PointerToom__ModellingLayerType(soap, data) ( om::soap_serialize_PointerToom__ModellingLayerType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__ModellingLayerType(soap, data, "om:ModellingLayerType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__ModellingLayerType ** SOAP_FMAC4 soap_get_PointerToom__ModellingLayerType(struct soap*, om__ModellingLayerType **, const char*, const char*);

#ifndef soap_read_PointerToom__ModellingLayerType
#define soap_read_PointerToom__ModellingLayerType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__ModellingLayerType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__LayerMetadataType
#define SOAP_TYPE_om_PointerToom__LayerMetadataType (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__LayerMetadataType(struct soap*, om__LayerMetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__LayerMetadataType(struct soap*, const char *, int, om__LayerMetadataType *const*, const char *);
SOAP_FMAC3 om__LayerMetadataType ** SOAP_FMAC4 soap_in_PointerToom__LayerMetadataType(struct soap*, const char*, om__LayerMetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__LayerMetadataType(struct soap*, om__LayerMetadataType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__LayerMetadataType
#define soap_write_PointerToom__LayerMetadataType(soap, data) ( om::soap_serialize_PointerToom__LayerMetadataType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__LayerMetadataType(soap, data, "om:LayerMetadataType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__LayerMetadataType ** SOAP_FMAC4 soap_get_PointerToom__LayerMetadataType(struct soap*, om__LayerMetadataType **, const char*, const char*);

#ifndef soap_read_PointerToom__LayerMetadataType
#define soap_read_PointerToom__LayerMetadataType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__LayerMetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__LayersGroupType
#define SOAP_TYPE_om_PointerToom__LayersGroupType (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__LayersGroupType(struct soap*, om__LayersGroupType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__LayersGroupType(struct soap*, const char *, int, om__LayersGroupType *const*, const char *);
SOAP_FMAC3 om__LayersGroupType ** SOAP_FMAC4 soap_in_PointerToom__LayersGroupType(struct soap*, const char*, om__LayersGroupType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__LayersGroupType(struct soap*, om__LayersGroupType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__LayersGroupType
#define soap_write_PointerToom__LayersGroupType(soap, data) ( om::soap_serialize_PointerToom__LayersGroupType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__LayersGroupType(soap, data, "om:LayersGroupType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__LayersGroupType ** SOAP_FMAC4 soap_get_PointerToom__LayersGroupType(struct soap*, om__LayersGroupType **, const char*, const char*);

#ifndef soap_read_PointerToom__LayersGroupType
#define soap_read_PointerToom__LayersGroupType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__LayersGroupType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__NormalizationType
#define SOAP_TYPE_om_PointerToom__NormalizationType (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__NormalizationType(struct soap*, om__NormalizationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__NormalizationType(struct soap*, const char *, int, om__NormalizationType *const*, const char *);
SOAP_FMAC3 om__NormalizationType ** SOAP_FMAC4 soap_in_PointerToom__NormalizationType(struct soap*, const char*, om__NormalizationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__NormalizationType(struct soap*, om__NormalizationType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__NormalizationType
#define soap_write_PointerToom__NormalizationType(soap, data) ( om::soap_serialize_PointerToom__NormalizationType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__NormalizationType(soap, data, "om:NormalizationType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__NormalizationType ** SOAP_FMAC4 soap_get_PointerToom__NormalizationType(struct soap*, om__NormalizationType **, const char*, const char*);

#ifndef soap_read_PointerToom__NormalizationType
#define soap_read_PointerToom__NormalizationType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__NormalizationType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter
#define SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, const char *, int, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*const*, const char *);
SOAP_FMAC3 std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, const char*, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter
#define soap_write_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(soap, data) ( om::soap_serialize_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(soap, data), soap_begin_send(soap) || om::soap_put_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(soap, data, "", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter
#define soap_read_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTostd__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter
#define SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, const char *, int, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*const*, const char *);
SOAP_FMAC3 std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, const char*, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter
#define soap_write_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, data) ( om::soap_serialize_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, data), soap_begin_send(soap) || om::soap_put_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, data, "", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter
#define soap_read_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTostd__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter
#define SOAP_TYPE_om_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, const char *, int, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*const*, const char *);
SOAP_FMAC3 std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >** SOAP_FMAC4 soap_in_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, const char*, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >**, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*const*, const char*, const char*);

#ifndef soap_write_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter
#define soap_write_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(soap, data) ( om::soap_serialize_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(soap, data), soap_begin_send(soap) || om::soap_put_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(soap, data, "", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >** SOAP_FMAC4 soap_get_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >**, const char*, const char*);

#ifndef soap_read_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter
#define soap_read_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTostd__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues
#define SOAP_TYPE_om_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, const char *, int, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *const*, const char *);
SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues ** SOAP_FMAC4 soap_in_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, const char*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues
#define soap_write_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, data) ( om::soap_serialize_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, data, "om:AlgorithmMetadataType-Parameters-Parameter-AcceptedValues", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues ** SOAP_FMAC4 soap_get_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues **, const char*, const char*);

#ifndef soap_read_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues
#define soap_read_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedValues(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange
#define SOAP_TYPE_om_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, const char *, int, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *const*, const char *);
SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange ** SOAP_FMAC4 soap_in_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, const char*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange *const*, const char*, const char*);

#ifndef soap_write_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange
#define soap_write_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, data) ( om::soap_serialize_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, data), soap_begin_send(soap) || om::soap_put_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, data, "om:AlgorithmMetadataType-Parameters-Parameter-AcceptedRange", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange ** SOAP_FMAC4 soap_get_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(struct soap*, _om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange **, const char*, const char*);

#ifndef soap_read_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange
#define soap_read_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTo_om__AlgorithmMetadataType_Parameters_Parameter_AcceptedRange(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTodouble
#define SOAP_TYPE_om_PointerTodouble (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);

#ifndef soap_write_PointerTodouble
#define soap_write_PointerTodouble(soap, data) ( om::soap_serialize_PointerTodouble(soap, data), soap_begin_send(soap) || om::soap_put_PointerTodouble(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);

#ifndef soap_read_PointerTodouble
#define soap_read_PointerTodouble(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTodouble(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerTostd__string
#define SOAP_TYPE_om_PointerTostd__string (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( om::soap_serialize_PointerTostd__string(soap, data), soap_begin_send(soap) || om::soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__AlgorithmMetadataType
#define SOAP_TYPE_om_PointerToom__AlgorithmMetadataType (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AlgorithmMetadataType(struct soap*, om__AlgorithmMetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AlgorithmMetadataType(struct soap*, const char *, int, om__AlgorithmMetadataType *const*, const char *);
SOAP_FMAC3 om__AlgorithmMetadataType ** SOAP_FMAC4 soap_in_PointerToom__AlgorithmMetadataType(struct soap*, const char*, om__AlgorithmMetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AlgorithmMetadataType(struct soap*, om__AlgorithmMetadataType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__AlgorithmMetadataType
#define soap_write_PointerToom__AlgorithmMetadataType(soap, data) ( om::soap_serialize_PointerToom__AlgorithmMetadataType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__AlgorithmMetadataType(soap, data, "om:AlgorithmMetadataType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__AlgorithmMetadataType ** SOAP_FMAC4 soap_get_PointerToom__AlgorithmMetadataType(struct soap*, om__AlgorithmMetadataType **, const char*, const char*);

#ifndef soap_read_PointerToom__AlgorithmMetadataType
#define soap_read_PointerToom__AlgorithmMetadataType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__AlgorithmMetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_PointerToom__AlgorithmsMetadataType
#define SOAP_TYPE_om_PointerToom__AlgorithmsMetadataType (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToom__AlgorithmsMetadataType(struct soap*, om__AlgorithmsMetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToom__AlgorithmsMetadataType(struct soap*, const char *, int, om__AlgorithmsMetadataType *const*, const char *);
SOAP_FMAC3 om__AlgorithmsMetadataType ** SOAP_FMAC4 soap_in_PointerToom__AlgorithmsMetadataType(struct soap*, const char*, om__AlgorithmsMetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToom__AlgorithmsMetadataType(struct soap*, om__AlgorithmsMetadataType *const*, const char*, const char*);

#ifndef soap_write_PointerToom__AlgorithmsMetadataType
#define soap_write_PointerToom__AlgorithmsMetadataType(soap, data) ( om::soap_serialize_PointerToom__AlgorithmsMetadataType(soap, data), soap_begin_send(soap) || om::soap_put_PointerToom__AlgorithmsMetadataType(soap, data, "om:AlgorithmsMetadataType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 om__AlgorithmsMetadataType ** SOAP_FMAC4 soap_get_PointerToom__AlgorithmsMetadataType(struct soap*, om__AlgorithmsMetadataType **, const char*, const char*);

#ifndef soap_read_PointerToom__AlgorithmsMetadataType
#define soap_read_PointerToom__AlgorithmsMetadataType(soap, data) ( soap_begin_recv(soap) || !om::soap_get_PointerToom__AlgorithmsMetadataType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om__QName
#define SOAP_TYPE_om__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( om::soap_serialize__QName(soap, data), soap_begin_send(soap) || om::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !om::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_string
#define SOAP_TYPE_om_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( om::soap_serialize_string(soap, data), soap_begin_send(soap) || om::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !om::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__ResultSetType_Job
#define SOAP_TYPE_om_std__vectorTemplateOf_om__ResultSetType_Job (178)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__ResultSetType_Job(struct soap*, std::vector<_om__ResultSetType_Job >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__ResultSetType_Job(struct soap*, const std::vector<_om__ResultSetType_Job >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__ResultSetType_Job(struct soap*, const char*, int, const std::vector<_om__ResultSetType_Job >*, const char*);
SOAP_FMAC3 std::vector<_om__ResultSetType_Job >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__ResultSetType_Job(struct soap*, const char*, std::vector<_om__ResultSetType_Job >*, const char*);
SOAP_FMAC1 std::vector<_om__ResultSetType_Job > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__ResultSetType_Job(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__ResultSetType_Job > * soap_new_std__vectorTemplateOf_om__ResultSetType_Job(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__ResultSetType_Job(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__ResultSetType_Job(struct soap *soap, std::vector<_om__ResultSetType_Job >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__ResultSetType_Job(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__JobTicketsType_Job
#define SOAP_TYPE_om_std__vectorTemplateOf_om__JobTicketsType_Job (168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__JobTicketsType_Job(struct soap*, std::vector<_om__JobTicketsType_Job >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__JobTicketsType_Job(struct soap*, const std::vector<_om__JobTicketsType_Job >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__JobTicketsType_Job(struct soap*, const char*, int, const std::vector<_om__JobTicketsType_Job >*, const char*);
SOAP_FMAC3 std::vector<_om__JobTicketsType_Job >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__JobTicketsType_Job(struct soap*, const char*, std::vector<_om__JobTicketsType_Job >*, const char*);
SOAP_FMAC1 std::vector<_om__JobTicketsType_Job > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__JobTicketsType_Job(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__JobTicketsType_Job > * soap_new_std__vectorTemplateOf_om__JobTicketsType_Job(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__JobTicketsType_Job(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__JobTicketsType_Job(struct soap *soap, std::vector<_om__JobTicketsType_Job >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__JobTicketsType_Job(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm
#define SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, const std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, const char*, int, const std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*, const char*);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_SerializedAlgorithm >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, const char*, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*, const char*);
SOAP_FMAC1 std::vector<_om__ExperimentParametersType_SerializedAlgorithm > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__ExperimentParametersType_SerializedAlgorithm > * soap_new_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap *soap, std::vector<_om__ExperimentParametersType_SerializedAlgorithm >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__ExperimentParametersType_SerializedAlgorithm(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings
#define SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, std::vector<_om__ExperimentParametersType_AlgorithmSettings >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, const std::vector<_om__ExperimentParametersType_AlgorithmSettings >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, const char*, int, const std::vector<_om__ExperimentParametersType_AlgorithmSettings >*, const char*);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_AlgorithmSettings >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, const char*, std::vector<_om__ExperimentParametersType_AlgorithmSettings >*, const char*);
SOAP_FMAC1 std::vector<_om__ExperimentParametersType_AlgorithmSettings > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__ExperimentParametersType_AlgorithmSettings > * soap_new_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap *soap, std::vector<_om__ExperimentParametersType_AlgorithmSettings >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__ExperimentParametersType_AlgorithmSettings(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Absence
#define SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Absence (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, std::vector<_om__ExperimentParametersType_Absence >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, const std::vector<_om__ExperimentParametersType_Absence >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, const char*, int, const std::vector<_om__ExperimentParametersType_Absence >*, const char*);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Absence >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, const char*, std::vector<_om__ExperimentParametersType_Absence >*, const char*);
SOAP_FMAC1 std::vector<_om__ExperimentParametersType_Absence > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__ExperimentParametersType_Absence > * soap_new_std__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Absence(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap *soap, std::vector<_om__ExperimentParametersType_Absence >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__ExperimentParametersType_Absence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point
#define SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point (149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(struct soap*, std::vector<_om__ExperimentParametersType_Absence_Point >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(struct soap*, const std::vector<_om__ExperimentParametersType_Absence_Point >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(struct soap*, const char*, int, const std::vector<_om__ExperimentParametersType_Absence_Point >*, const char*);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Absence_Point >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(struct soap*, const char*, std::vector<_om__ExperimentParametersType_Absence_Point >*, const char*);
SOAP_FMAC1 std::vector<_om__ExperimentParametersType_Absence_Point > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__ExperimentParametersType_Absence_Point > * soap_new_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(struct soap *soap, std::vector<_om__ExperimentParametersType_Absence_Point >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__ExperimentParametersType_Absence_Point(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Presence
#define SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Presence (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, std::vector<_om__ExperimentParametersType_Presence >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, const std::vector<_om__ExperimentParametersType_Presence >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, const char*, int, const std::vector<_om__ExperimentParametersType_Presence >*, const char*);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Presence >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, const char*, std::vector<_om__ExperimentParametersType_Presence >*, const char*);
SOAP_FMAC1 std::vector<_om__ExperimentParametersType_Presence > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__ExperimentParametersType_Presence > * soap_new_std__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Presence(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap *soap, std::vector<_om__ExperimentParametersType_Presence >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__ExperimentParametersType_Presence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point
#define SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(struct soap*, std::vector<_om__ExperimentParametersType_Presence_Point >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(struct soap*, const std::vector<_om__ExperimentParametersType_Presence_Point >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(struct soap*, const char*, int, const std::vector<_om__ExperimentParametersType_Presence_Point >*, const char*);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Presence_Point >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(struct soap*, const char*, std::vector<_om__ExperimentParametersType_Presence_Point >*, const char*);
SOAP_FMAC1 std::vector<_om__ExperimentParametersType_Presence_Point > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__ExperimentParametersType_Presence_Point > * soap_new_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(struct soap *soap, std::vector<_om__ExperimentParametersType_Presence_Point >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__ExperimentParametersType_Presence_Point(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Environment
#define SOAP_TYPE_om_std__vectorTemplateOf_om__ExperimentParametersType_Environment (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__ExperimentParametersType_Environment(struct soap*, std::vector<_om__ExperimentParametersType_Environment >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__ExperimentParametersType_Environment(struct soap*, const std::vector<_om__ExperimentParametersType_Environment >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__ExperimentParametersType_Environment(struct soap*, const char*, int, const std::vector<_om__ExperimentParametersType_Environment >*, const char*);
SOAP_FMAC3 std::vector<_om__ExperimentParametersType_Environment >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__ExperimentParametersType_Environment(struct soap*, const char*, std::vector<_om__ExperimentParametersType_Environment >*, const char*);
SOAP_FMAC1 std::vector<_om__ExperimentParametersType_Environment > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Environment(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__ExperimentParametersType_Environment > * soap_new_std__vectorTemplateOf_om__ExperimentParametersType_Environment(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__ExperimentParametersType_Environment(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__ExperimentParametersType_Environment(struct soap *soap, std::vector<_om__ExperimentParametersType_Environment >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__ExperimentParametersType_Environment(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__OccurrencesType_Point
#define SOAP_TYPE_om_std__vectorTemplateOf_om__OccurrencesType_Point (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__OccurrencesType_Point(struct soap*, std::vector<_om__OccurrencesType_Point >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__OccurrencesType_Point(struct soap*, const std::vector<_om__OccurrencesType_Point >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__OccurrencesType_Point(struct soap*, const char*, int, const std::vector<_om__OccurrencesType_Point >*, const char*);
SOAP_FMAC3 std::vector<_om__OccurrencesType_Point >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__OccurrencesType_Point(struct soap*, const char*, std::vector<_om__OccurrencesType_Point >*, const char*);
SOAP_FMAC1 std::vector<_om__OccurrencesType_Point > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__OccurrencesType_Point(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__OccurrencesType_Point > * soap_new_std__vectorTemplateOf_om__OccurrencesType_Point(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__OccurrencesType_Point(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__OccurrencesType_Point(struct soap *soap, std::vector<_om__OccurrencesType_Point >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__OccurrencesType_Point(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOfPointerToom__ModellingLayerType
#define SOAP_TYPE_om_std__vectorTemplateOfPointerToom__ModellingLayerType (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToom__ModellingLayerType(struct soap*, std::vector<om__ModellingLayerType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToom__ModellingLayerType(struct soap*, const std::vector<om__ModellingLayerType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToom__ModellingLayerType(struct soap*, const char*, int, const std::vector<om__ModellingLayerType * >*, const char*);
SOAP_FMAC3 std::vector<om__ModellingLayerType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToom__ModellingLayerType(struct soap*, const char*, std::vector<om__ModellingLayerType * >*, const char*);
SOAP_FMAC1 std::vector<om__ModellingLayerType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToom__ModellingLayerType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<om__ModellingLayerType * > * soap_new_std__vectorTemplateOfPointerToom__ModellingLayerType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerToom__ModellingLayerType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerToom__ModellingLayerType(struct soap *soap, std::vector<om__ModellingLayerType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToom__ModellingLayerType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOfPointerToom__LayerMetadataType
#define SOAP_TYPE_om_std__vectorTemplateOfPointerToom__LayerMetadataType (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToom__LayerMetadataType(struct soap*, std::vector<om__LayerMetadataType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToom__LayerMetadataType(struct soap*, const std::vector<om__LayerMetadataType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToom__LayerMetadataType(struct soap*, const char*, int, const std::vector<om__LayerMetadataType * >*, const char*);
SOAP_FMAC3 std::vector<om__LayerMetadataType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToom__LayerMetadataType(struct soap*, const char*, std::vector<om__LayerMetadataType * >*, const char*);
SOAP_FMAC1 std::vector<om__LayerMetadataType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToom__LayerMetadataType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<om__LayerMetadataType * > * soap_new_std__vectorTemplateOfPointerToom__LayerMetadataType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerToom__LayerMetadataType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerToom__LayerMetadataType(struct soap *soap, std::vector<om__LayerMetadataType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToom__LayerMetadataType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOfPointerToom__LayersGroupType
#define SOAP_TYPE_om_std__vectorTemplateOfPointerToom__LayersGroupType (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToom__LayersGroupType(struct soap*, std::vector<om__LayersGroupType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToom__LayersGroupType(struct soap*, const std::vector<om__LayersGroupType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToom__LayersGroupType(struct soap*, const char*, int, const std::vector<om__LayersGroupType * >*, const char*);
SOAP_FMAC3 std::vector<om__LayersGroupType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToom__LayersGroupType(struct soap*, const char*, std::vector<om__LayersGroupType * >*, const char*);
SOAP_FMAC1 std::vector<om__LayersGroupType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToom__LayersGroupType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<om__LayersGroupType * > * soap_new_std__vectorTemplateOfPointerToom__LayersGroupType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerToom__LayersGroupType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerToom__LayersGroupType(struct soap *soap, std::vector<om__LayersGroupType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToom__LayersGroupType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter
#define SOAP_TYPE_om_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, const std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, const char*, int, const std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*, const char*);
SOAP_FMAC3 std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, const char*, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*, const char*);
SOAP_FMAC1 std::vector<_om__SerializedAlgorithmType_Parameters_Parameter > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__SerializedAlgorithmType_Parameters_Parameter > * soap_new_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap *soap, std::vector<_om__SerializedAlgorithmType_Parameters_Parameter >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__SerializedAlgorithmType_Parameters_Parameter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter
#define SOAP_TYPE_om_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, const std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, const char*, int, const std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*, const char*);
SOAP_FMAC3 std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, const char*, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*, const char*);
SOAP_FMAC1 std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter > * soap_new_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap *soap, std::vector<_om__BasicAlgorithmDefinitionType_Parameters_Parameter >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__BasicAlgorithmDefinitionType_Parameters_Parameter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter
#define SOAP_TYPE_om_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, const std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, const char*, int, const std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*, const char*);
SOAP_FMAC3 std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, const char*, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*, const char*);
SOAP_FMAC1 std::vector<_om__AlgorithmMetadataType_Parameters_Parameter > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__AlgorithmMetadataType_Parameters_Parameter > * soap_new_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap *soap, std::vector<_om__AlgorithmMetadataType_Parameters_Parameter >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__AlgorithmMetadataType_Parameters_Parameter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOfstd__string
#define SOAP_TYPE_om_std__vectorTemplateOfstd__string (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer
#define SOAP_TYPE_om_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(struct soap*, std::vector<_om__AlgorithmMetadataType_Developers_Developer >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(struct soap*, const std::vector<_om__AlgorithmMetadataType_Developers_Developer >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(struct soap*, const char*, int, const std::vector<_om__AlgorithmMetadataType_Developers_Developer >*, const char*);
SOAP_FMAC3 std::vector<_om__AlgorithmMetadataType_Developers_Developer >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(struct soap*, const char*, std::vector<_om__AlgorithmMetadataType_Developers_Developer >*, const char*);
SOAP_FMAC1 std::vector<_om__AlgorithmMetadataType_Developers_Developer > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__AlgorithmMetadataType_Developers_Developer > * soap_new_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(struct soap *soap, std::vector<_om__AlgorithmMetadataType_Developers_Developer >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__AlgorithmMetadataType_Developers_Developer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer
#define SOAP_TYPE_om_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(struct soap*, std::vector<_om__AlgorithmMetadataType_Designers_Designer >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(struct soap*, const std::vector<_om__AlgorithmMetadataType_Designers_Designer >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(struct soap*, const char*, int, const std::vector<_om__AlgorithmMetadataType_Designers_Designer >*, const char*);
SOAP_FMAC3 std::vector<_om__AlgorithmMetadataType_Designers_Designer >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(struct soap*, const char*, std::vector<_om__AlgorithmMetadataType_Designers_Designer >*, const char*);
SOAP_FMAC1 std::vector<_om__AlgorithmMetadataType_Designers_Designer > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_om__AlgorithmMetadataType_Designers_Designer > * soap_new_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(struct soap *soap, std::vector<_om__AlgorithmMetadataType_Designers_Designer >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_om__AlgorithmMetadataType_Designers_Designer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_om_std__vectorTemplateOfPointerToom__AlgorithmMetadataType
#define SOAP_TYPE_om_std__vectorTemplateOfPointerToom__AlgorithmMetadataType (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(struct soap*, std::vector<om__AlgorithmMetadataType * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(struct soap*, const std::vector<om__AlgorithmMetadataType * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(struct soap*, const char*, int, const std::vector<om__AlgorithmMetadataType * >*, const char*);
SOAP_FMAC3 std::vector<om__AlgorithmMetadataType * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(struct soap*, const char*, std::vector<om__AlgorithmMetadataType * >*, const char*);
SOAP_FMAC1 std::vector<om__AlgorithmMetadataType * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<om__AlgorithmMetadataType * > * soap_new_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(struct soap *soap, std::vector<om__AlgorithmMetadataType * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToom__AlgorithmMetadataType(struct soap*, int, int, void*, size_t, const void*, size_t);

} // namespace om


#endif

/* End of omH.h */
