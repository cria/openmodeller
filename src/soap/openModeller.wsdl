<?xml version="1.0" encoding="UTF-8"?>
<definitions name="openModeller"
 targetNamespace="http://openmodeller.cria.org.br/ws/1.0"
 xmlns:tns="http://openmodeller.cria.org.br/ws/1.0"
 xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
 xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
 xmlns:om="http://openmodeller.cria.org.br/xml/1.0"
 xmlns:omws="http://openmodeller.cria.org.br/ws/1.0"
 xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/"
 xmlns:MIME="http://schemas.xmlsoap.org/wsdl/mime/"
 xmlns:DIME="http://schemas.xmlsoap.org/ws/2002/04/dime/wsdl/"
 xmlns:WSDL="http://schemas.xmlsoap.org/wsdl/"
 xmlns="http://schemas.xmlsoap.org/wsdl/">

<types>

 <schema targetNamespace="http://openmodeller.cria.org.br/ws/1.0"
  xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
  xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:om="http://openmodeller.cria.org.br/xml/1.0"
  xmlns:omws="http://openmodeller.cria.org.br/ws/1.0"
  xmlns="http://www.w3.org/2001/XMLSchema"
  elementFormDefault="unqualified"
  attributeFormDefault="unqualified">
  <import namespace="http://openmodeller.cria.org.br/xml/1.0" schemaLocation="http://openmodeller.cria.org.br/xml/1.0/openModeller.xsd"/>
  <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>
  <complexType name="createModel">
   <sequence>
     <element ref="om:ModelParameters" minOccurs="0" maxOccurs="1" nillable="true"/>
   </sequence>
  </complexType>
  <complexType name="projectModel">
   <sequence>
     <element ref="om:ProjectionParameters" minOccurs="0" maxOccurs="1" nillable="true"/>
   </sequence>
  </complexType>
  <element name="version" type="xsd:string"/>
  <!-- operation request element -->
  <element name="ping">
   <complexType>
    <sequence>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="pingResponse">
   <complexType>
    <sequence>
     <element name="status" type="xsd:int" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getAlgorithms">
   <complexType>
    <sequence>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getAlgorithmsResponse">
   <complexType>
    <sequence>
     <element ref="om:AvailableAlgorithms" minOccurs="1" maxOccurs="1"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getLayers">
   <complexType>
    <sequence>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getLayersResponse">
   <complexType>
    <sequence>
     <element ref="om:AvailableLayers" minOccurs="1" maxOccurs="1"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="createModel">
   <complexType>
    <sequence>
     <element ref="om:ModelParameters" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="createModelResponse">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getModel">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getModelResponse">
   <complexType>
    <sequence>
     <element ref="om:ModelEnvelope" minOccurs="1" maxOccurs="1"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="projectModel">
   <complexType>
    <sequence>
     <element ref="om:ProjectionParameters" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="projectModelResponse">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getProgress">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getProgressResponse">
   <complexType>
    <sequence>
     <element name="progress" type="xsd:int" minOccurs="1" maxOccurs="1"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getLog">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getLogResponse">
   <complexType>
    <sequence>
     <element name="log" type="xsd:string" minOccurs="1" maxOccurs="1"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getMapAsAttachment">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getMapAsAttachmentResponse">
   <complexType>
    <sequence>
     <element name="file" type="xsd:base64Binary" minOccurs="1" maxOccurs="1"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation request element -->
  <element name="getMapAsUrl">
   <complexType>
    <sequence>
     <element name="ticket" type="xsd:string" minOccurs="0" maxOccurs="1" nillable="true"/>
    </sequence>
   </complexType>
  </element>
  <!-- operation response element -->
  <element name="getMapAsUrlResponse">
   <complexType>
    <sequence>
     <element name="url" type="xsd:string" minOccurs="1" maxOccurs="1"/>
    </sequence>
   </complexType>
  </element>
 </schema>

</types>

<message name="pingRequest">
 <part name="parameters" element="omws:ping"/>
</message>

<message name="pingResponse">
 <part name="parameters" element="omws:pingResponse"/>
</message>

<message name="getAlgorithms">
 <part name="parameters" element="omws:getAlgorithms"/>
</message>

<message name="getAlgorithmsResponse">
 <part name="parameters" element="omws:getAlgorithmsResponse"/>
</message>

<message name="getLayers">
 <part name="parameters" element="omws:getLayers"/>
</message>

<message name="getLayersResponse">
 <part name="parameters" element="omws:getLayersResponse"/>
</message>

<message name="createModelRequest">
 <part name="parameters" element="omws:createModel"/>
</message>

<message name="createModelResponse">
 <part name="parameters" element="omws:createModelResponse"/>
</message>

<message name="getModel">
 <part name="parameters" element="omws:getModel"/>
</message>

<message name="getModelResponse">
 <part name="parameters" element="omws:getModelResponse"/>
</message>

<message name="projectModelRequest">
 <part name="parameters" element="omws:projectModel"/>
</message>

<message name="projectModelResponse">
 <part name="parameters" element="omws:projectModelResponse"/>
</message>

<message name="getProgressRequest">
 <part name="parameters" element="omws:getProgress"/>
</message>

<message name="getProgressResponse">
 <part name="parameters" element="omws:getProgressResponse"/>
</message>

<message name="getLogRequest">
 <part name="parameters" element="omws:getLog"/>
</message>

<message name="getLogResponse">
 <part name="parameters" element="omws:getLogResponse"/>
</message>

<message name="getMapAsAttachmentRequest">
 <part name="parameters" element="omws:getMapAsAttachment"/>
</message>

<message name="getMapAsAttachmentResponse">
 <part name="parameters" element="omws:getMapAsAttachmentResponse"/>
</message>

<message name="getMapAsUrlRequest">
 <part name="parameters" element="omws:getMapAsUrl"/>
</message>

<message name="getMapAsUrlResponse">
 <part name="parameters" element="omws:getMapAsUrlResponse"/>
</message>

<message name="openModellerHeader">
 <part name="version" element="omws:version"/>
</message>

<portType name="openModellerPortType">
 <operation name="ping">
  <documentation>Simple method to monitor service availability.</documentation>
  <input message="tns:pingRequest"/>
  <output message="tns:pingResponse"/>
 </operation>
 <operation name="getAlgorithms">
  <documentation>Returns metadata about all available algorithms.</documentation>
  <input message="tns:getAlgorithms"/>
  <output message="tns:getAlgorithmsResponse"/>
 </operation>
 <operation name="getLayers">
  <documentation>Returns all available layers on the server side.</documentation>
  <input message="tns:getLayers"/>
  <output message="tns:getLayersResponse"/>
 </operation>
 <operation name="createModel">
  <documentation>Service definition of function omws__createModel</documentation>
  <input message="tns:createModelRequest"/>
  <output message="tns:createModelResponse"/>
 </operation>
 <operation name="getModel">
  <documentation>Service definition of function omws__getModel</documentation>
  <input message="tns:getModel"/>
  <output message="tns:getModelResponse"/>
 </operation>
 <operation name="projectModel">
  <documentation>Service definition of function omws__projectModel</documentation>
  <input message="tns:projectModelRequest"/>
  <output message="tns:projectModelResponse"/>
 </operation>
 <operation name="getProgress">
  <documentation>Service definition of function omws__getProgress</documentation>
  <input message="tns:getProgressRequest"/>
  <output message="tns:getProgressResponse"/>
 </operation>
 <operation name="getLog">
  <documentation>Service definition of function omws__getLog</documentation>
  <input message="tns:getLogRequest"/>
  <output message="tns:getLogResponse"/>
 </operation>
 <operation name="getMapAsAttachment">
  <documentation>Service definition of function omws__getMapAsAttachment</documentation>
  <input message="tns:getMapAsAttachmentRequest"/>
  <output message="tns:getMapAsAttachmentResponse"/>
 </operation>
 <operation name="getMapAsUrl">
  <documentation>Service definition of function omws__getMapAsUrl</documentation>
  <input message="tns:getMapAsUrlRequest"/>
  <output message="tns:getMapAsUrlResponse"/>
 </operation>
</portType>

<binding name="openModeller" type="tns:openModellerPortType">
 <SOAP:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
 <operation name="ping">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getAlgorithms">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getLayers">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="createModel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getModel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="projectModel">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getProgress">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getLog">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getMapAsAttachment">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
 <operation name="getMapAsUrl">
  <SOAP:operation soapAction=""/>
  <input>
     <SOAP:body parts="parameters" use="literal"/>
  </input>
  <output>
     <SOAP:body parts="parameters" use="literal"/>
  </output>
 </operation>
</binding>

<service name="openModeller">
 <documentation>Web Services interface for remote invocation of openModeller</documentation>
 <port name="openModeller" binding="tns:openModeller">
  <SOAP:address location="http://localhost:8085"/>
 </port>
</service>

</definitions>
