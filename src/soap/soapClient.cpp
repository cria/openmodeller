/* soapClient.cpp
   Generated by gSOAP 2.7.6d from om_soap.hh
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.6d 2006-02-09 21:06:47 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__getAlgorithms(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct om__getAlgorithmsResponse &r)
{	struct om__getAlgorithms soap_tmp_om__getAlgorithms;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8085";
	soap->encodingStyle = NULL;
	soap_tmp_om__getAlgorithms._ = _;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_om__getAlgorithms(soap, &soap_tmp_om__getAlgorithms);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_om__getAlgorithms(soap, &soap_tmp_om__getAlgorithms, "om:getAlgorithms", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__getAlgorithms(soap, &soap_tmp_om__getAlgorithms, "om:getAlgorithms", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_om__getAlgorithmsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_om__getAlgorithmsResponse(soap, &r, "om:getAlgorithmsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__createModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct soap_Points *points, struct soap_Maps *maps, struct soap_Mask *mask, struct soap_Algorithm *algorithm, struct soap_Output *output, char **ticket)
{	struct om__createModel soap_tmp_om__createModel;
	struct om__createModelResponse *soap_tmp_om__createModelResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8085";
	soap->encodingStyle = NULL;
	soap_tmp_om__createModel.points = points;
	soap_tmp_om__createModel.maps = maps;
	soap_tmp_om__createModel.mask = mask;
	soap_tmp_om__createModel.algorithm = algorithm;
	soap_tmp_om__createModel.output = output;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_om__createModel(soap, &soap_tmp_om__createModel);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_om__createModel(soap, &soap_tmp_om__createModel, "om:createModel", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__createModel(soap, &soap_tmp_om__createModel, "om:createModel", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	*ticket = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_om__createModelResponse = soap_get_om__createModelResponse(soap, NULL, "om:createModelResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (ticket && soap_tmp_om__createModelResponse->ticket)
		*ticket = *soap_tmp_om__createModelResponse->ticket;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__getDistributionMap(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, xsd__base64Binary &file)
{	struct om__getDistributionMap soap_tmp_om__getDistributionMap;
	struct om__getDistributionMapResponse *soap_tmp_om__getDistributionMapResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8085";
	soap->encodingStyle = NULL;
	soap_tmp_om__getDistributionMap.ticket = ticket;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_om__getDistributionMap(soap, &soap_tmp_om__getDistributionMap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_om__getDistributionMap(soap, &soap_tmp_om__getDistributionMap, "om:getDistributionMap", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__getDistributionMap(soap, &soap_tmp_om__getDistributionMap, "om:getDistributionMap", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&file)
		return soap_closesock(soap);
	file.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_om__getDistributionMapResponse = soap_get_om__getDistributionMapResponse(soap, NULL, "om:getDistributionMapResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	file = soap_tmp_om__getDistributionMapResponse->file;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__ping(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *status)
{	struct om__ping soap_tmp_om__ping;
	struct om__pingResponse *soap_tmp_om__pingResponse;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:8085";
	soap->encodingStyle = NULL;
	soap_tmp_om__ping._ = _;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_om__ping(soap, &soap_tmp_om__ping);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_om__ping(soap, &soap_tmp_om__ping, "om:ping", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__ping(soap, &soap_tmp_om__ping, "om:ping", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_xsd__int(soap, status);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_om__pingResponse = soap_get_om__pingResponse(soap, NULL, "om:pingResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (status && soap_tmp_om__pingResponse->status)
		*status = *soap_tmp_om__pingResponse->status;
	return soap_closesock(soap);
}

/* End of soapClient.cpp */
