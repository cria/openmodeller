/* soapServer.cpp
   Generated by gSOAP 2.7.6d from om_soap.hh
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.7.6d 2006-02-09 21:06:47 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (!--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "om:getAlgorithms"))
		return soap_serve_om__getAlgorithms(soap);
	if (!soap_match_tag(soap, soap->tag, "om:createModel"))
		return soap_serve_om__createModel(soap);
	if (!soap_match_tag(soap, soap->tag, "om:getDistributionMap"))
		return soap_serve_om__getDistributionMap(soap);
	if (!soap_match_tag(soap, soap->tag, "om:ping"))
		return soap_serve_om__ping(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__getAlgorithms(struct soap *soap)
{	struct om__getAlgorithms soap_tmp_om__getAlgorithms;
	struct om__getAlgorithmsResponse r;
	soap_default_om__getAlgorithmsResponse(soap, &r);
	soap_default_om__getAlgorithms(soap, &soap_tmp_om__getAlgorithms);
	soap->encodingStyle = NULL;
	if (!soap_get_om__getAlgorithms(soap, &soap_tmp_om__getAlgorithms, "om:getAlgorithms", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = om__getAlgorithms(soap, soap_tmp_om__getAlgorithms._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_om__getAlgorithmsResponse(soap, &r);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_om__getAlgorithmsResponse(soap, &r, "om:getAlgorithmsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__getAlgorithmsResponse(soap, &r, "om:getAlgorithmsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__createModel(struct soap *soap)
{	struct om__createModel soap_tmp_om__createModel;
	struct om__createModelResponse soap_tmp_om__createModelResponse;
	char * soap_tmp_xsd__string;
	soap_default_om__createModelResponse(soap, &soap_tmp_om__createModelResponse);
	soap_tmp_xsd__string = NULL;
	soap_tmp_om__createModelResponse.ticket = &soap_tmp_xsd__string;
	soap_default_om__createModel(soap, &soap_tmp_om__createModel);
	soap->encodingStyle = NULL;
	if (!soap_get_om__createModel(soap, &soap_tmp_om__createModel, "om:createModel", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = om__createModel(soap, soap_tmp_om__createModel.points, soap_tmp_om__createModel.maps, soap_tmp_om__createModel.mask, soap_tmp_om__createModel.algorithm, soap_tmp_om__createModel.output, &soap_tmp_xsd__string);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_om__createModelResponse(soap, &soap_tmp_om__createModelResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_om__createModelResponse(soap, &soap_tmp_om__createModelResponse, "om:createModelResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__createModelResponse(soap, &soap_tmp_om__createModelResponse, "om:createModelResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__getDistributionMap(struct soap *soap)
{	struct om__getDistributionMap soap_tmp_om__getDistributionMap;
	struct om__getDistributionMapResponse soap_tmp_om__getDistributionMapResponse;
	soap_default_om__getDistributionMapResponse(soap, &soap_tmp_om__getDistributionMapResponse);
	soap_default_om__getDistributionMap(soap, &soap_tmp_om__getDistributionMap);
	soap->encodingStyle = NULL;
	if (!soap_get_om__getDistributionMap(soap, &soap_tmp_om__getDistributionMap, "om:getDistributionMap", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = om__getDistributionMap(soap, soap_tmp_om__getDistributionMap.ticket, soap_tmp_om__getDistributionMapResponse.file);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_om__getDistributionMapResponse(soap, &soap_tmp_om__getDistributionMapResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_om__getDistributionMapResponse(soap, &soap_tmp_om__getDistributionMapResponse, "om:getDistributionMapResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__getDistributionMapResponse(soap, &soap_tmp_om__getDistributionMapResponse, "om:getDistributionMapResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__ping(struct soap *soap)
{	struct om__ping soap_tmp_om__ping;
	struct om__pingResponse soap_tmp_om__pingResponse;
	int soap_tmp_xsd__int;
	soap_default_om__pingResponse(soap, &soap_tmp_om__pingResponse);
	soap_default_xsd__int(soap, &soap_tmp_xsd__int);
	soap_tmp_om__pingResponse.status = &soap_tmp_xsd__int;
	soap_default_om__ping(soap, &soap_tmp_om__ping);
	soap->encodingStyle = NULL;
	if (!soap_get_om__ping(soap, &soap_tmp_om__ping, "om:ping", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = om__ping(soap, soap_tmp_om__ping._, &soap_tmp_xsd__int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_om__pingResponse(soap, &soap_tmp_om__pingResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_om__pingResponse(soap, &soap_tmp_om__pingResponse, "om:pingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_om__pingResponse(soap, &soap_tmp_om__pingResponse, "om:pingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

/* End of soapServer.cpp */
