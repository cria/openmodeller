/* soapStub.h
   Generated by gSOAP 2.7.6d from om_soap.hh
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (10)
/* SOAP Header: */
struct SOAP_ENV__Header
{
	char *om__version;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_soap_AlgorithmParameter
#define SOAP_TYPE_soap_AlgorithmParameter (11)
/* soap-AlgorithmParameter */
struct soap_AlgorithmParameter
{
	char *Id;	/* optional attribute of type xsd:string */
	char *Name;	/* optional attribute of type xsd:string */
	char *Type;	/* optional attribute of type xsd:string */
	char *Overview;	/* optional element of type xsd:string */
	char *Description;	/* optional element of type xsd:string */
	int HasMin;	/* optional attribute of type xsd:int */
	double Min;	/* optional attribute of type xsd:double */
	int HasMax;	/* optional attribute of type xsd:int */
	double Max;	/* optional attribute of type xsd:double */
	char *Typical;	/* optional attribute of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_soap_AlgorithmParameters
#define SOAP_TYPE_soap_AlgorithmParameters (13)
/* soap-AlgorithmParameters */
struct soap_AlgorithmParameters
{
	int __size;	/* sequence of elements <Param> */
	struct soap_AlgorithmParameter *__ptrParam;
};
#endif

#ifndef SOAP_TYPE_soap_AlgorithmMetadata
#define SOAP_TYPE_soap_AlgorithmMetadata (16)
/* soap-AlgorithmMetadata */
struct soap_AlgorithmMetadata
{
	char *Id;	/* optional attribute of type xsd:string */
	char *Name;	/* optional attribute of type xsd:string */
	char *Version;	/* optional attribute of type xsd:string */
	char *Overview;	/* optional element of type xsd:string */
	char *Description;	/* optional element of type xsd:string */
	char *Author;	/* optional attribute of type xsd:string */
	char *Bibliography;	/* optional element of type xsd:string */
	char *CodeAuthor;	/* optional attribute of type xsd:string */
	char *Contact;	/* optional attribute of type xsd:string */
	int Categorical;	/* optional attribute of type xsd:int */
	int Absence;	/* optional attribute of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_soap_AvailableAlgorithm
#define SOAP_TYPE_soap_AvailableAlgorithm (18)
/* soap-AvailableAlgorithm */
struct soap_AvailableAlgorithm
{
	struct soap_AlgorithmMetadata *__ptrAlgorithmMetadata;
	struct soap_AlgorithmParameters *__ptrAlgorithmParameters;
};
#endif

#ifndef SOAP_TYPE_soap_AvailableAlgorithms
#define SOAP_TYPE_soap_AvailableAlgorithms (22)
/* soap-AvailableAlgorithms */
struct soap_AvailableAlgorithms
{
	int __size;	/* sequence of elements <Algorithm> */
	struct soap_AvailableAlgorithm *__ptrAlgorithm;
};
#endif

#ifndef SOAP_TYPE_om__getAlgorithmsResponse
#define SOAP_TYPE_om__getAlgorithmsResponse (25)
/* om:getAlgorithmsResponse */
struct om__getAlgorithmsResponse
{
	struct soap_AvailableAlgorithms _AvailableAlgorithms;	/* RPC return element */	/* required element of type om:AvailableAlgorithms */
};
#endif

#ifndef SOAP_TYPE_om__getAlgorithms
#define SOAP_TYPE_om__getAlgorithms (30)
/* om:getAlgorithms */
struct om__getAlgorithms
{
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_soap_Point
#define SOAP_TYPE_soap_Point (31)
/* soap-Point */
struct soap_Point
{
	double latitude;	/* optional attribute of type xsd:double */
	double longitude;	/* optional attribute of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_soap_PresencePoints
#define SOAP_TYPE_soap_PresencePoints (33)
/* soap-PresencePoints */
struct soap_PresencePoints
{
	int __size;	/* sequence of elements <point> */
	struct soap_Point *__ptrpoint;
};
#endif

#ifndef SOAP_TYPE_soap_AbsencePoints
#define SOAP_TYPE_soap_AbsencePoints (36)
/* soap-AbsencePoints */
struct soap_AbsencePoints
{
	int __size;	/* sequence of elements <point> */
	struct soap_Point *__ptrpoint;
};
#endif

#ifndef SOAP_TYPE_soap_Points
#define SOAP_TYPE_soap_Points (38)
/* soap-Points */
struct soap_Points
{
	char *coordsystem;	/* optional element of type xsd:string */
	struct soap_PresencePoints *__ptrpresences;
	struct soap_AbsencePoints *__ptrabsences;
};
#endif

#ifndef SOAP_TYPE_soap_Map
#define SOAP_TYPE_soap_Map (42)
/* soap-Map */
struct soap_Map
{
	char *location;	/* optional attribute of type xsd:string */
	int categorical;	/* optional attribute of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_soap_Maps
#define SOAP_TYPE_soap_Maps (44)
/* soap-Maps */
struct soap_Maps
{
	int __size;	/* sequence of elements <map> */
	struct soap_Map *__ptrmap;
};
#endif

#ifndef SOAP_TYPE_soap_Mask
#define SOAP_TYPE_soap_Mask (47)
/* soap-Mask */
struct soap_Mask
{
	char *location;	/* optional attribute of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_soap_Parameter
#define SOAP_TYPE_soap_Parameter (49)
/* soap-Parameter */
struct soap_Parameter
{
	char *Id;	/* optional attribute of type xsd:string */
	char *Value;	/* optional attribute of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_soap_Algorithm
#define SOAP_TYPE_soap_Algorithm (51)
/* soap-Algorithm */
struct soap_Algorithm
{
	char *Id;	/* optional attribute of type xsd:string */
	int __size;	/* sequence of elements <parameter> */
	struct soap_Parameter *__ptrparameter;
};
#endif

#ifndef SOAP_TYPE_soap_Output
#define SOAP_TYPE_soap_Output (54)
/* soap-Output */
struct soap_Output
{
	char *header;	/* optional element of type xsd:string */
	int scale;	/* required element of type xsd:int */
	char *format;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_om__createModelResponse
#define SOAP_TYPE_om__createModelResponse (63)
/* om:createModelResponse */
struct om__createModelResponse
{
	char **ticket;	/* RPC return element */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_om__createModel
#define SOAP_TYPE_om__createModel (64)
/* om:createModel */
struct om__createModel
{
	struct soap_Points *points;	/* optional element of type om:Points */
	struct soap_Maps *maps;	/* optional element of type om:Maps */
	struct soap_Mask *mask;	/* optional element of type om:Mask */
	struct soap_Algorithm *algorithm;	/* optional element of type om:Algorithm */
	struct soap_Output *output;	/* optional element of type om:Output */
};
#endif



#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (65)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	xsd__base64Binary();	/* transient */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_om__getDistributionMapResponse
#define SOAP_TYPE_om__getDistributionMapResponse (75)
/* om:getDistributionMapResponse */
struct om__getDistributionMapResponse
{
	xsd__base64Binary file;	/* RPC return element */	/* required element of type xsd:base64Binary */
};
#endif

#ifndef SOAP_TYPE_om__getDistributionMap
#define SOAP_TYPE_om__getDistributionMap (76)
/* om:getDistributionMap */
struct om__getDistributionMap
{
	char *ticket;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_om__pingResponse
#define SOAP_TYPE_om__pingResponse (79)
/* om:pingResponse */
struct om__pingResponse
{
	int *status;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_om__ping
#define SOAP_TYPE_om__ping (80)
/* om:ping */
struct om__ping
{
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (81)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;	/* optional element of type QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (83)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (84)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (85)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;	/* optional element of type QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (6)
typedef char *xsd__string;
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (8)
typedef double xsd__double;
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (9)
typedef int xsd__int;
#endif

#ifndef SOAP_TYPE_om__AlgorithmParameter
#define SOAP_TYPE_om__AlgorithmParameter (12)
typedef struct soap_AlgorithmParameter om__AlgorithmParameter;
#endif

#ifndef SOAP_TYPE_om__AlgorithmParameters
#define SOAP_TYPE_om__AlgorithmParameters (15)
typedef struct soap_AlgorithmParameters om__AlgorithmParameters;
#endif

#ifndef SOAP_TYPE_om__AlgorithmMetadata
#define SOAP_TYPE_om__AlgorithmMetadata (17)
typedef struct soap_AlgorithmMetadata om__AlgorithmMetadata;
#endif

#ifndef SOAP_TYPE_om__AvailableAlgorithm
#define SOAP_TYPE_om__AvailableAlgorithm (21)
typedef struct soap_AvailableAlgorithm om__AvailableAlgorithm;
#endif

#ifndef SOAP_TYPE_om__AvailableAlgorithms
#define SOAP_TYPE_om__AvailableAlgorithms (24)
typedef struct soap_AvailableAlgorithms om__AvailableAlgorithms;
#endif

#ifndef SOAP_TYPE_om__Point
#define SOAP_TYPE_om__Point (32)
typedef struct soap_Point om__Point;
#endif

#ifndef SOAP_TYPE_om__PresencePoints
#define SOAP_TYPE_om__PresencePoints (35)
typedef struct soap_PresencePoints om__PresencePoints;
#endif

#ifndef SOAP_TYPE_om__AbsencePoints
#define SOAP_TYPE_om__AbsencePoints (37)
typedef struct soap_AbsencePoints om__AbsencePoints;
#endif

#ifndef SOAP_TYPE_om__Points
#define SOAP_TYPE_om__Points (41)
typedef struct soap_Points om__Points;
#endif

#ifndef SOAP_TYPE_om__Map
#define SOAP_TYPE_om__Map (43)
typedef struct soap_Map om__Map;
#endif

#ifndef SOAP_TYPE_om__Maps
#define SOAP_TYPE_om__Maps (46)
typedef struct soap_Maps om__Maps;
#endif

#ifndef SOAP_TYPE_om__Mask
#define SOAP_TYPE_om__Mask (48)
typedef struct soap_Mask om__Mask;
#endif

#ifndef SOAP_TYPE_om__Parameter
#define SOAP_TYPE_om__Parameter (50)
typedef struct soap_Parameter om__Parameter;
#endif

#ifndef SOAP_TYPE_om__Algorithm
#define SOAP_TYPE_om__Algorithm (53)
typedef struct soap_Algorithm om__Algorithm;
#endif

#ifndef SOAP_TYPE_om__Output
#define SOAP_TYPE_om__Output (55)
typedef struct soap_Output om__Output;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 om__getAlgorithms(struct soap*, void *_, struct om__getAlgorithmsResponse &r);

SOAP_FMAC5 int SOAP_FMAC6 om__createModel(struct soap*, struct soap_Points *points, struct soap_Maps *maps, struct soap_Mask *mask, struct soap_Algorithm *algorithm, struct soap_Output *output, char **ticket);

SOAP_FMAC5 int SOAP_FMAC6 om__getDistributionMap(struct soap*, char *ticket, xsd__base64Binary &file);

SOAP_FMAC5 int SOAP_FMAC6 om__ping(struct soap*, void *_, int *status);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__getAlgorithms(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, struct om__getAlgorithmsResponse &r);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__createModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct soap_Points *points, struct soap_Maps *maps, struct soap_Mask *mask, struct soap_Algorithm *algorithm, struct soap_Output *output, char **ticket);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__getDistributionMap(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, xsd__base64Binary &file);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_om__ping(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *status);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__getAlgorithms(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__createModel(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__getDistributionMap(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_om__ping(struct soap*);

#endif

/* End of soapStub.h */
