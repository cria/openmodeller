/* soapStub.h
   Generated by gSOAP 2.7.6d from om_soap.hh
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (13)
/* SOAP Header: */
struct SOAP_ENV__Header
{
	char *omws__version;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_omws__pingResponse
#define SOAP_TYPE_omws__pingResponse (18)
/* omws:pingResponse */
struct omws__pingResponse
{
	int *status;	/* RPC return element */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_omws__ping
#define SOAP_TYPE_omws__ping (19)
/* omws:ping */
struct omws__ping
{
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_omws__getAlgorithms
#define SOAP_TYPE_omws__getAlgorithms (22)
/* omws:getAlgorithms */
struct omws__getAlgorithms
{
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_omws__getLayers
#define SOAP_TYPE_omws__getLayers (24)
/* omws:getLayers */
struct omws__getLayers
{
	void *_;	/* transient */
};
#endif

#ifndef SOAP_TYPE_soap_Point
#define SOAP_TYPE_soap_Point (25)
/* soap-Point */
struct soap_Point
{
	double latitude;	/* optional attribute of type xsd:double */
	double longitude;	/* optional attribute of type xsd:double */
};
#endif

#ifndef SOAP_TYPE_soap_PresencePoints
#define SOAP_TYPE_soap_PresencePoints (27)
/* soap-PresencePoints */
struct soap_PresencePoints
{
	int __size;	/* sequence of elements <point> */
	struct soap_Point *__ptrpoint;
};
#endif

#ifndef SOAP_TYPE_soap_AbsencePoints
#define SOAP_TYPE_soap_AbsencePoints (30)
/* soap-AbsencePoints */
struct soap_AbsencePoints
{
	int __size;	/* sequence of elements <point> */
	struct soap_Point *__ptrpoint;
};
#endif

#ifndef SOAP_TYPE_soap_Points
#define SOAP_TYPE_soap_Points (32)
/* soap-Points */
struct soap_Points
{
	char *coordsystem;	/* optional element of type xsd:string */
	struct soap_PresencePoints *__ptrpresences;
	struct soap_AbsencePoints *__ptrabsences;
};
#endif

#ifndef SOAP_TYPE_soap_Map
#define SOAP_TYPE_soap_Map (36)
/* soap-Map */
struct soap_Map
{
	char *location;	/* optional attribute of type xsd:string */
	int categorical;	/* optional attribute of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_soap_Maps
#define SOAP_TYPE_soap_Maps (38)
/* soap-Maps */
struct soap_Maps
{
	int __size;	/* sequence of elements <map> */
	struct soap_Map *__ptrmap;
};
#endif

#ifndef SOAP_TYPE_soap_Mask
#define SOAP_TYPE_soap_Mask (41)
/* soap-Mask */
struct soap_Mask
{
	char *location;	/* optional attribute of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_soap_Parameter
#define SOAP_TYPE_soap_Parameter (43)
/* soap-Parameter */
struct soap_Parameter
{
	char *Id;	/* optional attribute of type xsd:string */
	char *Value;	/* optional attribute of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_soap_Algorithm
#define SOAP_TYPE_soap_Algorithm (45)
/* soap-Algorithm */
struct soap_Algorithm
{
	char *Id;	/* optional attribute of type xsd:string */
	int __size;	/* sequence of elements <parameter> */
	struct soap_Parameter *__ptrparameter;
};
#endif

#ifndef SOAP_TYPE_soap_Output
#define SOAP_TYPE_soap_Output (48)
/* soap-Output */
struct soap_Output
{
	char *header;	/* optional element of type xsd:string */
	int scale;	/* required element of type xsd:int */
	char *format;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_omws__createModelResponse
#define SOAP_TYPE_omws__createModelResponse (57)
/* omws:createModelResponse */
struct omws__createModelResponse
{
	char **ticket;	/* RPC return element */	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_omws__createModel
#define SOAP_TYPE_omws__createModel (58)
/* omws:createModel */
struct omws__createModel
{
	struct soap_Points *points;	/* optional element of type omws:Points */
	struct soap_Maps *maps;	/* optional element of type omws:Maps */
	struct soap_Mask *mask;	/* optional element of type omws:Mask */
	struct soap_Algorithm *algorithm;	/* optional element of type omws:Algorithm */
	struct soap_Output *output;	/* optional element of type omws:Output */
};
#endif



#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (59)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	xsd__base64Binary();	/* transient */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_omws__getDistributionMapResponse
#define SOAP_TYPE_omws__getDistributionMapResponse (69)
/* omws:getDistributionMapResponse */
struct omws__getDistributionMapResponse
{
	xsd__base64Binary file;	/* RPC return element */	/* required element of type xsd:base64Binary */
};
#endif

#ifndef SOAP_TYPE_omws__getDistributionMap
#define SOAP_TYPE_omws__getDistributionMap (70)
/* omws:getDistributionMap */
struct omws__getDistributionMap
{
	char *ticket;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (71)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
	char *SOAP_ENV__Value;	/* optional element of type QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (73)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (74)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (75)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
	char *faultcode;	/* optional element of type QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (4)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (6)
typedef char *xsd__string;
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (8)
typedef double xsd__double;
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (9)
typedef int xsd__int;
#endif

#ifndef SOAP_TYPE_XML
#define SOAP_TYPE_XML (12)
typedef wchar_t *XML;
#endif

#ifndef SOAP_TYPE_omws__Point
#define SOAP_TYPE_omws__Point (26)
typedef struct soap_Point omws__Point;
#endif

#ifndef SOAP_TYPE_omws__PresencePoints
#define SOAP_TYPE_omws__PresencePoints (29)
typedef struct soap_PresencePoints omws__PresencePoints;
#endif

#ifndef SOAP_TYPE_omws__AbsencePoints
#define SOAP_TYPE_omws__AbsencePoints (31)
typedef struct soap_AbsencePoints omws__AbsencePoints;
#endif

#ifndef SOAP_TYPE_omws__Points
#define SOAP_TYPE_omws__Points (35)
typedef struct soap_Points omws__Points;
#endif

#ifndef SOAP_TYPE_omws__Map
#define SOAP_TYPE_omws__Map (37)
typedef struct soap_Map omws__Map;
#endif

#ifndef SOAP_TYPE_omws__Maps
#define SOAP_TYPE_omws__Maps (40)
typedef struct soap_Maps omws__Maps;
#endif

#ifndef SOAP_TYPE_omws__Mask
#define SOAP_TYPE_omws__Mask (42)
typedef struct soap_Mask omws__Mask;
#endif

#ifndef SOAP_TYPE_omws__Parameter
#define SOAP_TYPE_omws__Parameter (44)
typedef struct soap_Parameter omws__Parameter;
#endif

#ifndef SOAP_TYPE_omws__Algorithm
#define SOAP_TYPE_omws__Algorithm (47)
typedef struct soap_Algorithm omws__Algorithm;
#endif

#ifndef SOAP_TYPE_omws__Output
#define SOAP_TYPE_omws__Output (49)
typedef struct soap_Output omws__Output;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 omws__ping(struct soap*, void *_, int *status);

SOAP_FMAC5 int SOAP_FMAC6 omws__getAlgorithms(struct soap*, void *_, wchar_t *&om__AvailableAlgorithms);

SOAP_FMAC5 int SOAP_FMAC6 omws__getLayers(struct soap*, void *_, wchar_t *&om__AvailableLayers);

SOAP_FMAC5 int SOAP_FMAC6 omws__createModel(struct soap*, struct soap_Points *points, struct soap_Maps *maps, struct soap_Mask *mask, struct soap_Algorithm *algorithm, struct soap_Output *output, char **ticket);

SOAP_FMAC5 int SOAP_FMAC6 omws__getDistributionMap(struct soap*, char *ticket, xsd__base64Binary &file);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__ping(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, int *status);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getAlgorithms(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, wchar_t *&om__AvailableAlgorithms);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getLayers(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_, wchar_t *&om__AvailableLayers);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__createModel(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct soap_Points *points, struct soap_Maps *maps, struct soap_Mask *mask, struct soap_Algorithm *algorithm, struct soap_Output *output, char **ticket);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_omws__getDistributionMap(struct soap *soap, const char *soap_endpoint, const char *soap_action, char *ticket, xsd__base64Binary &file);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_omws__ping(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_omws__getAlgorithms(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_omws__getLayers(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_omws__createModel(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_omws__getDistributionMap(struct soap*);

#endif

/* End of soapStub.h */
