/* soapC.cpp
   Generated by gSOAP 2.7.6d from om_soap.hh
   Copyright (C) 2000-2005, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.6d 2008-09-16 19:53:58 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = (struct SOAP_ENV__Reason*)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason));
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_SOAP_ENV__Reason:
		return soap_in_SOAP_ENV__Reason(soap, NULL, NULL, "SOAP-ENV:Reason");
	case SOAP_TYPE_omws__getProjectionMetadata:
		return soap_in_omws__getProjectionMetadata(soap, NULL, NULL, "omws:getProjectionMetadata");
	case SOAP_TYPE_omws__getProjectionMetadataResponse:
		return soap_in_omws__getProjectionMetadataResponse(soap, NULL, NULL, "omws:getProjectionMetadataResponse");
	case SOAP_TYPE_omws__getLayerAsWcs:
		return soap_in_omws__getLayerAsWcs(soap, NULL, NULL, "omws:getLayerAsWcs");
	case SOAP_TYPE_omws__getLayerAsWcsResponse:
		return soap_in_omws__getLayerAsWcsResponse(soap, NULL, NULL, "omws:getLayerAsWcsResponse");
	case SOAP_TYPE_omws__getLayerAsUrl:
		return soap_in_omws__getLayerAsUrl(soap, NULL, NULL, "omws:getLayerAsUrl");
	case SOAP_TYPE_omws__getLayerAsUrlResponse:
		return soap_in_omws__getLayerAsUrlResponse(soap, NULL, NULL, "omws:getLayerAsUrlResponse");
	case SOAP_TYPE_omws__getLayerAsAttachment:
		return soap_in_omws__getLayerAsAttachment(soap, NULL, NULL, "omws:getLayerAsAttachment");
	case SOAP_TYPE_omws__getLayerAsAttachmentResponse:
		return soap_in_omws__getLayerAsAttachmentResponse(soap, NULL, NULL, "omws:getLayerAsAttachmentResponse");
	case SOAP_TYPE_omws__getLog:
		return soap_in_omws__getLog(soap, NULL, NULL, "omws:getLog");
	case SOAP_TYPE_omws__getLogResponse:
		return soap_in_omws__getLogResponse(soap, NULL, NULL, "omws:getLogResponse");
	case SOAP_TYPE_omws__getProgress:
		return soap_in_omws__getProgress(soap, NULL, NULL, "omws:getProgress");
	case SOAP_TYPE_omws__getProgressResponse:
		return soap_in_omws__getProgressResponse(soap, NULL, NULL, "omws:getProgressResponse");
	case SOAP_TYPE_omws__projectModel:
		return soap_in_omws__projectModel(soap, NULL, NULL, "omws:projectModel");
	case SOAP_TYPE_omws__projectModelResponse:
		return soap_in_omws__projectModelResponse(soap, NULL, NULL, "omws:projectModelResponse");
	case SOAP_TYPE_omws__getTestResult:
		return soap_in_omws__getTestResult(soap, NULL, NULL, "omws:getTestResult");
	case SOAP_TYPE_omws__testResponse:
		return soap_in_omws__testResponse(soap, NULL, NULL, "omws:testResponse");
	case SOAP_TYPE_omws__testModel:
		return soap_in_omws__testModel(soap, NULL, NULL, "omws:testModel");
	case SOAP_TYPE_omws__testModelResponse:
		return soap_in_omws__testModelResponse(soap, NULL, NULL, "omws:testModelResponse");
	case SOAP_TYPE_omws__getModel:
		return soap_in_omws__getModel(soap, NULL, NULL, "omws:getModel");
	case SOAP_TYPE_omws__getModelResponse:
		return soap_in_omws__getModelResponse(soap, NULL, NULL, "omws:getModelResponse");
	case SOAP_TYPE_omws__createModel:
		return soap_in_omws__createModel(soap, NULL, NULL, "omws:createModel");
	case SOAP_TYPE_omws__createModelResponse:
		return soap_in_omws__createModelResponse(soap, NULL, NULL, "omws:createModelResponse");
	case SOAP_TYPE_omws__getLayers:
		return soap_in_omws__getLayers(soap, NULL, NULL, "omws:getLayers");
	case SOAP_TYPE_omws__getLayersResponse:
		return soap_in_omws__getLayersResponse(soap, NULL, NULL, "omws:getLayersResponse");
	case SOAP_TYPE_omws__getAlgorithms:
		return soap_in_omws__getAlgorithms(soap, NULL, NULL, "omws:getAlgorithms");
	case SOAP_TYPE_omws__getAlgorithmsResponse:
		return soap_in_omws__getAlgorithmsResponse(soap, NULL, NULL, "omws:getAlgorithmsResponse");
	case SOAP_TYPE_omws__ping:
		return soap_in_omws__ping(soap, NULL, NULL, "omws:ping");
	case SOAP_TYPE_omws__pingResponse:
		return soap_in_omws__pingResponse(soap, NULL, NULL, "omws:pingResponse");
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		return soap_in_PointerToSOAP_ENV__Reason(soap, NULL, NULL, "SOAP-ENV:Reason");
	case SOAP_TYPE_PointerToomws__getProjectionMetadataResponse:
		return soap_in_PointerToomws__getProjectionMetadataResponse(soap, NULL, NULL, "omws:getProjectionMetadataResponse");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToomws__testResponse:
		return soap_in_PointerToomws__testResponse(soap, NULL, NULL, "omws:testResponse");
	case SOAP_TYPE_PointerToomws__getModelResponse:
		return soap_in_PointerToomws__getModelResponse(soap, NULL, NULL, "omws:getModelResponse");
	case SOAP_TYPE_PointerToomws__getLayersResponse:
		return soap_in_PointerToomws__getLayersResponse(soap, NULL, NULL, "omws:getLayersResponse");
	case SOAP_TYPE_PointerToomws__getAlgorithmsResponse:
		return soap_in_PointerToomws__getAlgorithmsResponse(soap, NULL, NULL, "omws:getAlgorithmsResponse");
	case SOAP_TYPE_wstring:
	{	wchar_t **s;
		s = soap_in_wstring(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__string:
	{	char **s;
		s = soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SOAP-ENV:Reason"))
		{	*type = SOAP_TYPE_SOAP_ENV__Reason;
			return soap_in_SOAP_ENV__Reason(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getProjectionMetadata"))
		{	*type = SOAP_TYPE_omws__getProjectionMetadata;
			return soap_in_omws__getProjectionMetadata(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getProjectionMetadataResponse"))
		{	*type = SOAP_TYPE_omws__getProjectionMetadataResponse;
			return soap_in_omws__getProjectionMetadataResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLayerAsWcs"))
		{	*type = SOAP_TYPE_omws__getLayerAsWcs;
			return soap_in_omws__getLayerAsWcs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLayerAsWcsResponse"))
		{	*type = SOAP_TYPE_omws__getLayerAsWcsResponse;
			return soap_in_omws__getLayerAsWcsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLayerAsUrl"))
		{	*type = SOAP_TYPE_omws__getLayerAsUrl;
			return soap_in_omws__getLayerAsUrl(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLayerAsUrlResponse"))
		{	*type = SOAP_TYPE_omws__getLayerAsUrlResponse;
			return soap_in_omws__getLayerAsUrlResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLayerAsAttachment"))
		{	*type = SOAP_TYPE_omws__getLayerAsAttachment;
			return soap_in_omws__getLayerAsAttachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLayerAsAttachmentResponse"))
		{	*type = SOAP_TYPE_omws__getLayerAsAttachmentResponse;
			return soap_in_omws__getLayerAsAttachmentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLog"))
		{	*type = SOAP_TYPE_omws__getLog;
			return soap_in_omws__getLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLogResponse"))
		{	*type = SOAP_TYPE_omws__getLogResponse;
			return soap_in_omws__getLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getProgress"))
		{	*type = SOAP_TYPE_omws__getProgress;
			return soap_in_omws__getProgress(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getProgressResponse"))
		{	*type = SOAP_TYPE_omws__getProgressResponse;
			return soap_in_omws__getProgressResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:projectModel"))
		{	*type = SOAP_TYPE_omws__projectModel;
			return soap_in_omws__projectModel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:projectModelResponse"))
		{	*type = SOAP_TYPE_omws__projectModelResponse;
			return soap_in_omws__projectModelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getTestResult"))
		{	*type = SOAP_TYPE_omws__getTestResult;
			return soap_in_omws__getTestResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:testResponse"))
		{	*type = SOAP_TYPE_omws__testResponse;
			return soap_in_omws__testResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:testModel"))
		{	*type = SOAP_TYPE_omws__testModel;
			return soap_in_omws__testModel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:testModelResponse"))
		{	*type = SOAP_TYPE_omws__testModelResponse;
			return soap_in_omws__testModelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getModel"))
		{	*type = SOAP_TYPE_omws__getModel;
			return soap_in_omws__getModel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getModelResponse"))
		{	*type = SOAP_TYPE_omws__getModelResponse;
			return soap_in_omws__getModelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:createModel"))
		{	*type = SOAP_TYPE_omws__createModel;
			return soap_in_omws__createModel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:createModelResponse"))
		{	*type = SOAP_TYPE_omws__createModelResponse;
			return soap_in_omws__createModelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLayers"))
		{	*type = SOAP_TYPE_omws__getLayers;
			return soap_in_omws__getLayers(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getLayersResponse"))
		{	*type = SOAP_TYPE_omws__getLayersResponse;
			return soap_in_omws__getLayersResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getAlgorithms"))
		{	*type = SOAP_TYPE_omws__getAlgorithms;
			return soap_in_omws__getAlgorithms(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:getAlgorithmsResponse"))
		{	*type = SOAP_TYPE_omws__getAlgorithmsResponse;
			return soap_in_omws__getAlgorithmsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:ping"))
		{	*type = SOAP_TYPE_omws__ping;
			return soap_in_omws__ping(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "omws:pingResponse"))
		{	*type = SOAP_TYPE_omws__pingResponse;
			return soap_in_omws__pingResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_xsd__string;
			s = soap_in_xsd__string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
			return soap->error = SOAP_TAG_MISMATCH;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__double:
		return soap_out_xsd__double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_SOAP_ENV__Reason:
		return soap_out_SOAP_ENV__Reason(soap, tag, id, (const struct SOAP_ENV__Reason *)ptr, "SOAP-ENV:Reason");
	case SOAP_TYPE_omws__getProjectionMetadata:
		return soap_out_omws__getProjectionMetadata(soap, tag, id, (const struct omws__getProjectionMetadata *)ptr, "omws:getProjectionMetadata");
	case SOAP_TYPE_omws__getProjectionMetadataResponse:
		return soap_out_omws__getProjectionMetadataResponse(soap, tag, id, (const struct omws__getProjectionMetadataResponse *)ptr, "omws:getProjectionMetadataResponse");
	case SOAP_TYPE_omws__getLayerAsWcs:
		return soap_out_omws__getLayerAsWcs(soap, tag, id, (const struct omws__getLayerAsWcs *)ptr, "omws:getLayerAsWcs");
	case SOAP_TYPE_omws__getLayerAsWcsResponse:
		return soap_out_omws__getLayerAsWcsResponse(soap, tag, id, (const struct omws__getLayerAsWcsResponse *)ptr, "omws:getLayerAsWcsResponse");
	case SOAP_TYPE_omws__getLayerAsUrl:
		return soap_out_omws__getLayerAsUrl(soap, tag, id, (const struct omws__getLayerAsUrl *)ptr, "omws:getLayerAsUrl");
	case SOAP_TYPE_omws__getLayerAsUrlResponse:
		return soap_out_omws__getLayerAsUrlResponse(soap, tag, id, (const struct omws__getLayerAsUrlResponse *)ptr, "omws:getLayerAsUrlResponse");
	case SOAP_TYPE_omws__getLayerAsAttachment:
		return soap_out_omws__getLayerAsAttachment(soap, tag, id, (const struct omws__getLayerAsAttachment *)ptr, "omws:getLayerAsAttachment");
	case SOAP_TYPE_omws__getLayerAsAttachmentResponse:
		return soap_out_omws__getLayerAsAttachmentResponse(soap, tag, id, (const struct omws__getLayerAsAttachmentResponse *)ptr, "omws:getLayerAsAttachmentResponse");
	case SOAP_TYPE_omws__getLog:
		return soap_out_omws__getLog(soap, tag, id, (const struct omws__getLog *)ptr, "omws:getLog");
	case SOAP_TYPE_omws__getLogResponse:
		return soap_out_omws__getLogResponse(soap, tag, id, (const struct omws__getLogResponse *)ptr, "omws:getLogResponse");
	case SOAP_TYPE_omws__getProgress:
		return soap_out_omws__getProgress(soap, tag, id, (const struct omws__getProgress *)ptr, "omws:getProgress");
	case SOAP_TYPE_omws__getProgressResponse:
		return soap_out_omws__getProgressResponse(soap, tag, id, (const struct omws__getProgressResponse *)ptr, "omws:getProgressResponse");
	case SOAP_TYPE_omws__projectModel:
		return soap_out_omws__projectModel(soap, tag, id, (const struct omws__projectModel *)ptr, "omws:projectModel");
	case SOAP_TYPE_omws__projectModelResponse:
		return soap_out_omws__projectModelResponse(soap, tag, id, (const struct omws__projectModelResponse *)ptr, "omws:projectModelResponse");
	case SOAP_TYPE_omws__getTestResult:
		return soap_out_omws__getTestResult(soap, tag, id, (const struct omws__getTestResult *)ptr, "omws:getTestResult");
	case SOAP_TYPE_omws__testResponse:
		return soap_out_omws__testResponse(soap, tag, id, (const struct omws__testResponse *)ptr, "omws:testResponse");
	case SOAP_TYPE_omws__testModel:
		return soap_out_omws__testModel(soap, tag, id, (const struct omws__testModel *)ptr, "omws:testModel");
	case SOAP_TYPE_omws__testModelResponse:
		return soap_out_omws__testModelResponse(soap, tag, id, (const struct omws__testModelResponse *)ptr, "omws:testModelResponse");
	case SOAP_TYPE_omws__getModel:
		return soap_out_omws__getModel(soap, tag, id, (const struct omws__getModel *)ptr, "omws:getModel");
	case SOAP_TYPE_omws__getModelResponse:
		return soap_out_omws__getModelResponse(soap, tag, id, (const struct omws__getModelResponse *)ptr, "omws:getModelResponse");
	case SOAP_TYPE_omws__createModel:
		return soap_out_omws__createModel(soap, tag, id, (const struct omws__createModel *)ptr, "omws:createModel");
	case SOAP_TYPE_omws__createModelResponse:
		return soap_out_omws__createModelResponse(soap, tag, id, (const struct omws__createModelResponse *)ptr, "omws:createModelResponse");
	case SOAP_TYPE_omws__getLayers:
		return soap_out_omws__getLayers(soap, tag, id, (const struct omws__getLayers *)ptr, "omws:getLayers");
	case SOAP_TYPE_omws__getLayersResponse:
		return soap_out_omws__getLayersResponse(soap, tag, id, (const struct omws__getLayersResponse *)ptr, "omws:getLayersResponse");
	case SOAP_TYPE_omws__getAlgorithms:
		return soap_out_omws__getAlgorithms(soap, tag, id, (const struct omws__getAlgorithms *)ptr, "omws:getAlgorithms");
	case SOAP_TYPE_omws__getAlgorithmsResponse:
		return soap_out_omws__getAlgorithmsResponse(soap, tag, id, (const struct omws__getAlgorithmsResponse *)ptr, "omws:getAlgorithmsResponse");
	case SOAP_TYPE_omws__ping:
		return soap_out_omws__ping(soap, tag, id, (const struct omws__ping *)ptr, "omws:ping");
	case SOAP_TYPE_omws__pingResponse:
		return soap_out_omws__pingResponse(soap, tag, id, (const struct omws__pingResponse *)ptr, "omws:pingResponse");
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		return soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, (struct SOAP_ENV__Reason *const*)ptr, "SOAP-ENV:Reason");
	case SOAP_TYPE_PointerToomws__getProjectionMetadataResponse:
		return soap_out_PointerToomws__getProjectionMetadataResponse(soap, tag, id, (struct omws__getProjectionMetadataResponse *const*)ptr, "omws:getProjectionMetadataResponse");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerToomws__testResponse:
		return soap_out_PointerToomws__testResponse(soap, tag, id, (struct omws__testResponse *const*)ptr, "omws:testResponse");
	case SOAP_TYPE_PointerToomws__getModelResponse:
		return soap_out_PointerToomws__getModelResponse(soap, tag, id, (struct omws__getModelResponse *const*)ptr, "omws:getModelResponse");
	case SOAP_TYPE_PointerToomws__getLayersResponse:
		return soap_out_PointerToomws__getLayersResponse(soap, tag, id, (struct omws__getLayersResponse *const*)ptr, "omws:getLayersResponse");
	case SOAP_TYPE_PointerToomws__getAlgorithmsResponse:
		return soap_out_PointerToomws__getAlgorithmsResponse(soap, tag, id, (struct omws__getAlgorithmsResponse *const*)ptr, "omws:getAlgorithmsResponse");
	case SOAP_TYPE_wstring:
		return soap_out_wstring(soap, tag, id, (wchar_t**)&ptr, "xsd:string");
	case SOAP_TYPE_xsd__string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		soap_serialize_SOAP_ENV__Reason(soap, (const struct SOAP_ENV__Reason *)ptr);
		break;
	case SOAP_TYPE_omws__getProjectionMetadata:
		soap_serialize_omws__getProjectionMetadata(soap, (const struct omws__getProjectionMetadata *)ptr);
		break;
	case SOAP_TYPE_omws__getProjectionMetadataResponse:
		soap_serialize_omws__getProjectionMetadataResponse(soap, (const struct omws__getProjectionMetadataResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getLayerAsWcs:
		soap_serialize_omws__getLayerAsWcs(soap, (const struct omws__getLayerAsWcs *)ptr);
		break;
	case SOAP_TYPE_omws__getLayerAsWcsResponse:
		soap_serialize_omws__getLayerAsWcsResponse(soap, (const struct omws__getLayerAsWcsResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getLayerAsUrl:
		soap_serialize_omws__getLayerAsUrl(soap, (const struct omws__getLayerAsUrl *)ptr);
		break;
	case SOAP_TYPE_omws__getLayerAsUrlResponse:
		soap_serialize_omws__getLayerAsUrlResponse(soap, (const struct omws__getLayerAsUrlResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getLayerAsAttachment:
		soap_serialize_omws__getLayerAsAttachment(soap, (const struct omws__getLayerAsAttachment *)ptr);
		break;
	case SOAP_TYPE_omws__getLayerAsAttachmentResponse:
		soap_serialize_omws__getLayerAsAttachmentResponse(soap, (const struct omws__getLayerAsAttachmentResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getLog:
		soap_serialize_omws__getLog(soap, (const struct omws__getLog *)ptr);
		break;
	case SOAP_TYPE_omws__getLogResponse:
		soap_serialize_omws__getLogResponse(soap, (const struct omws__getLogResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getProgress:
		soap_serialize_omws__getProgress(soap, (const struct omws__getProgress *)ptr);
		break;
	case SOAP_TYPE_omws__getProgressResponse:
		soap_serialize_omws__getProgressResponse(soap, (const struct omws__getProgressResponse *)ptr);
		break;
	case SOAP_TYPE_omws__projectModel:
		soap_serialize_omws__projectModel(soap, (const struct omws__projectModel *)ptr);
		break;
	case SOAP_TYPE_omws__projectModelResponse:
		soap_serialize_omws__projectModelResponse(soap, (const struct omws__projectModelResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getTestResult:
		soap_serialize_omws__getTestResult(soap, (const struct omws__getTestResult *)ptr);
		break;
	case SOAP_TYPE_omws__testResponse:
		soap_serialize_omws__testResponse(soap, (const struct omws__testResponse *)ptr);
		break;
	case SOAP_TYPE_omws__testModel:
		soap_serialize_omws__testModel(soap, (const struct omws__testModel *)ptr);
		break;
	case SOAP_TYPE_omws__testModelResponse:
		soap_serialize_omws__testModelResponse(soap, (const struct omws__testModelResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getModel:
		soap_serialize_omws__getModel(soap, (const struct omws__getModel *)ptr);
		break;
	case SOAP_TYPE_omws__getModelResponse:
		soap_serialize_omws__getModelResponse(soap, (const struct omws__getModelResponse *)ptr);
		break;
	case SOAP_TYPE_omws__createModel:
		soap_serialize_omws__createModel(soap, (const struct omws__createModel *)ptr);
		break;
	case SOAP_TYPE_omws__createModelResponse:
		soap_serialize_omws__createModelResponse(soap, (const struct omws__createModelResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getLayers:
		soap_serialize_omws__getLayers(soap, (const struct omws__getLayers *)ptr);
		break;
	case SOAP_TYPE_omws__getLayersResponse:
		soap_serialize_omws__getLayersResponse(soap, (const struct omws__getLayersResponse *)ptr);
		break;
	case SOAP_TYPE_omws__getAlgorithms:
		soap_serialize_omws__getAlgorithms(soap, (const struct omws__getAlgorithms *)ptr);
		break;
	case SOAP_TYPE_omws__getAlgorithmsResponse:
		soap_serialize_omws__getAlgorithmsResponse(soap, (const struct omws__getAlgorithmsResponse *)ptr);
		break;
	case SOAP_TYPE_omws__ping:
		soap_serialize_omws__ping(soap, (const struct omws__ping *)ptr);
		break;
	case SOAP_TYPE_omws__pingResponse:
		soap_serialize_omws__pingResponse(soap, (const struct omws__pingResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToSOAP_ENV__Reason:
		soap_serialize_PointerToSOAP_ENV__Reason(soap, (struct SOAP_ENV__Reason *const*)ptr);
		break;
	case SOAP_TYPE_PointerToomws__getProjectionMetadataResponse:
		soap_serialize_PointerToomws__getProjectionMetadataResponse(soap, (struct omws__getProjectionMetadataResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PointerToomws__testResponse:
		soap_serialize_PointerToomws__testResponse(soap, (struct omws__testResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerToomws__getModelResponse:
		soap_serialize_PointerToomws__getModelResponse(soap, (struct omws__getModelResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerToomws__getLayersResponse:
		soap_serialize_PointerToomws__getLayersResponse(soap, (struct omws__getLayersResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerToomws__getAlgorithmsResponse:
		soap_serialize_PointerToomws__getAlgorithmsResponse(soap, (struct omws__getAlgorithmsResponse *const*)ptr);
		break;
	case SOAP_TYPE_wstring:
		soap_serialize_wstring(soap, (wchar_t**)&ptr);
		break;
	case SOAP_TYPE_xsd__string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char**)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_omws__getLayerAsAttachmentResponse:
		return (void*)soap_instantiate_omws__getLayerAsAttachmentResponse(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_omws__getLayerAsAttachmentResponse:
		if (p->size < 0)
			delete (struct omws__getLayerAsAttachmentResponse*)p->ptr;
		else
			delete[] (struct omws__getLayerAsAttachmentResponse*)p->ptr;
		break;
	}
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, int *a)
{	soap_default_int(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (soap_out_xsd__int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__double(struct soap *soap, double *a)
{	soap_default_double(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (soap_out_xsd__double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_xsd__double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	soap_element_begin_out(soap, tag, id, type);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type);
	soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getProjectionMetadata(struct soap *soap, const struct omws__getProjectionMetadata *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getProjectionMetadata(struct soap *soap, struct omws__getProjectionMetadata *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getProjectionMetadata(struct soap *soap, const struct omws__getProjectionMetadata *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getProjectionMetadata);
	if (soap_out_omws__getProjectionMetadata(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getProjectionMetadata(struct soap *soap, const char *tag, int id, const struct omws__getProjectionMetadata *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getProjectionMetadata), type);
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getProjectionMetadata * SOAP_FMAC4 soap_get_omws__getProjectionMetadata(struct soap *soap, struct omws__getProjectionMetadata *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getProjectionMetadata(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getProjectionMetadata * SOAP_FMAC4 soap_in_omws__getProjectionMetadata(struct soap *soap, const char *tag, struct omws__getProjectionMetadata *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getProjectionMetadata *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getProjectionMetadata, sizeof(struct omws__getProjectionMetadata), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getProjectionMetadata(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getProjectionMetadata *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getProjectionMetadata, 0, sizeof(struct omws__getProjectionMetadata), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getProjectionMetadataResponse(struct soap *soap, const struct omws__getProjectionMetadataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getProjectionMetadataResponse(struct soap *soap, struct omws__getProjectionMetadataResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->FileSize);
	a->om__AreaStatistics = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getProjectionMetadataResponse(struct soap *soap, const struct omws__getProjectionMetadataResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getProjectionMetadataResponse);
	if (soap_out_omws__getProjectionMetadataResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getProjectionMetadataResponse(struct soap *soap, const char *tag, int id, const struct omws__getProjectionMetadataResponse *a, const char *type)
{
	soap_set_attr(soap, "FileSize", soap_int2s(soap, a->FileSize));
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getProjectionMetadataResponse), type);
	soap_element_result(soap, "FileSize");
	soap_outwliteral(soap, "om:AreaStatistics", &a->om__AreaStatistics);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getProjectionMetadataResponse * SOAP_FMAC4 soap_get_omws__getProjectionMetadataResponse(struct soap *soap, struct omws__getProjectionMetadataResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getProjectionMetadataResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getProjectionMetadataResponse * SOAP_FMAC4 soap_in_omws__getProjectionMetadataResponse(struct soap *soap, const char *tag, struct omws__getProjectionMetadataResponse *a, const char *type)
{
	short soap_flag_om__AreaStatistics = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getProjectionMetadataResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getProjectionMetadataResponse, sizeof(struct omws__getProjectionMetadataResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getProjectionMetadataResponse(soap, a);
	if (soap_s2int(soap, soap_attr_value(soap, "FileSize", 0), &a->FileSize))
		return NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__AreaStatistics && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inwliteral(soap, "om:AreaStatistics", &a->om__AreaStatistics))
				{	soap_flag_om__AreaStatistics--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getProjectionMetadataResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getProjectionMetadataResponse, 0, sizeof(struct omws__getProjectionMetadataResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayerAsWcs(struct soap *soap, const struct omws__getLayerAsWcs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayerAsWcs(struct soap *soap, struct omws__getLayerAsWcs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->id);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayerAsWcs(struct soap *soap, const struct omws__getLayerAsWcs *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLayerAsWcs);
	if (soap_out_omws__getLayerAsWcs(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayerAsWcs(struct soap *soap, const char *tag, int id, const struct omws__getLayerAsWcs *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLayerAsWcs), type);
	soap_out_xsd__string(soap, "id", -1, &a->id, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLayerAsWcs * SOAP_FMAC4 soap_get_omws__getLayerAsWcs(struct soap *soap, struct omws__getLayerAsWcs *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLayerAsWcs(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayerAsWcs * SOAP_FMAC4 soap_in_omws__getLayerAsWcs(struct soap *soap, const char *tag, struct omws__getLayerAsWcs *a, const char *type)
{
	short soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLayerAsWcs *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLayerAsWcs, sizeof(struct omws__getLayerAsWcs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLayerAsWcs(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "id", &a->id, "xsd:string"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLayerAsWcs *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayerAsWcs, 0, sizeof(struct omws__getLayerAsWcs), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayerAsWcsResponse(struct soap *soap, const struct omws__getLayerAsWcsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->url);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayerAsWcsResponse(struct soap *soap, struct omws__getLayerAsWcsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->url);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayerAsWcsResponse(struct soap *soap, const struct omws__getLayerAsWcsResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLayerAsWcsResponse);
	if (soap_out_omws__getLayerAsWcsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayerAsWcsResponse(struct soap *soap, const char *tag, int id, const struct omws__getLayerAsWcsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLayerAsWcsResponse), type);
	if (a->url)
		soap_element_result(soap, "url");
	soap_out_xsd__string(soap, "url", -1, &a->url, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLayerAsWcsResponse * SOAP_FMAC4 soap_get_omws__getLayerAsWcsResponse(struct soap *soap, struct omws__getLayerAsWcsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLayerAsWcsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayerAsWcsResponse * SOAP_FMAC4 soap_in_omws__getLayerAsWcsResponse(struct soap *soap, const char *tag, struct omws__getLayerAsWcsResponse *a, const char *type)
{
	short soap_flag_url = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLayerAsWcsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLayerAsWcsResponse, sizeof(struct omws__getLayerAsWcsResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLayerAsWcsResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_url && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "url", &a->url, "xsd:string"))
				{	soap_flag_url--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_url > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLayerAsWcsResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayerAsWcsResponse, 0, sizeof(struct omws__getLayerAsWcsResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayerAsUrl(struct soap *soap, const struct omws__getLayerAsUrl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayerAsUrl(struct soap *soap, struct omws__getLayerAsUrl *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->id);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayerAsUrl(struct soap *soap, const struct omws__getLayerAsUrl *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLayerAsUrl);
	if (soap_out_omws__getLayerAsUrl(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayerAsUrl(struct soap *soap, const char *tag, int id, const struct omws__getLayerAsUrl *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLayerAsUrl), type);
	soap_out_xsd__string(soap, "id", -1, &a->id, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLayerAsUrl * SOAP_FMAC4 soap_get_omws__getLayerAsUrl(struct soap *soap, struct omws__getLayerAsUrl *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLayerAsUrl(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayerAsUrl * SOAP_FMAC4 soap_in_omws__getLayerAsUrl(struct soap *soap, const char *tag, struct omws__getLayerAsUrl *a, const char *type)
{
	short soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLayerAsUrl *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLayerAsUrl, sizeof(struct omws__getLayerAsUrl), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLayerAsUrl(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "id", &a->id, "xsd:string"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLayerAsUrl *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayerAsUrl, 0, sizeof(struct omws__getLayerAsUrl), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayerAsUrlResponse(struct soap *soap, const struct omws__getLayerAsUrlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->url);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayerAsUrlResponse(struct soap *soap, struct omws__getLayerAsUrlResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->url);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayerAsUrlResponse(struct soap *soap, const struct omws__getLayerAsUrlResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLayerAsUrlResponse);
	if (soap_out_omws__getLayerAsUrlResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayerAsUrlResponse(struct soap *soap, const char *tag, int id, const struct omws__getLayerAsUrlResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLayerAsUrlResponse), type);
	if (a->url)
		soap_element_result(soap, "url");
	soap_out_xsd__string(soap, "url", -1, &a->url, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLayerAsUrlResponse * SOAP_FMAC4 soap_get_omws__getLayerAsUrlResponse(struct soap *soap, struct omws__getLayerAsUrlResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLayerAsUrlResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayerAsUrlResponse * SOAP_FMAC4 soap_in_omws__getLayerAsUrlResponse(struct soap *soap, const char *tag, struct omws__getLayerAsUrlResponse *a, const char *type)
{
	short soap_flag_url = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLayerAsUrlResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLayerAsUrlResponse, sizeof(struct omws__getLayerAsUrlResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLayerAsUrlResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_url && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "url", &a->url, "xsd:string"))
				{	soap_flag_url--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_url > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLayerAsUrlResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayerAsUrlResponse, 0, sizeof(struct omws__getLayerAsUrlResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayerAsAttachment(struct soap *soap, const struct omws__getLayerAsAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->id);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayerAsAttachment(struct soap *soap, struct omws__getLayerAsAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->id);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayerAsAttachment(struct soap *soap, const struct omws__getLayerAsAttachment *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLayerAsAttachment);
	if (soap_out_omws__getLayerAsAttachment(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayerAsAttachment(struct soap *soap, const char *tag, int id, const struct omws__getLayerAsAttachment *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLayerAsAttachment), type);
	soap_out_xsd__string(soap, "id", -1, &a->id, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLayerAsAttachment * SOAP_FMAC4 soap_get_omws__getLayerAsAttachment(struct soap *soap, struct omws__getLayerAsAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLayerAsAttachment(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayerAsAttachment * SOAP_FMAC4 soap_in_omws__getLayerAsAttachment(struct soap *soap, const char *tag, struct omws__getLayerAsAttachment *a, const char *type)
{
	short soap_flag_id = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLayerAsAttachment *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLayerAsAttachment, sizeof(struct omws__getLayerAsAttachment), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLayerAsAttachment(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "id", &a->id, "xsd:string"))
				{	soap_flag_id--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLayerAsAttachment *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayerAsAttachment, 0, sizeof(struct omws__getLayerAsAttachment), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayerAsAttachmentResponse(struct soap *soap, const struct omws__getLayerAsAttachmentResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->file.soap_serialize(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayerAsAttachmentResponse(struct soap *soap, struct omws__getLayerAsAttachmentResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->file.xsd__base64Binary::soap_default(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayerAsAttachmentResponse(struct soap *soap, const struct omws__getLayerAsAttachmentResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLayerAsAttachmentResponse);
	if (soap_out_omws__getLayerAsAttachmentResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayerAsAttachmentResponse(struct soap *soap, const char *tag, int id, const struct omws__getLayerAsAttachmentResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLayerAsAttachmentResponse), type);
	soap_element_result(soap, "file");
	a->file.soap_out(soap, "file", -1, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLayerAsAttachmentResponse * SOAP_FMAC4 soap_get_omws__getLayerAsAttachmentResponse(struct soap *soap, struct omws__getLayerAsAttachmentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLayerAsAttachmentResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayerAsAttachmentResponse * SOAP_FMAC4 soap_in_omws__getLayerAsAttachmentResponse(struct soap *soap, const char *tag, struct omws__getLayerAsAttachmentResponse *a, const char *type)
{
	short soap_flag_file = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLayerAsAttachmentResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLayerAsAttachmentResponse, sizeof(struct omws__getLayerAsAttachmentResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_omws__getLayerAsAttachmentResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_file && soap->error == SOAP_TAG_MISMATCH)
				if (a->file.soap_in(soap, "file", "xsd:base64Binary"))
				{	soap_flag_file--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_file > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLayerAsAttachmentResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayerAsAttachmentResponse, 0, sizeof(struct omws__getLayerAsAttachmentResponse), 0, soap_copy_omws__getLayerAsAttachmentResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct omws__getLayerAsAttachmentResponse * SOAP_FMAC6 soap_new_omws__getLayerAsAttachmentResponse(struct soap *soap, int n)
{	return soap_instantiate_omws__getLayerAsAttachmentResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_omws__getLayerAsAttachmentResponse(struct soap *soap, struct omws__getLayerAsAttachmentResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 struct omws__getLayerAsAttachmentResponse * SOAP_FMAC6 soap_instantiate_omws__getLayerAsAttachmentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_omws__getLayerAsAttachmentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_omws__getLayerAsAttachmentResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct omws__getLayerAsAttachmentResponse;
		if (size)
			*size = sizeof(struct omws__getLayerAsAttachmentResponse);
	}
	else
	{	cp->ptr = (void*)new struct omws__getLayerAsAttachmentResponse[n];
		if (size)
			*size = n * sizeof(struct omws__getLayerAsAttachmentResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct omws__getLayerAsAttachmentResponse*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_omws__getLayerAsAttachmentResponse(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct omws__getLayerAsAttachmentResponse %p -> %p\n", q, p));
	*(struct omws__getLayerAsAttachmentResponse*)p = *(struct omws__getLayerAsAttachmentResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLog(struct soap *soap, const struct omws__getLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLog(struct soap *soap, struct omws__getLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLog(struct soap *soap, const struct omws__getLog *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLog);
	if (soap_out_omws__getLog(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLog(struct soap *soap, const char *tag, int id, const struct omws__getLog *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLog), type);
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLog * SOAP_FMAC4 soap_get_omws__getLog(struct soap *soap, struct omws__getLog *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLog(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLog * SOAP_FMAC4 soap_in_omws__getLog(struct soap *soap, const char *tag, struct omws__getLog *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLog *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLog, sizeof(struct omws__getLog), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLog(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLog *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLog, 0, sizeof(struct omws__getLog), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLogResponse(struct soap *soap, const struct omws__getLogResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->log);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLogResponse(struct soap *soap, struct omws__getLogResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->log);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLogResponse(struct soap *soap, const struct omws__getLogResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLogResponse);
	if (soap_out_omws__getLogResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLogResponse(struct soap *soap, const char *tag, int id, const struct omws__getLogResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLogResponse), type);
	if (a->log)
		soap_element_result(soap, "log");
	soap_out_xsd__string(soap, "log", -1, &a->log, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLogResponse * SOAP_FMAC4 soap_get_omws__getLogResponse(struct soap *soap, struct omws__getLogResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLogResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLogResponse * SOAP_FMAC4 soap_in_omws__getLogResponse(struct soap *soap, const char *tag, struct omws__getLogResponse *a, const char *type)
{
	short soap_flag_log = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLogResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLogResponse, sizeof(struct omws__getLogResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLogResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_log && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "log", &a->log, "xsd:string"))
				{	soap_flag_log--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_log > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLogResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLogResponse, 0, sizeof(struct omws__getLogResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getProgress(struct soap *soap, const struct omws__getProgress *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getProgress(struct soap *soap, struct omws__getProgress *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getProgress(struct soap *soap, const struct omws__getProgress *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getProgress);
	if (soap_out_omws__getProgress(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getProgress(struct soap *soap, const char *tag, int id, const struct omws__getProgress *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getProgress), type);
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getProgress * SOAP_FMAC4 soap_get_omws__getProgress(struct soap *soap, struct omws__getProgress *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getProgress(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getProgress * SOAP_FMAC4 soap_in_omws__getProgress(struct soap *soap, const char *tag, struct omws__getProgress *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getProgress *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getProgress, sizeof(struct omws__getProgress), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getProgress(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getProgress *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getProgress, 0, sizeof(struct omws__getProgress), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getProgressResponse(struct soap *soap, const struct omws__getProgressResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getProgressResponse(struct soap *soap, struct omws__getProgressResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->progress);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getProgressResponse(struct soap *soap, const struct omws__getProgressResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getProgressResponse);
	if (soap_out_omws__getProgressResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getProgressResponse(struct soap *soap, const char *tag, int id, const struct omws__getProgressResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getProgressResponse), type);
	soap_element_result(soap, "progress");
	soap_out_xsd__int(soap, "progress", -1, &a->progress, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getProgressResponse * SOAP_FMAC4 soap_get_omws__getProgressResponse(struct soap *soap, struct omws__getProgressResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getProgressResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getProgressResponse * SOAP_FMAC4 soap_in_omws__getProgressResponse(struct soap *soap, const char *tag, struct omws__getProgressResponse *a, const char *type)
{
	short soap_flag_progress = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getProgressResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getProgressResponse, sizeof(struct omws__getProgressResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getProgressResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_progress && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "progress", &a->progress, "xsd:int"))
				{	soap_flag_progress--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_progress > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getProgressResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getProgressResponse, 0, sizeof(struct omws__getProgressResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__projectModel(struct soap *soap, const struct omws__projectModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__projectModel(struct soap *soap, struct omws__projectModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->om__ProjectionParameters = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__projectModel(struct soap *soap, const struct omws__projectModel *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__projectModel);
	if (soap_out_omws__projectModel(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__projectModel(struct soap *soap, const char *tag, int id, const struct omws__projectModel *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__projectModel), type);
	soap_outwliteral(soap, "om:ProjectionParameters", &a->om__ProjectionParameters);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__projectModel * SOAP_FMAC4 soap_get_omws__projectModel(struct soap *soap, struct omws__projectModel *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__projectModel(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__projectModel * SOAP_FMAC4 soap_in_omws__projectModel(struct soap *soap, const char *tag, struct omws__projectModel *a, const char *type)
{
	short soap_flag_om__ProjectionParameters = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__projectModel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__projectModel, sizeof(struct omws__projectModel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__projectModel(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__ProjectionParameters && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inwliteral(soap, "om:ProjectionParameters", &a->om__ProjectionParameters))
				{	soap_flag_om__ProjectionParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__projectModel *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__projectModel, 0, sizeof(struct omws__projectModel), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__projectModelResponse(struct soap *soap, const struct omws__projectModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__projectModelResponse(struct soap *soap, struct omws__projectModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__projectModelResponse(struct soap *soap, const struct omws__projectModelResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__projectModelResponse);
	if (soap_out_omws__projectModelResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__projectModelResponse(struct soap *soap, const char *tag, int id, const struct omws__projectModelResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__projectModelResponse), type);
	if (a->ticket)
		soap_element_result(soap, "ticket");
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__projectModelResponse * SOAP_FMAC4 soap_get_omws__projectModelResponse(struct soap *soap, struct omws__projectModelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__projectModelResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__projectModelResponse * SOAP_FMAC4 soap_in_omws__projectModelResponse(struct soap *soap, const char *tag, struct omws__projectModelResponse *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__projectModelResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__projectModelResponse, sizeof(struct omws__projectModelResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__projectModelResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ticket > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__projectModelResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__projectModelResponse, 0, sizeof(struct omws__projectModelResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getTestResult(struct soap *soap, const struct omws__getTestResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getTestResult(struct soap *soap, struct omws__getTestResult *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getTestResult(struct soap *soap, const struct omws__getTestResult *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getTestResult);
	if (soap_out_omws__getTestResult(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getTestResult(struct soap *soap, const char *tag, int id, const struct omws__getTestResult *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getTestResult), type);
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getTestResult * SOAP_FMAC4 soap_get_omws__getTestResult(struct soap *soap, struct omws__getTestResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getTestResult(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getTestResult * SOAP_FMAC4 soap_in_omws__getTestResult(struct soap *soap, const char *tag, struct omws__getTestResult *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getTestResult *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getTestResult, sizeof(struct omws__getTestResult), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getTestResult(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getTestResult *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getTestResult, 0, sizeof(struct omws__getTestResult), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__testResponse(struct soap *soap, const struct omws__testResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__testResponse(struct soap *soap, struct omws__testResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->om__TestResultEnvelope = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__testResponse(struct soap *soap, const struct omws__testResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__testResponse);
	if (soap_out_omws__testResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__testResponse(struct soap *soap, const char *tag, int id, const struct omws__testResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__testResponse), type);
	if (a->om__TestResultEnvelope)
		soap_element_result(soap, "om:TestResultEnvelope");
	soap_outwliteral(soap, "om:TestResultEnvelope", &a->om__TestResultEnvelope);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__testResponse * SOAP_FMAC4 soap_get_omws__testResponse(struct soap *soap, struct omws__testResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__testResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__testResponse * SOAP_FMAC4 soap_in_omws__testResponse(struct soap *soap, const char *tag, struct omws__testResponse *a, const char *type)
{
	short soap_flag_om__TestResultEnvelope = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__testResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__testResponse, sizeof(struct omws__testResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__testResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__TestResultEnvelope && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inwliteral(soap, "om:TestResultEnvelope", &a->om__TestResultEnvelope))
				{	soap_flag_om__TestResultEnvelope--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__testResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__testResponse, 0, sizeof(struct omws__testResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__testModel(struct soap *soap, const struct omws__testModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__testModel(struct soap *soap, struct omws__testModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->om__TestParameters = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__testModel(struct soap *soap, const struct omws__testModel *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__testModel);
	if (soap_out_omws__testModel(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__testModel(struct soap *soap, const char *tag, int id, const struct omws__testModel *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__testModel), type);
	soap_outwliteral(soap, "om:TestParameters", &a->om__TestParameters);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__testModel * SOAP_FMAC4 soap_get_omws__testModel(struct soap *soap, struct omws__testModel *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__testModel(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__testModel * SOAP_FMAC4 soap_in_omws__testModel(struct soap *soap, const char *tag, struct omws__testModel *a, const char *type)
{
	short soap_flag_om__TestParameters = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__testModel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__testModel, sizeof(struct omws__testModel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__testModel(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__TestParameters && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inwliteral(soap, "om:TestParameters", &a->om__TestParameters))
				{	soap_flag_om__TestParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__testModel *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__testModel, 0, sizeof(struct omws__testModel), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__testModelResponse(struct soap *soap, const struct omws__testModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__testModelResponse(struct soap *soap, struct omws__testModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__testModelResponse(struct soap *soap, const struct omws__testModelResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__testModelResponse);
	if (soap_out_omws__testModelResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__testModelResponse(struct soap *soap, const char *tag, int id, const struct omws__testModelResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__testModelResponse), type);
	if (a->ticket)
		soap_element_result(soap, "ticket");
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__testModelResponse * SOAP_FMAC4 soap_get_omws__testModelResponse(struct soap *soap, struct omws__testModelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__testModelResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__testModelResponse * SOAP_FMAC4 soap_in_omws__testModelResponse(struct soap *soap, const char *tag, struct omws__testModelResponse *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__testModelResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__testModelResponse, sizeof(struct omws__testModelResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__testModelResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ticket > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__testModelResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__testModelResponse, 0, sizeof(struct omws__testModelResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getModel(struct soap *soap, const struct omws__getModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getModel(struct soap *soap, struct omws__getModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getModel(struct soap *soap, const struct omws__getModel *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getModel);
	if (soap_out_omws__getModel(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getModel(struct soap *soap, const char *tag, int id, const struct omws__getModel *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getModel), type);
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getModel * SOAP_FMAC4 soap_get_omws__getModel(struct soap *soap, struct omws__getModel *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getModel(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getModel * SOAP_FMAC4 soap_in_omws__getModel(struct soap *soap, const char *tag, struct omws__getModel *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getModel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getModel, sizeof(struct omws__getModel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getModel(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getModel *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getModel, 0, sizeof(struct omws__getModel), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getModelResponse(struct soap *soap, const struct omws__getModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getModelResponse(struct soap *soap, struct omws__getModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->om__ModelEnvelope = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getModelResponse(struct soap *soap, const struct omws__getModelResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getModelResponse);
	if (soap_out_omws__getModelResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getModelResponse(struct soap *soap, const char *tag, int id, const struct omws__getModelResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getModelResponse), type);
	if (a->om__ModelEnvelope)
		soap_element_result(soap, "om:ModelEnvelope");
	soap_outwliteral(soap, "om:ModelEnvelope", &a->om__ModelEnvelope);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getModelResponse * SOAP_FMAC4 soap_get_omws__getModelResponse(struct soap *soap, struct omws__getModelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getModelResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getModelResponse * SOAP_FMAC4 soap_in_omws__getModelResponse(struct soap *soap, const char *tag, struct omws__getModelResponse *a, const char *type)
{
	short soap_flag_om__ModelEnvelope = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getModelResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getModelResponse, sizeof(struct omws__getModelResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getModelResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__ModelEnvelope && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inwliteral(soap, "om:ModelEnvelope", &a->om__ModelEnvelope))
				{	soap_flag_om__ModelEnvelope--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getModelResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getModelResponse, 0, sizeof(struct omws__getModelResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__createModel(struct soap *soap, const struct omws__createModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__createModel(struct soap *soap, struct omws__createModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->om__ModelParameters = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__createModel(struct soap *soap, const struct omws__createModel *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__createModel);
	if (soap_out_omws__createModel(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__createModel(struct soap *soap, const char *tag, int id, const struct omws__createModel *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__createModel), type);
	soap_outwliteral(soap, "om:ModelParameters", &a->om__ModelParameters);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__createModel * SOAP_FMAC4 soap_get_omws__createModel(struct soap *soap, struct omws__createModel *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__createModel(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__createModel * SOAP_FMAC4 soap_in_omws__createModel(struct soap *soap, const char *tag, struct omws__createModel *a, const char *type)
{
	short soap_flag_om__ModelParameters = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__createModel *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__createModel, sizeof(struct omws__createModel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__createModel(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__ModelParameters && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inwliteral(soap, "om:ModelParameters", &a->om__ModelParameters))
				{	soap_flag_om__ModelParameters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__createModel *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__createModel, 0, sizeof(struct omws__createModel), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__createModelResponse(struct soap *soap, const struct omws__createModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__createModelResponse(struct soap *soap, struct omws__createModelResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->ticket);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__createModelResponse(struct soap *soap, const struct omws__createModelResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__createModelResponse);
	if (soap_out_omws__createModelResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__createModelResponse(struct soap *soap, const char *tag, int id, const struct omws__createModelResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__createModelResponse), type);
	if (a->ticket)
		soap_element_result(soap, "ticket");
	soap_out_xsd__string(soap, "ticket", -1, &a->ticket, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__createModelResponse * SOAP_FMAC4 soap_get_omws__createModelResponse(struct soap *soap, struct omws__createModelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__createModelResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__createModelResponse * SOAP_FMAC4 soap_in_omws__createModelResponse(struct soap *soap, const char *tag, struct omws__createModelResponse *a, const char *type)
{
	short soap_flag_ticket = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__createModelResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__createModelResponse, sizeof(struct omws__createModelResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__createModelResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ticket && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "ticket", &a->ticket, "xsd:string"))
				{	soap_flag_ticket--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ticket > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__createModelResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__createModelResponse, 0, sizeof(struct omws__createModelResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayers(struct soap *soap, const struct omws__getLayers *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayers(struct soap *soap, struct omws__getLayers *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayers(struct soap *soap, const struct omws__getLayers *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLayers);
	if (soap_out_omws__getLayers(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayers(struct soap *soap, const char *tag, int id, const struct omws__getLayers *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLayers), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLayers * SOAP_FMAC4 soap_get_omws__getLayers(struct soap *soap, struct omws__getLayers *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLayers(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayers * SOAP_FMAC4 soap_in_omws__getLayers(struct soap *soap, const char *tag, struct omws__getLayers *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLayers *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLayers, sizeof(struct omws__getLayers), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLayers(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLayers *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayers, 0, sizeof(struct omws__getLayers), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getLayersResponse(struct soap *soap, const struct omws__getLayersResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getLayersResponse(struct soap *soap, struct omws__getLayersResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->om__AvailableLayers = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getLayersResponse(struct soap *soap, const struct omws__getLayersResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getLayersResponse);
	if (soap_out_omws__getLayersResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getLayersResponse(struct soap *soap, const char *tag, int id, const struct omws__getLayersResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getLayersResponse), type);
	if (a->om__AvailableLayers)
		soap_element_result(soap, "om:AvailableLayers");
	soap_outwliteral(soap, "om:AvailableLayers", &a->om__AvailableLayers);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getLayersResponse * SOAP_FMAC4 soap_get_omws__getLayersResponse(struct soap *soap, struct omws__getLayersResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getLayersResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayersResponse * SOAP_FMAC4 soap_in_omws__getLayersResponse(struct soap *soap, const char *tag, struct omws__getLayersResponse *a, const char *type)
{
	short soap_flag_om__AvailableLayers = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getLayersResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getLayersResponse, sizeof(struct omws__getLayersResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getLayersResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__AvailableLayers && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inwliteral(soap, "om:AvailableLayers", &a->om__AvailableLayers))
				{	soap_flag_om__AvailableLayers--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getLayersResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayersResponse, 0, sizeof(struct omws__getLayersResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getAlgorithms(struct soap *soap, const struct omws__getAlgorithms *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getAlgorithms(struct soap *soap, struct omws__getAlgorithms *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getAlgorithms(struct soap *soap, const struct omws__getAlgorithms *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getAlgorithms);
	if (soap_out_omws__getAlgorithms(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getAlgorithms(struct soap *soap, const char *tag, int id, const struct omws__getAlgorithms *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getAlgorithms), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getAlgorithms * SOAP_FMAC4 soap_get_omws__getAlgorithms(struct soap *soap, struct omws__getAlgorithms *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getAlgorithms(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getAlgorithms * SOAP_FMAC4 soap_in_omws__getAlgorithms(struct soap *soap, const char *tag, struct omws__getAlgorithms *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getAlgorithms *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getAlgorithms, sizeof(struct omws__getAlgorithms), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getAlgorithms(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getAlgorithms *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getAlgorithms, 0, sizeof(struct omws__getAlgorithms), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__getAlgorithmsResponse(struct soap *soap, const struct omws__getAlgorithmsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__getAlgorithmsResponse(struct soap *soap, struct omws__getAlgorithmsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->om__AvailableAlgorithms = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__getAlgorithmsResponse(struct soap *soap, const struct omws__getAlgorithmsResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__getAlgorithmsResponse);
	if (soap_out_omws__getAlgorithmsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__getAlgorithmsResponse(struct soap *soap, const char *tag, int id, const struct omws__getAlgorithmsResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__getAlgorithmsResponse), type);
	if (a->om__AvailableAlgorithms)
		soap_element_result(soap, "om:AvailableAlgorithms");
	soap_outwliteral(soap, "om:AvailableAlgorithms", &a->om__AvailableAlgorithms);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__getAlgorithmsResponse * SOAP_FMAC4 soap_get_omws__getAlgorithmsResponse(struct soap *soap, struct omws__getAlgorithmsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__getAlgorithmsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getAlgorithmsResponse * SOAP_FMAC4 soap_in_omws__getAlgorithmsResponse(struct soap *soap, const char *tag, struct omws__getAlgorithmsResponse *a, const char *type)
{
	short soap_flag_om__AvailableAlgorithms = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__getAlgorithmsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__getAlgorithmsResponse, sizeof(struct omws__getAlgorithmsResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__getAlgorithmsResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_om__AvailableAlgorithms && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inwliteral(soap, "om:AvailableAlgorithms", &a->om__AvailableAlgorithms))
				{	soap_flag_om__AvailableAlgorithms--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__getAlgorithmsResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__getAlgorithmsResponse, 0, sizeof(struct omws__getAlgorithmsResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__ping(struct soap *soap, const struct omws__ping *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__ping(struct soap *soap, struct omws__ping *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _ skipped */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__ping(struct soap *soap, const struct omws__ping *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__ping);
	if (soap_out_omws__ping(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__ping(struct soap *soap, const char *tag, int id, const struct omws__ping *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__ping), type);
	/* transient _ skipped */
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__ping * SOAP_FMAC4 soap_get_omws__ping(struct soap *soap, struct omws__ping *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__ping(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__ping * SOAP_FMAC4 soap_in_omws__ping(struct soap *soap, const char *tag, struct omws__ping *a, const char *type)
{;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__ping *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__ping, sizeof(struct omws__ping), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__ping(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _ skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__ping *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__ping, 0, sizeof(struct omws__ping), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_omws__pingResponse(struct soap *soap, const struct omws__pingResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_omws__pingResponse(struct soap *soap, struct omws__pingResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__int(soap, &a->status);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_omws__pingResponse(struct soap *soap, const struct omws__pingResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_omws__pingResponse);
	if (soap_out_omws__pingResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_omws__pingResponse(struct soap *soap, const char *tag, int id, const struct omws__pingResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_omws__pingResponse), type);
	soap_element_result(soap, "status");
	soap_out_xsd__int(soap, "status", -1, &a->status, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct omws__pingResponse * SOAP_FMAC4 soap_get_omws__pingResponse(struct soap *soap, struct omws__pingResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_omws__pingResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__pingResponse * SOAP_FMAC4 soap_in_omws__pingResponse(struct soap *soap, const char *tag, struct omws__pingResponse *a, const char *type)
{
	short soap_flag_status = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct omws__pingResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_omws__pingResponse, sizeof(struct omws__pingResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_omws__pingResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_status && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__int(soap, "status", &a->status, "xsd:int"))
				{	soap_flag_status--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_status > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct omws__pingResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_omws__pingResponse, 0, sizeof(struct omws__pingResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_xsd__string(soap, &a->omws__version);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->omws__version);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	soap_out_xsd__string(soap, "omws:version", -1, &a->omws__version, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	short soap_flag_omws__version = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_omws__version && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "omws:version", &a->omws__version, "xsd:string"))
				{	soap_flag_omws__version--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getProjectionMetadataResponse(struct soap *soap, struct omws__getProjectionMetadataResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_omws__getProjectionMetadataResponse))
		soap_serialize_omws__getProjectionMetadataResponse(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getProjectionMetadataResponse(struct soap *soap, struct omws__getProjectionMetadataResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToomws__getProjectionMetadataResponse);
	if (soap_out_PointerToomws__getProjectionMetadataResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getProjectionMetadataResponse(struct soap *soap, const char *tag, int id, struct omws__getProjectionMetadataResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_omws__getProjectionMetadataResponse);
	if (id < 0)
		return soap->error;
	return soap_out_omws__getProjectionMetadataResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct omws__getProjectionMetadataResponse ** SOAP_FMAC4 soap_get_PointerToomws__getProjectionMetadataResponse(struct soap *soap, struct omws__getProjectionMetadataResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToomws__getProjectionMetadataResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getProjectionMetadataResponse ** SOAP_FMAC4 soap_in_PointerToomws__getProjectionMetadataResponse(struct soap *soap, const char *tag, struct omws__getProjectionMetadataResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct omws__getProjectionMetadataResponse **)soap_malloc(soap, sizeof(struct omws__getProjectionMetadataResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_omws__getProjectionMetadataResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct omws__getProjectionMetadataResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_omws__getProjectionMetadataResponse, sizeof(struct omws__getProjectionMetadataResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__testResponse(struct soap *soap, struct omws__testResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_omws__testResponse))
		soap_serialize_omws__testResponse(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__testResponse(struct soap *soap, struct omws__testResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToomws__testResponse);
	if (soap_out_PointerToomws__testResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__testResponse(struct soap *soap, const char *tag, int id, struct omws__testResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_omws__testResponse);
	if (id < 0)
		return soap->error;
	return soap_out_omws__testResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct omws__testResponse ** SOAP_FMAC4 soap_get_PointerToomws__testResponse(struct soap *soap, struct omws__testResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToomws__testResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__testResponse ** SOAP_FMAC4 soap_in_PointerToomws__testResponse(struct soap *soap, const char *tag, struct omws__testResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct omws__testResponse **)soap_malloc(soap, sizeof(struct omws__testResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_omws__testResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct omws__testResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_omws__testResponse, sizeof(struct omws__testResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getModelResponse(struct soap *soap, struct omws__getModelResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_omws__getModelResponse))
		soap_serialize_omws__getModelResponse(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getModelResponse(struct soap *soap, struct omws__getModelResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToomws__getModelResponse);
	if (soap_out_PointerToomws__getModelResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getModelResponse(struct soap *soap, const char *tag, int id, struct omws__getModelResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_omws__getModelResponse);
	if (id < 0)
		return soap->error;
	return soap_out_omws__getModelResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct omws__getModelResponse ** SOAP_FMAC4 soap_get_PointerToomws__getModelResponse(struct soap *soap, struct omws__getModelResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToomws__getModelResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getModelResponse ** SOAP_FMAC4 soap_in_PointerToomws__getModelResponse(struct soap *soap, const char *tag, struct omws__getModelResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct omws__getModelResponse **)soap_malloc(soap, sizeof(struct omws__getModelResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_omws__getModelResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct omws__getModelResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_omws__getModelResponse, sizeof(struct omws__getModelResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getLayersResponse(struct soap *soap, struct omws__getLayersResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_omws__getLayersResponse))
		soap_serialize_omws__getLayersResponse(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getLayersResponse(struct soap *soap, struct omws__getLayersResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToomws__getLayersResponse);
	if (soap_out_PointerToomws__getLayersResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getLayersResponse(struct soap *soap, const char *tag, int id, struct omws__getLayersResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_omws__getLayersResponse);
	if (id < 0)
		return soap->error;
	return soap_out_omws__getLayersResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct omws__getLayersResponse ** SOAP_FMAC4 soap_get_PointerToomws__getLayersResponse(struct soap *soap, struct omws__getLayersResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToomws__getLayersResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getLayersResponse ** SOAP_FMAC4 soap_in_PointerToomws__getLayersResponse(struct soap *soap, const char *tag, struct omws__getLayersResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct omws__getLayersResponse **)soap_malloc(soap, sizeof(struct omws__getLayersResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_omws__getLayersResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct omws__getLayersResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_omws__getLayersResponse, sizeof(struct omws__getLayersResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToomws__getAlgorithmsResponse(struct soap *soap, struct omws__getAlgorithmsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_omws__getAlgorithmsResponse))
		soap_serialize_omws__getAlgorithmsResponse(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToomws__getAlgorithmsResponse(struct soap *soap, struct omws__getAlgorithmsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToomws__getAlgorithmsResponse);
	if (soap_out_PointerToomws__getAlgorithmsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToomws__getAlgorithmsResponse(struct soap *soap, const char *tag, int id, struct omws__getAlgorithmsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_omws__getAlgorithmsResponse);
	if (id < 0)
		return soap->error;
	return soap_out_omws__getAlgorithmsResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct omws__getAlgorithmsResponse ** SOAP_FMAC4 soap_get_PointerToomws__getAlgorithmsResponse(struct soap *soap, struct omws__getAlgorithmsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToomws__getAlgorithmsResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct omws__getAlgorithmsResponse ** SOAP_FMAC4 soap_in_PointerToomws__getAlgorithmsResponse(struct soap *soap, const char *tag, struct omws__getAlgorithmsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct omws__getAlgorithmsResponse **)soap_malloc(soap, sizeof(struct omws__getAlgorithmsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_omws__getAlgorithmsResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct omws__getAlgorithmsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_omws__getAlgorithmsResponse, sizeof(struct omws__getAlgorithmsResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap *soap, wchar_t *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_wstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap *soap, wchar_t *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wstring);
	if (soap_out_wstring(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap *soap, const char *tag, int id, wchar_t *const*a, const char *type)
{
	return soap_outwstring(soap, tag, id, a, type, SOAP_TYPE_wstring);
}

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap *soap, wchar_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_wstring(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap *soap, const char *tag, wchar_t **a, const char *type)
{
	return soap_inwstring(soap, tag, a, type, SOAP_TYPE_wstring, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__string(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (soap_out_xsd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */
